
SmartHome_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008c1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000552  00800060  00008c1a  00008cae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  008005b2  008005b2  00009200  2**0
                  ALLOC
  3 .stab         00009300  00000000  00000000  00009200  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004953  00000000  00000000  00012500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00016e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00016ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000171e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000195f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001a976  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001bb4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0001bd0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001c002  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001c970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 38 0c 	jmp	0x1870	; 0x1870 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a6 08 	jmp	0x114c	; 0x114c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	fc e8       	ldi	r31, 0x8C	; 140
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 30       	cpi	r26, 0x06	; 6
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 63 45 	call	0x8ac6	; 0x8ac6 <main>
      8a:	0c 94 0b 46 	jmp	0x8c16	; 0x8c16 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 45 	jmp	0x8ba8	; 0x8ba8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e4       	ldi	r26, 0x40	; 64
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 45 	jmp	0x8be0	; 0x8be0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 45 	jmp	0x8bc0	; 0x8bc0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 45 	jmp	0x8bf8	; 0x8bf8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 45 	jmp	0x8bc0	; 0x8bc0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 45 	jmp	0x8bf8	; 0x8bf8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 45 	jmp	0x8ba8	; 0x8ba8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e4       	ldi	r24, 0x40	; 64
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 45 	jmp	0x8be0	; 0x8be0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 dc 45 	jmp	0x8bb8	; 0x8bb8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e4       	ldi	r22, 0x40	; 64
     69c:	73 e0       	ldi	r23, 0x03	; 3
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f8 45 	jmp	0x8bf0	; 0x8bf0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e0 45 	jmp	0x8bc0	; 0x8bc0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fc 45 	jmp	0x8bf8	; 0x8bf8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e0 45 	jmp	0x8bc0	; 0x8bc0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fc 45 	jmp	0x8bf8	; 0x8bf8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e0 45 	jmp	0x8bc0	; 0x8bc0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fc 45 	jmp	0x8bf8	; 0x8bf8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e4 45 	jmp	0x8bc8	; 0x8bc8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 00 46 	jmp	0x8c00	; 0x8c00 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 dc 45 	jmp	0x8bb8	; 0x8bb8 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f8 45 	jmp	0x8bf0	; 0x8bf0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 5b       	subi	r30, 0xB8	; 184
     aca:	fc 4f       	sbci	r31, 0xFC	; 252
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_Init>:
#include<util/delay.h>

static void (*USART_PTR_FUNC)(void) =NULL;

void UART_Init(UART_CONFIG *Ptr_Copy_UART)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2b 97       	sbiw	r28, 0x0b	; 11
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	9b 83       	std	Y+3, r25	; 0x03
     e44:	8a 83       	std	Y+2, r24	; 0x02
	/*u8 variable to carry the values of UCSRC Register*/
	u8 Local_UCSRC=0;
     e46:	19 82       	std	Y+1, r1	; 0x01

	/*Select Asynchronous mode*/
	Local_UCSRC &= UCSRC_UMSEL_ASYNCH_MASK_Clear;
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	8f 7b       	andi	r24, 0xBF	; 191
     e4c:	89 83       	std	Y+1, r24	; 0x01
	/*Clear UCPOL bit in UCSRC*/
	Local_UCSRC &= UCSRC_UCPOL_CLEAR_MASK;
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	8e 7f       	andi	r24, 0xFE	; 254
     e52:	89 83       	std	Y+1, r24	; 0x01
	switch(Ptr_Copy_UART->Baud_NO)
     e54:	ea 81       	ldd	r30, Y+2	; 0x02
     e56:	fb 81       	ldd	r31, Y+3	; 0x03
     e58:	20 81       	ld	r18, Z
     e5a:	31 81       	ldd	r19, Z+1	; 0x01
     e5c:	3b 87       	std	Y+11, r19	; 0x0b
     e5e:	2a 87       	std	Y+10, r18	; 0x0a
     e60:	8a 85       	ldd	r24, Y+10	; 0x0a
     e62:	9b 85       	ldd	r25, Y+11	; 0x0b
     e64:	87 36       	cpi	r24, 0x67	; 103
     e66:	91 05       	cpc	r25, r1
     e68:	a9 f0       	breq	.+42     	; 0xe94 <UART_Init+0x66>
     e6a:	2a 85       	ldd	r18, Y+10	; 0x0a
     e6c:	3b 85       	ldd	r19, Y+11	; 0x0b
     e6e:	28 36       	cpi	r18, 0x68	; 104
     e70:	31 05       	cpc	r19, r1
     e72:	30 f4       	brcc	.+12     	; 0xe80 <UART_Init+0x52>
     e74:	8a 85       	ldd	r24, Y+10	; 0x0a
     e76:	9b 85       	ldd	r25, Y+11	; 0x0b
     e78:	80 31       	cpi	r24, 0x10	; 16
     e7a:	91 05       	cpc	r25, r1
     e7c:	81 f0       	breq	.+32     	; 0xe9e <UART_Init+0x70>
     e7e:	13 c0       	rjmp	.+38     	; 0xea6 <UART_Init+0x78>
     e80:	2a 85       	ldd	r18, Y+10	; 0x0a
     e82:	3b 85       	ldd	r19, Y+11	; 0x0b
     e84:	2f 3c       	cpi	r18, 0xCF	; 207
     e86:	31 05       	cpc	r19, r1
     e88:	71 f4       	brne	.+28     	; 0xea6 <UART_Init+0x78>
	{
	case Baud_16MHz_2400:
		//UBBRL=Baud_16MHz_2400;
		break;
	case Baud_16MHz_4800:
		UBBRL= Baud_16MHz_4800;
     e8a:	e9 e2       	ldi	r30, 0x29	; 41
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	8f ec       	ldi	r24, 0xCF	; 207
     e90:	80 83       	st	Z, r24
     e92:	09 c0       	rjmp	.+18     	; 0xea6 <UART_Init+0x78>
		break;
	case Baud_16MHz_9600:
		//UBBRL=Baud_16MHz_9600;
		UBBRL =8;
     e94:	e9 e2       	ldi	r30, 0x29	; 41
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	88 e0       	ldi	r24, 0x08	; 8
     e9a:	80 83       	st	Z, r24
     e9c:	04 c0       	rjmp	.+8      	; 0xea6 <UART_Init+0x78>
		break;
	case Baud_16MHz_57600:
		UBBRL= 16;
     e9e:	e9 e2       	ldi	r30, 0x29	; 41
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 e1       	ldi	r24, 0x10	; 16
     ea4:	80 83       	st	Z, r24
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Word_size)
     ea6:	ea 81       	ldd	r30, Y+2	; 0x02
     ea8:	fb 81       	ldd	r31, Y+3	; 0x03
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	39 87       	std	Y+9, r19	; 0x09
     eb2:	28 87       	std	Y+8, r18	; 0x08
     eb4:	88 85       	ldd	r24, Y+8	; 0x08
     eb6:	99 85       	ldd	r25, Y+9	; 0x09
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	91 05       	cpc	r25, r1
     ebc:	b1 f1       	breq	.+108    	; 0xf2a <UART_Init+0xfc>
     ebe:	28 85       	ldd	r18, Y+8	; 0x08
     ec0:	39 85       	ldd	r19, Y+9	; 0x09
     ec2:	23 30       	cpi	r18, 0x03	; 3
     ec4:	31 05       	cpc	r19, r1
     ec6:	54 f4       	brge	.+20     	; 0xedc <UART_Init+0xae>
     ec8:	88 85       	ldd	r24, Y+8	; 0x08
     eca:	99 85       	ldd	r25, Y+9	; 0x09
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	89 f0       	breq	.+34     	; 0xef2 <UART_Init+0xc4>
     ed0:	28 85       	ldd	r18, Y+8	; 0x08
     ed2:	39 85       	ldd	r19, Y+9	; 0x09
     ed4:	21 30       	cpi	r18, 0x01	; 1
     ed6:	31 05       	cpc	r19, r1
     ed8:	d1 f0       	breq	.+52     	; 0xf0e <UART_Init+0xe0>
     eda:	50 c0       	rjmp	.+160    	; 0xf7c <UART_Init+0x14e>
     edc:	88 85       	ldd	r24, Y+8	; 0x08
     ede:	99 85       	ldd	r25, Y+9	; 0x09
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	91 05       	cpc	r25, r1
     ee4:	81 f1       	breq	.+96     	; 0xf46 <UART_Init+0x118>
     ee6:	28 85       	ldd	r18, Y+8	; 0x08
     ee8:	39 85       	ldd	r19, Y+9	; 0x09
     eea:	24 30       	cpi	r18, 0x04	; 4
     eec:	31 05       	cpc	r19, r1
     eee:	c9 f1       	breq	.+114    	; 0xf62 <UART_Init+0x134>
     ef0:	45 c0       	rjmp	.+138    	; 0xf7c <UART_Init+0x14e>
	{
	case Word_Size_5:
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ0);
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	8d 7f       	andi	r24, 0xFD	; 253
     ef6:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ1);
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	8b 7f       	andi	r24, 0xFB	; 251
     efc:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     efe:	aa e2       	ldi	r26, 0x2A	; 42
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	ea e2       	ldi	r30, 0x2A	; 42
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8b 7f       	andi	r24, 0xFB	; 251
     f0a:	8c 93       	st	X, r24
     f0c:	37 c0       	rjmp	.+110    	; 0xf7c <UART_Init+0x14e>
		break;
	case Word_Size_6:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	82 60       	ori	r24, 0x02	; 2
     f12:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ1);
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	8b 7f       	andi	r24, 0xFB	; 251
     f18:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     f1a:	aa e2       	ldi	r26, 0x2A	; 42
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ea e2       	ldi	r30, 0x2A	; 42
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	8b 7f       	andi	r24, 0xFB	; 251
     f26:	8c 93       	st	X, r24
     f28:	29 c0       	rjmp	.+82     	; 0xf7c <UART_Init+0x14e>
		break;
	case Word_Size_7:
		CLR_BIT(Local_UCSRC,UCSRC_UCSZ0);
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	8d 7f       	andi	r24, 0xFD	; 253
     f2e:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	84 60       	ori	r24, 0x04	; 4
     f34:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     f36:	aa e2       	ldi	r26, 0x2A	; 42
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ea e2       	ldi	r30, 0x2A	; 42
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8b 7f       	andi	r24, 0xFB	; 251
     f42:	8c 93       	st	X, r24
     f44:	1b c0       	rjmp	.+54     	; 0xf7c <UART_Init+0x14e>
		break;
	case Word_Size_8:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	84 60       	ori	r24, 0x04	; 4
     f50:	89 83       	std	Y+1, r24	; 0x01
		CLR_BIT(UCSRB,UCSRB_UCSZ2);
     f52:	aa e2       	ldi	r26, 0x2A	; 42
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ea e2       	ldi	r30, 0x2A	; 42
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8b 7f       	andi	r24, 0xFB	; 251
     f5e:	8c 93       	st	X, r24
     f60:	0d c0       	rjmp	.+26     	; 0xf7c <UART_Init+0x14e>
		break;
	case Word_Size_9:
		SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	82 60       	ori	r24, 0x02	; 2
     f66:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	84 60       	ori	r24, 0x04	; 4
     f6c:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(UCSRB,UCSRB_UCSZ2);
     f6e:	aa e2       	ldi	r26, 0x2A	; 42
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ea e2       	ldi	r30, 0x2A	; 42
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	84 60       	ori	r24, 0x04	; 4
     f7a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Parity_type)
     f7c:	ea 81       	ldd	r30, Y+2	; 0x02
     f7e:	fb 81       	ldd	r31, Y+3	; 0x03
     f80:	83 81       	ldd	r24, Z+3	; 0x03
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	3f 83       	std	Y+7, r19	; 0x07
     f88:	2e 83       	std	Y+6, r18	; 0x06
     f8a:	8e 81       	ldd	r24, Y+6	; 0x06
     f8c:	9f 81       	ldd	r25, Y+7	; 0x07
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	91 05       	cpc	r25, r1
     f92:	69 f0       	breq	.+26     	; 0xfae <UART_Init+0x180>
     f94:	2e 81       	ldd	r18, Y+6	; 0x06
     f96:	3f 81       	ldd	r19, Y+7	; 0x07
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	79 f0       	breq	.+30     	; 0xfbc <UART_Init+0x18e>
     f9e:	8e 81       	ldd	r24, Y+6	; 0x06
     fa0:	9f 81       	ldd	r25, Y+7	; 0x07
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	89 f4       	brne	.+34     	; 0xfc8 <UART_Init+0x19a>
	{
	case Disabled:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	8f 7c       	andi	r24, 0xCF	; 207
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	0d c0       	rjmp	.+26     	; 0xfc8 <UART_Init+0x19a>
		break;
	case Enabled_Even_Parity:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	8f 7c       	andi	r24, 0xCF	; 207
     fb2:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= PARITYBITS_EVEN_MASK_SET;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	80 62       	ori	r24, 0x20	; 32
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	06 c0       	rjmp	.+12     	; 0xfc8 <UART_Init+0x19a>
		break;
	case Enabled_Odd_Parity:
		Local_UCSRC &= PARITYBITS_MASK_CLEAR;
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	8f 7c       	andi	r24, 0xCF	; 207
     fc0:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= PARITYBITS_ODD_MASK_SET;
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	80 63       	ori	r24, 0x30	; 48
     fc6:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	switch(Ptr_Copy_UART->Stop_bits_no)
     fc8:	ea 81       	ldd	r30, Y+2	; 0x02
     fca:	fb 81       	ldd	r31, Y+3	; 0x03
     fcc:	84 81       	ldd	r24, Z+4	; 0x04
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	3d 83       	std	Y+5, r19	; 0x05
     fd4:	2c 83       	std	Y+4, r18	; 0x04
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	9d 81       	ldd	r25, Y+5	; 0x05
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	31 f0       	breq	.+12     	; 0xfea <UART_Init+0x1bc>
     fde:	2c 81       	ldd	r18, Y+4	; 0x04
     fe0:	3d 81       	ldd	r19, Y+5	; 0x05
     fe2:	21 30       	cpi	r18, 0x01	; 1
     fe4:	31 05       	cpc	r19, r1
     fe6:	29 f0       	breq	.+10     	; 0xff2 <UART_Init+0x1c4>
     fe8:	0a c0       	rjmp	.+20     	; 0xffe <UART_Init+0x1d0>
	{
	case One_Stop_bit:
		Local_UCSRC &= STOP_BIT_CLEAR_1bit_MASK;
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	87 7f       	andi	r24, 0xF7	; 247
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	06 c0       	rjmp	.+12     	; 0xffe <UART_Init+0x1d0>
		break;
	case Two_Stop_Bit:
		Local_UCSRC &= STOP_BIT_CLEAR_1bit_MASK;
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	87 7f       	andi	r24, 0xF7	; 247
     ff6:	89 83       	std	Y+1, r24	; 0x01
		Local_UCSRC |= STOP_BIT_2bit_SET_MASK;
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	88 60       	ori	r24, 0x08	; 8
     ffc:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	/*Set the selection bit to select UCSRC Register*/
	Local_UCSRC &= UCSRC_URSEL_REGSELECT_CLEAR;
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	8f 77       	andi	r24, 0x7F	; 127
    1002:	89 83       	std	Y+1, r24	; 0x01
	Local_UCSRC |= UCSRC_URSEL_REGSELECT_SET;
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	80 68       	ori	r24, 0x80	; 128
    1008:	89 83       	std	Y+1, r24	; 0x01
	/*Set the UCSRC Register with the Local register*/
	UCSRC = Local_UCSRC;
    100a:	e0 e4       	ldi	r30, 0x40	; 64
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	80 83       	st	Z, r24
	//UBBRL = 51;
	//	UBBRH = Ptr_Copy_UART->Baud_NO >>8;


	/*Enable Transmitter*/
	SET_BIT(UCSRB,UCSRB_TXEN);
    1012:	aa e2       	ldi	r26, 0x2A	; 42
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ea e2       	ldi	r30, 0x2A	; 42
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	88 60       	ori	r24, 0x08	; 8
    101e:	8c 93       	st	X, r24
	/*Enable Receive interrupt*/
	SET_BIT(UCSRB,UCSRB_RXCIE);
    1020:	aa e2       	ldi	r26, 0x2A	; 42
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ea e2       	ldi	r30, 0x2A	; 42
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	80 68       	ori	r24, 0x80	; 128
    102c:	8c 93       	st	X, r24
	/*Enable receiver*/
	SET_BIT(UCSRB,UCSRB_RXEN);
    102e:	aa e2       	ldi	r26, 0x2A	; 42
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ea e2       	ldi	r30, 0x2A	; 42
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 61       	ori	r24, 0x10	; 16
    103a:	8c 93       	st	X, r24
}
    103c:	2b 96       	adiw	r28, 0x0b	; 11
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <UART_SendByte>:


void UART_SendByte(u8 Copy_UART)
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	89 83       	std	Y+1, r24	; 0x01

	//u8 counter=0;
	/*WAIT until transmit buffer is empty*/
	while((GET_BIT(UCSRA,UCSRA_UDRE))==0);
    105a:	eb e2       	ldi	r30, 0x2B	; 43
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	82 95       	swap	r24
    1062:	86 95       	lsr	r24
    1064:	87 70       	andi	r24, 0x07	; 7
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	81 70       	andi	r24, 0x01	; 1
    106c:	90 70       	andi	r25, 0x00	; 0
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	a1 f3       	breq	.-24     	; 0x105a <UART_SendByte+0xc>
	UDR= Copy_UART;
    1072:	ec e2       	ldi	r30, 0x2C	; 44
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	80 83       	st	Z, r24

}
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <UART_SendString>:


void UART_SendString(u8 *Ptr_To_String)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <UART_SendString+0x6>
    1088:	0f 92       	push	r0
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	9b 83       	std	Y+3, r25	; 0x03
    1090:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1092:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;Ptr_To_String[i] != '\0';i++)
    1094:	19 82       	std	Y+1, r1	; 0x01
    1096:	0e c0       	rjmp	.+28     	; 0x10b4 <UART_SendString+0x32>
	{
		//_delay_ms(500);
		UART_SendByte(Ptr_To_String[i]);
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	9b 81       	ldd	r25, Y+3	; 0x03
    10a2:	fc 01       	movw	r30, r24
    10a4:	e2 0f       	add	r30, r18
    10a6:	f3 1f       	adc	r31, r19
    10a8:	80 81       	ld	r24, Z
    10aa:	0e 94 27 08 	call	0x104e	; 0x104e <UART_SendByte>


void UART_SendString(u8 *Ptr_To_String)
{
	u8 i=0;
	for(i=0;Ptr_To_String[i] != '\0';i++)
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	8f 5f       	subi	r24, 0xFF	; 255
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	fc 01       	movw	r30, r24
    10c0:	e2 0f       	add	r30, r18
    10c2:	f3 1f       	adc	r31, r19
    10c4:	80 81       	ld	r24, Z
    10c6:	88 23       	and	r24, r24
    10c8:	39 f7       	brne	.-50     	; 0x1098 <UART_SendString+0x16>
	{
		//_delay_ms(500);
		UART_SendByte(Ptr_To_String[i]);
	}

}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <UART_RecieveByteSynchNonBlocking>:
u8 UART_RecieveByteSynchNonBlocking(void)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62

	u8 counter=0;
    10e0:	19 82       	std	Y+1, r1	; 0x01
	/*wait until receive is complete*/
	while((GET_BIT(UCSRA,UCSRA_RXC))==0 && counter <MAX_DELAY)
    10e2:	eb e2       	ldi	r30, 0x2B	; 43
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	88 23       	and	r24, r24
    10ea:	24 f0       	brlt	.+8      	; 0x10f4 <UART_RecieveByteSynchNonBlocking+0x1e>
	{
		counter++;
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	8f 5f       	subi	r24, 0xFF	; 255
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	f7 cf       	rjmp	.-18     	; 0x10e2 <UART_RecieveByteSynchNonBlocking+0xc>
	}
	return UDR;
    10f4:	ec e2       	ldi	r30, 0x2C	; 44
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
}
    10fa:	0f 90       	pop	r0
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <UART_RecieveByteASynchCallback>:
u8 UART_RecieveByteASynchCallback(void)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    110a:	ec e2       	ldi	r30, 0x2C	; 44
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z

}
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <UART_SetCallBack>:

u8 UART_SetCallBack(void (*Copy_pvINTFunc)(void))
{
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	00 d0       	rcall	.+0      	; 0x111c <UART_SetCallBack+0x6>
    111c:	0f 92       	push	r0
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	9b 83       	std	Y+3, r25	; 0x03
    1124:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvINTFunc != NULL)
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	9b 81       	ldd	r25, Y+3	; 0x03
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	31 f0       	breq	.+12     	; 0x113e <UART_SetCallBack+0x28>
	{
		USART_PTR_FUNC=Copy_pvINTFunc;
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	90 93 b3 05 	sts	0x05B3, r25
    113a:	80 93 b2 05 	sts	0x05B2, r24
	}

	return Local_u8ErrorStatus;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <__vector_13>:
void __vector_13 (void)  __attribute__((signal));
void __vector_13 (void)
{
    114c:	1f 92       	push	r1
    114e:	0f 92       	push	r0
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	0f 92       	push	r0
    1154:	11 24       	eor	r1, r1
    1156:	2f 93       	push	r18
    1158:	3f 93       	push	r19
    115a:	4f 93       	push	r20
    115c:	5f 93       	push	r21
    115e:	6f 93       	push	r22
    1160:	7f 93       	push	r23
    1162:	8f 93       	push	r24
    1164:	9f 93       	push	r25
    1166:	af 93       	push	r26
    1168:	bf 93       	push	r27
    116a:	ef 93       	push	r30
    116c:	ff 93       	push	r31
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62

	if(USART_PTR_FUNC != NULL)
    1176:	80 91 b2 05 	lds	r24, 0x05B2
    117a:	90 91 b3 05 	lds	r25, 0x05B3
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	29 f0       	breq	.+10     	; 0x118c <__vector_13+0x40>
	{
		USART_PTR_FUNC();
    1182:	e0 91 b2 05 	lds	r30, 0x05B2
    1186:	f0 91 b3 05 	lds	r31, 0x05B3
    118a:	09 95       	icall
	}
	else
	{
		/*Stop*/
	}
}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <M_TWI_Void_InitMaster>:
#include "TWI_types.h"
#include "Dio_int.h"
#include "TWI_init.h"

void M_TWI_Void_InitMaster(TWI_SCL_FREQUANCY Copy_Frequancy)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	0f 92       	push	r0
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	89 83       	std	Y+1, r24	; 0x01
//	u8 Local_Check = 0 ;

	/* CLEAR prescaller */
	TWI_TWSR &= TWI_CLR_PRESCALLER ;
    11be:	a1 e2       	ldi	r26, 0x21	; 33
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e1 e2       	ldi	r30, 0x21	; 33
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	88 7f       	andi	r24, 0xF8	; 248
    11ca:	8c 93       	st	X, r24
	/* Set Prescaller to 1*/
	TWI_TWSR |= 0x00 ;
    11cc:	a1 e2       	ldi	r26, 0x21	; 33
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e1 e2       	ldi	r30, 0x21	; 33
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8c 93       	st	X, r24



		TWI_TWBR = Copy_Frequancy ; //TWI_SCL_400KHZ ;
    11d8:	e0 e2       	ldi	r30, 0x20	; 32
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	80 83       	st	Z, r24

	/* Enable TWI and Interrupt*/
	TWI_TWCR |= TWI_INIT_MASK;
    11e0:	a6 e5       	ldi	r26, 0x56	; 86
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	e6 e5       	ldi	r30, 0x56	; 86
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	84 68       	ori	r24, 0x84	; 132
    11ec:	8c 93       	st	X, r24
}
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <M_TWI_Void_SendStartCondition>:


TWI_STATUS M_TWI_Void_SendStartCondition()
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	/* Enable Interrupt, TWI, Start Condition*/
	TWI_TWCR = (1<<TWCR_TWINT)|(1<<TWCR_TWSTA)|(1<<TWCR_TWEN) ;
    11fe:	e6 e5       	ldi	r30, 0x56	; 86
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	84 ea       	ldi	r24, 0xA4	; 164
    1204:	80 83       	st	Z, r24

	/* Wait until interrupt flag raised again !(TWI_TWCR & (1<<TWCR_TWINT))*/
	while(GET_BIT(TWI_TWCR,TWCR_TWINT) == 0);
    1206:	e6 e5       	ldi	r30, 0x56	; 86
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	88 23       	and	r24, r24
    120e:	dc f7       	brge	.-10     	; 0x1206 <M_TWI_Void_SendStartCondition+0x10>

	/* Wait until the TWI start ACK is complete */

	return M_TWI_U8_GetStatus() ;
    1210:	0e 94 87 09 	call	0x130e	; 0x130e <M_TWI_U8_GetStatus>
}
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <M_TWI_Void_SetSlaveAddress>:


void M_TWI_Void_SetSlaveAddress(u8 Copy_SlaveAddress)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	0f 92       	push	r0
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	89 83       	std	Y+1, r24	; 0x01
	TWI_TWAR = Copy_SlaveAddress ;
    1226:	e2 e2       	ldi	r30, 0x22	; 34
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	80 83       	st	Z, r24
}
    122e:	0f 90       	pop	r0
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <M_TWI_Void_SendByte>:

TWI_STATUS M_TWI_Void_SendByte(u8 Copy_DataByte)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	0f 92       	push	r0
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	89 83       	std	Y+1, r24	; 0x01
	/* Send Data to register*/
	TWI_TWDR = Copy_DataByte ;
    1242:	e3 e2       	ldi	r30, 0x23	; 35
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	80 83       	st	Z, r24

	/* Clear interrupt flag To run the start condition and enable the TWEN PIN*/
	TWI_TWCR = (1<< TWCR_TWINT) | (1<< TWCR_TWEN) ;	//(1<< TWCR_TWINT) | (1<< TWCR_TWEN) ;
    124a:	e6 e5       	ldi	r30, 0x56	; 86
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	84 e8       	ldi	r24, 0x84	; 132
    1250:	80 83       	st	Z, r24

	/* Wait till complete TWDR byte transmitted */
	while (!(TWI_TWCR & (1<<TWCR_TWINT)));
    1252:	e6 e5       	ldi	r30, 0x56	; 86
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	88 23       	and	r24, r24
    125a:	dc f7       	brge	.-10     	; 0x1252 <M_TWI_Void_SendByte+0x1c>

	return M_TWI_U8_GetStatus() ;
    125c:	0e 94 87 09 	call	0x130e	; 0x130e <M_TWI_U8_GetStatus>
}
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <M_TWI_Void_RecevieWithACK>:

void M_TWI_Void_RecevieWithACK(u8 *PTR_RecevedData)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <M_TWI_Void_RecevieWithACK+0x6>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
	/* Clear interrupt flag To run the start condition and enable the TWEN PIN*/
	TWI_TWCR |= TWI_RECEIVE_WITH_ACK_MASK ;		//
    1276:	a6 e5       	ldi	r26, 0x56	; 86
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e6 e5       	ldi	r30, 0x56	; 86
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	84 6c       	ori	r24, 0xC4	; 196
    1282:	8c 93       	st	X, r24

	/* Wait till complete TWDR byte transmitted */
	while (!(TWI_TWCR & (1<<TWCR_TWINT)));
    1284:	e6 e5       	ldi	r30, 0x56	; 86
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	88 23       	and	r24, r24
    128c:	dc f7       	brge	.-10     	; 0x1284 <M_TWI_Void_RecevieWithACK+0x1c>

//	Save the Received data
	*PTR_RecevedData = TWI_TWDR ;
    128e:	e3 e2       	ldi	r30, 0x23	; 35
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	e9 81       	ldd	r30, Y+1	; 0x01
    1296:	fa 81       	ldd	r31, Y+2	; 0x02
    1298:	80 83       	st	Z, r24
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <M_TWI_Void_RecevieWitNACK>:

void M_TWI_Void_RecevieWitNACK(u8 *PTR_RecevedData)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <M_TWI_Void_RecevieWitNACK+0x6>
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	89 83       	std	Y+1, r24	; 0x01
//	M_Dio_void_setPinValue(DIO_PC0, DIO_HIGH);
	CLR_BIT(TWI_TWCR,TWCR_TWEA);
    12b2:	a6 e5       	ldi	r26, 0x56	; 86
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e6 e5       	ldi	r30, 0x56	; 86
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	8f 7b       	andi	r24, 0xBF	; 191
    12be:	8c 93       	st	X, r24
	/* Clear interrupt flag To run the start condition and enable the TWEN PIN*/
	TWI_TWCR = (1<<TWCR_TWINT) | (1<<TWCR_TWEN);
    12c0:	e6 e5       	ldi	r30, 0x56	; 86
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	84 e8       	ldi	r24, 0x84	; 132
    12c6:	80 83       	st	Z, r24
	/* Wait till complete TWDR byte transmitted */
	while (!(TWI_TWCR & (1<<TWCR_TWINT)));
    12c8:	e6 e5       	ldi	r30, 0x56	; 86
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	88 23       	and	r24, r24
    12d0:	dc f7       	brge	.-10     	; 0x12c8 <M_TWI_Void_RecevieWitNACK+0x24>

//	Save the Received data
	*PTR_RecevedData = TWI_TWDR ;
    12d2:	e3 e2       	ldi	r30, 0x23	; 35
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	80 83       	st	Z, r24
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <M_TWI_Void_GetStatus>:


void M_TWI_Void_GetStatus(u8* status)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <M_TWI_Void_GetStatus+0x6>
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
	*status = (TWI_TWSR & TWI_STATUS_MASK);
    12f6:	e1 e2       	ldi	r30, 0x21	; 33
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	88 7f       	andi	r24, 0xF8	; 248
    12fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1300:	fa 81       	ldd	r31, Y+2	; 0x02
    1302:	80 83       	st	Z, r24
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <M_TWI_U8_GetStatus>:

u8 M_TWI_U8_GetStatus()
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
	return (TWI_TWSR & TWI_STATUS_MASK);
    1316:	e1 e2       	ldi	r30, 0x21	; 33
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	88 7f       	andi	r24, 0xF8	; 248
}
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <M_TWI_Void_SendStopCondition>:


void M_TWI_Void_SendStopCondition()
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
	/* Stop condition */
	TWI_TWCR |= TWI_STOP_MASK ;
    132c:	a6 e5       	ldi	r26, 0x56	; 86
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e6 e5       	ldi	r30, 0x56	; 86
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	84 69       	ori	r24, 0x94	; 148
    1338:	8c 93       	st	X, r24
}
    133a:	cf 91       	pop	r28
    133c:	df 91       	pop	r29
    133e:	08 95       	ret

00001340 <M_TIMER0_Void_Init>:
static u32 NoOfRemaning = 0;
 u32 Counter_NoOverFlow = 0 ;
static u32 Global_NoComparMatch = 0 ;

void M_TIMER0_Void_Init(TIMER0_MODE_TYPE Local_Mode,TIMER0_WG_TYPE Local_WG_Type)
{
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	00 d0       	rcall	.+0      	; 0x1346 <M_TIMER0_Void_Init+0x6>
    1346:	00 d0       	rcall	.+0      	; 0x1348 <M_TIMER0_Void_Init+0x8>
    1348:	00 d0       	rcall	.+0      	; 0x134a <M_TIMER0_Void_Init+0xa>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	6a 83       	std	Y+2, r22	; 0x02

	/*Clear Mode Bits */
	TIMER0_TCCR0 &= TIMER0_CLEAR_MODE_MASK ;
    1352:	a3 e5       	ldi	r26, 0x53	; 83
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e3 e5       	ldi	r30, 0x53	; 83
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	87 7d       	andi	r24, 0xD7	; 215
    135e:	8c 93       	st	X, r24

	/*Check the mode type */
	switch(Local_Mode)
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	3e 83       	std	Y+6, r19	; 0x06
    1368:	2d 83       	std	Y+5, r18	; 0x05
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	91 05       	cpc	r25, r1
    1372:	21 f1       	breq	.+72     	; 0x13bc <M_TIMER0_Void_Init+0x7c>
    1374:	2d 81       	ldd	r18, Y+5	; 0x05
    1376:	3e 81       	ldd	r19, Y+6	; 0x06
    1378:	22 30       	cpi	r18, 0x02	; 2
    137a:	31 05       	cpc	r19, r1
    137c:	2c f4       	brge	.+10     	; 0x1388 <M_TIMER0_Void_Init+0x48>
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	61 f0       	breq	.+24     	; 0x139e <M_TIMER0_Void_Init+0x5e>
    1386:	29 c0       	rjmp	.+82     	; 0x13da <M_TIMER0_Void_Init+0x9a>
    1388:	2d 81       	ldd	r18, Y+5	; 0x05
    138a:	3e 81       	ldd	r19, Y+6	; 0x06
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	e9 f0       	breq	.+58     	; 0x13cc <M_TIMER0_Void_Init+0x8c>
    1392:	8d 81       	ldd	r24, Y+5	; 0x05
    1394:	9e 81       	ldd	r25, Y+6	; 0x06
    1396:	83 30       	cpi	r24, 0x03	; 3
    1398:	91 05       	cpc	r25, r1
    139a:	41 f0       	breq	.+16     	; 0x13ac <M_TIMER0_Void_Init+0x6c>
    139c:	1e c0       	rjmp	.+60     	; 0x13da <M_TIMER0_Void_Init+0x9a>
	{
	case NORMAL_MODE:
		TIMER0_TCCR0 |= TIMER0_NORMAL_MODE_MASK ;
    139e:	e3 e5       	ldi	r30, 0x53	; 83
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	a3 e5       	ldi	r26, 0x53	; 83
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	8c 91       	ld	r24, X
    13a8:	80 83       	st	Z, r24
    13aa:	17 c0       	rjmp	.+46     	; 0x13da <M_TIMER0_Void_Init+0x9a>
		break ;
	case PHASE_PWM_MODE:
		TIMER0_TCCR0 |= TIMER0_PWM_PHASE_MODE_MASK ;
    13ac:	a3 e5       	ldi	r26, 0x53	; 83
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e3 e5       	ldi	r30, 0x53	; 83
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	80 64       	ori	r24, 0x40	; 64
    13b8:	8c 93       	st	X, r24
    13ba:	0f c0       	rjmp	.+30     	; 0x13da <M_TIMER0_Void_Init+0x9a>
		break ;
	case CTC_MODE:
		TIMER0_TCCR0 |= TIMER0_CTC_MODE_MASK ;
    13bc:	a3 e5       	ldi	r26, 0x53	; 83
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e3 e5       	ldi	r30, 0x53	; 83
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	88 60       	ori	r24, 0x08	; 8
    13c8:	8c 93       	st	X, r24
    13ca:	07 c0       	rjmp	.+14     	; 0x13da <M_TIMER0_Void_Init+0x9a>
		break ;
	case FAST_PWM_MODE:
		TIMER0_TCCR0 |= TIMER0_PWM_FAST_MASK ;
    13cc:	a3 e5       	ldi	r26, 0x53	; 83
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e3 e5       	ldi	r30, 0x53	; 83
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	88 64       	ori	r24, 0x48	; 72
    13d8:	8c 93       	st	X, r24
		break ;
	}


	/*Check the wave generation signal */
	TIMER0_TCCR0 &= TIMER0_WG_CLEAR_MASK ;
    13da:	a3 e5       	ldi	r26, 0x53	; 83
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e3 e5       	ldi	r30, 0x53	; 83
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	80 72       	andi	r24, 0x20	; 32
    13e6:	8c 93       	st	X, r24

	/* Check Wave Generation*/
	switch(Local_WG_Type)
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	3c 83       	std	Y+4, r19	; 0x04
    13f0:	2b 83       	std	Y+3, r18	; 0x03
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	91 05       	cpc	r25, r1
    13fa:	71 f1       	breq	.+92     	; 0x1458 <M_TIMER0_Void_Init+0x118>
    13fc:	2b 81       	ldd	r18, Y+3	; 0x03
    13fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1400:	23 30       	cpi	r18, 0x03	; 3
    1402:	31 05       	cpc	r19, r1
    1404:	54 f4       	brge	.+20     	; 0x141a <M_TIMER0_Void_Init+0xda>
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	00 97       	sbiw	r24, 0x00	; 0
    140c:	b1 f0       	breq	.+44     	; 0x143a <M_TIMER0_Void_Init+0xfa>
    140e:	2b 81       	ldd	r18, Y+3	; 0x03
    1410:	3c 81       	ldd	r19, Y+4	; 0x04
    1412:	21 30       	cpi	r18, 0x01	; 1
    1414:	31 05       	cpc	r19, r1
    1416:	c1 f0       	breq	.+48     	; 0x1448 <M_TIMER0_Void_Init+0x108>
    1418:	3e c0       	rjmp	.+124    	; 0x1496 <M_TIMER0_Void_Init+0x156>
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	84 30       	cpi	r24, 0x04	; 4
    1420:	91 05       	cpc	r25, r1
    1422:	51 f1       	breq	.+84     	; 0x1478 <M_TIMER0_Void_Init+0x138>
    1424:	2b 81       	ldd	r18, Y+3	; 0x03
    1426:	3c 81       	ldd	r19, Y+4	; 0x04
    1428:	24 30       	cpi	r18, 0x04	; 4
    142a:	31 05       	cpc	r19, r1
    142c:	ec f0       	brlt	.+58     	; 0x1468 <M_TIMER0_Void_Init+0x128>
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	85 30       	cpi	r24, 0x05	; 5
    1434:	91 05       	cpc	r25, r1
    1436:	41 f1       	breq	.+80     	; 0x1488 <M_TIMER0_Void_Init+0x148>
    1438:	2e c0       	rjmp	.+92     	; 0x1496 <M_TIMER0_Void_Init+0x156>
	{
		case WG_NORMAL_PORT:
			TIMER0_TCCR0 |= TIMER0_WG_NORMAL_MASK ;
    143a:	e3 e5       	ldi	r30, 0x53	; 83
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	a3 e5       	ldi	r26, 0x53	; 83
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	8c 91       	ld	r24, X
    1444:	80 83       	st	Z, r24
    1446:	27 c0       	rjmp	.+78     	; 0x1496 <M_TIMER0_Void_Init+0x156>
			break;

		case WG_TOGGLE_OC0:
			TIMER0_TCCR0 |= TIMER0_WG_TOGGLE_MASK ;
    1448:	a3 e5       	ldi	r26, 0x53	; 83
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e3 e5       	ldi	r30, 0x53	; 83
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	80 61       	ori	r24, 0x10	; 16
    1454:	8c 93       	st	X, r24
    1456:	1f c0       	rjmp	.+62     	; 0x1496 <M_TIMER0_Void_Init+0x156>
			break;

		case WG_CLEAR_OC0:
			TIMER0_TCCR0 |= TIMER0_WG_CLEAR_MASK ;
    1458:	a3 e5       	ldi	r26, 0x53	; 83
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e3 e5       	ldi	r30, 0x53	; 83
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	80 62       	ori	r24, 0x20	; 32
    1464:	8c 93       	st	X, r24
    1466:	17 c0       	rjmp	.+46     	; 0x1496 <M_TIMER0_Void_Init+0x156>
			break;

		case WG_SET_OC0:
			TIMER0_TCCR0 |= TIMER0_WG_SET_MASK;
    1468:	a3 e5       	ldi	r26, 0x53	; 83
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e3 e5       	ldi	r30, 0x53	; 83
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 63       	ori	r24, 0x30	; 48
    1474:	8c 93       	st	X, r24
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <M_TIMER0_Void_Init+0x156>
			break;

		case WG_INVERTING:
			TIMER0_TCCR0 |= TIMER0_WG_INVERTING_MASK;
    1478:	a3 e5       	ldi	r26, 0x53	; 83
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e3 e5       	ldi	r30, 0x53	; 83
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	80 63       	ori	r24, 0x30	; 48
    1484:	8c 93       	st	X, r24
    1486:	07 c0       	rjmp	.+14     	; 0x1496 <M_TIMER0_Void_Init+0x156>
			break;

		case WG_NON_INVERTING:
			TIMER0_TCCR0 |= TIMER0_WG_NON_INVERTING_MASK;
    1488:	a3 e5       	ldi	r26, 0x53	; 83
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e3 e5       	ldi	r30, 0x53	; 83
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	80 62       	ori	r24, 0x20	; 32
    1494:	8c 93       	st	X, r24
			break;
		}
}
    1496:	26 96       	adiw	r28, 0x06	; 6
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <M_TIMER0_Void_Start>:

void M_TIMER0_Void_Start(TIMER0_PRESCALLER_SELECT Local_PrescallerSelect)
{
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	0f 92       	push	r0
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	89 83       	std	Y+1, r24	; 0x01
	/* Clear Prescaller */
	TIMER0_TCCR0 &= TIMER0_CLEAR_PRESCALLER_MASK ;
    14b4:	a3 e5       	ldi	r26, 0x53	; 83
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e3 e5       	ldi	r30, 0x53	; 83
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	88 7f       	andi	r24, 0xF8	; 248
    14c0:	8c 93       	st	X, r24

	/*Set Prescaller */
	TIMER0_TCCR0 |=  Local_PrescallerSelect;
    14c2:	a3 e5       	ldi	r26, 0x53	; 83
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e3 e5       	ldi	r30, 0x53	; 83
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	90 81       	ld	r25, Z
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	89 2b       	or	r24, r25
    14d0:	8c 93       	st	X, r24

}
    14d2:	0f 90       	pop	r0
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <M_TIMER0_Void_Stop>:
void M_TIMER0_Void_Stop()
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62

	TIMER0_TCCR0 |= TIMER0_CLEAR_PRESCALLER_MASK;
    14e2:	a3 e5       	ldi	r26, 0x53	; 83
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e3 e5       	ldi	r30, 0x53	; 83
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	88 6f       	ori	r24, 0xF8	; 248
    14ee:	8c 93       	st	X, r24

}
    14f0:	cf 91       	pop	r28
    14f2:	df 91       	pop	r29
    14f4:	08 95       	ret

000014f6 <M_TIMER0_Void_GetCount>:

u8 M_TIMER0_Void_GetCount(TIMER0_MODE_TYPE Local_Mode)
{
    14f6:	df 93       	push	r29
    14f8:	cf 93       	push	r28
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <M_TIMER0_Void_GetCount+0x6>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_ReturnCount  ;

	if (Local_Mode == NORMAL_MODE)
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	88 23       	and	r24, r24
    1506:	99 f4       	brne	.+38     	; 0x152e <M_TIMER0_Void_GetCount+0x38>
	{
	Local_ReturnCount = (256 * Counter_NoOverFlow) + TIMER0_TCNT0;
    1508:	80 91 c0 05 	lds	r24, 0x05C0
    150c:	90 91 c1 05 	lds	r25, 0x05C1
    1510:	a0 91 c2 05 	lds	r26, 0x05C2
    1514:	b0 91 c3 05 	lds	r27, 0x05C3
    1518:	ba 2f       	mov	r27, r26
    151a:	a9 2f       	mov	r26, r25
    151c:	98 2f       	mov	r25, r24
    151e:	88 27       	eor	r24, r24
    1520:	98 2f       	mov	r25, r24
    1522:	e2 e5       	ldi	r30, 0x52	; 82
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	89 0f       	add	r24, r25
    152a:	89 83       	std	Y+1, r24	; 0x01
    152c:	16 c0       	rjmp	.+44     	; 0x155a <M_TIMER0_Void_GetCount+0x64>
	}
	else if (Local_Mode == CTC_MODE)
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	99 f4       	brne	.+38     	; 0x155a <M_TIMER0_Void_GetCount+0x64>
	{
		Local_ReturnCount = 255 * Global_NoComparMatch;
    1534:	80 91 c4 05 	lds	r24, 0x05C4
    1538:	90 91 c5 05 	lds	r25, 0x05C5
    153c:	a0 91 c6 05 	lds	r26, 0x05C6
    1540:	b0 91 c7 05 	lds	r27, 0x05C7
    1544:	2f ef       	ldi	r18, 0xFF	; 255
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 6c 45 	call	0x8ad8	; 0x8ad8 <__mulsi3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_ReturnCount ;
    155a:	89 81       	ldd	r24, Y+1	; 0x01
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <M_TIMER0_setDelayTimeMilliSec>:


void M_TIMER0_setDelayTimeMilliSec(u32 Local_DelayTime, TIMER0_MODE_TYPE Local_Mode, TIMER0_PRESCALLER_SELECT Local_Prescaller)
{
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	af 97       	sbiw	r28, 0x2f	; 47
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	6d a3       	std	Y+37, r22	; 0x25
    157c:	7e a3       	std	Y+38, r23	; 0x26
    157e:	8f a3       	std	Y+39, r24	; 0x27
    1580:	98 a7       	std	Y+40, r25	; 0x28
    1582:	49 a7       	std	Y+41, r20	; 0x29
    1584:	2a a7       	std	Y+42, r18	; 0x2a
	M_TIMER0_Void_Start(Local_Prescaller);
    1586:	8a a5       	ldd	r24, Y+42	; 0x2a
    1588:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <M_TIMER0_Void_Start>
	u32 Local_Prescaller_Arr[5] = {1,8,64,256,1024};
    158c:	ce 01       	movw	r24, r28
    158e:	41 96       	adiw	r24, 0x11	; 17
    1590:	9c a7       	std	Y+44, r25	; 0x2c
    1592:	8b a7       	std	Y+43, r24	; 0x2b
    1594:	e7 e1       	ldi	r30, 0x17	; 23
    1596:	f5 e0       	ldi	r31, 0x05	; 5
    1598:	fe a7       	std	Y+46, r31	; 0x2e
    159a:	ed a7       	std	Y+45, r30	; 0x2d
    159c:	f4 e1       	ldi	r31, 0x14	; 20
    159e:	ff a7       	std	Y+47, r31	; 0x2f
    15a0:	ed a5       	ldd	r30, Y+45	; 0x2d
    15a2:	fe a5       	ldd	r31, Y+46	; 0x2e
    15a4:	00 80       	ld	r0, Z
    15a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    15a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	9e a7       	std	Y+46, r25	; 0x2e
    15ae:	8d a7       	std	Y+45, r24	; 0x2d
    15b0:	eb a5       	ldd	r30, Y+43	; 0x2b
    15b2:	fc a5       	ldd	r31, Y+44	; 0x2c
    15b4:	00 82       	st	Z, r0
    15b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    15b8:	9c a5       	ldd	r25, Y+44	; 0x2c
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	9c a7       	std	Y+44, r25	; 0x2c
    15be:	8b a7       	std	Y+43, r24	; 0x2b
    15c0:	9f a5       	ldd	r25, Y+47	; 0x2f
    15c2:	91 50       	subi	r25, 0x01	; 1
    15c4:	9f a7       	std	Y+47, r25	; 0x2f
    15c6:	ef a5       	ldd	r30, Y+47	; 0x2f
    15c8:	ee 23       	and	r30, r30
    15ca:	51 f7       	brne	.-44     	; 0x15a0 <M_TIMER0_setDelayTimeMilliSec+0x3a>

	f32 TickTime = (f32)Local_Prescaller_Arr[Local_Prescaller-1]/ F_CPU ;
    15cc:	8a a5       	ldd	r24, Y+42	; 0x2a
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	9c 01       	movw	r18, r24
    15d6:	22 0f       	add	r18, r18
    15d8:	33 1f       	adc	r19, r19
    15da:	22 0f       	add	r18, r18
    15dc:	33 1f       	adc	r19, r19
    15de:	ce 01       	movw	r24, r28
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	82 0f       	add	r24, r18
    15e4:	93 1f       	adc	r25, r19
    15e6:	fc 01       	movw	r30, r24
    15e8:	70 96       	adiw	r30, 0x10	; 16
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	a2 81       	ldd	r26, Z+2	; 0x02
    15f0:	b3 81       	ldd	r27, Z+3	; 0x03
    15f2:	bc 01       	movw	r22, r24
    15f4:	cd 01       	movw	r24, r26
    15f6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	34 e2       	ldi	r19, 0x24	; 36
    1606:	44 e7       	ldi	r20, 0x74	; 116
    1608:	5b e4       	ldi	r21, 0x4B	; 75
    160a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	8d 87       	std	Y+13, r24	; 0x0d
    1614:	9e 87       	std	Y+14, r25	; 0x0e
    1616:	af 87       	std	Y+15, r26	; 0x0f
    1618:	b8 8b       	std	Y+16, r27	; 0x10
	u32 DesiredTickS = 0;
    161a:	19 86       	std	Y+9, r1	; 0x09
    161c:	1a 86       	std	Y+10, r1	; 0x0a
    161e:	1b 86       	std	Y+11, r1	; 0x0b
    1620:	1c 86       	std	Y+12, r1	; 0x0c
	u32 CTC_Value = 0 ;
    1622:	1d 82       	std	Y+5, r1	; 0x05
    1624:	1e 82       	std	Y+6, r1	; 0x06
    1626:	1f 82       	std	Y+7, r1	; 0x07
    1628:	18 86       	std	Y+8, r1	; 0x08



	/* Calculate the desired Tick*/
	 DesiredTickS = (f32)Local_DelayTime / TickTime ;
    162a:	6d a1       	ldd	r22, Y+37	; 0x25
    162c:	7e a1       	ldd	r23, Y+38	; 0x26
    162e:	8f a1       	ldd	r24, Y+39	; 0x27
    1630:	98 a5       	ldd	r25, Y+40	; 0x28
    1632:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	bc 01       	movw	r22, r24
    163c:	cd 01       	movw	r24, r26
    163e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1640:	3e 85       	ldd	r19, Y+14	; 0x0e
    1642:	4f 85       	ldd	r20, Y+15	; 0x0f
    1644:	58 89       	ldd	r21, Y+16	; 0x10
    1646:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	89 87       	std	Y+9, r24	; 0x09
    165c:	9a 87       	std	Y+10, r25	; 0x0a
    165e:	ab 87       	std	Y+11, r26	; 0x0b
    1660:	bc 87       	std	Y+12, r27	; 0x0c

	if(Local_Mode == NORMAL_MODE)
    1662:	89 a5       	ldd	r24, Y+41	; 0x29
    1664:	88 23       	and	r24, r24
    1666:	09 f0       	breq	.+2      	; 0x166a <M_TIMER0_setDelayTimeMilliSec+0x104>
    1668:	51 c0       	rjmp	.+162    	; 0x170c <M_TIMER0_setDelayTimeMilliSec+0x1a6>
	{
		 /*Store the numbers of over flow */
			 NoOfOverFlow = ( DesiredTickS/ 256 ) / 2  ;
    166a:	89 85       	ldd	r24, Y+9	; 0x09
    166c:	9a 85       	ldd	r25, Y+10	; 0x0a
    166e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1670:	bc 85       	ldd	r27, Y+12	; 0x0c
    1672:	07 2e       	mov	r0, r23
    1674:	79 e0       	ldi	r23, 0x09	; 9
    1676:	b6 95       	lsr	r27
    1678:	a7 95       	ror	r26
    167a:	97 95       	ror	r25
    167c:	87 95       	ror	r24
    167e:	7a 95       	dec	r23
    1680:	d1 f7       	brne	.-12     	; 0x1676 <M_TIMER0_setDelayTimeMilliSec+0x110>
    1682:	70 2d       	mov	r23, r0
    1684:	80 93 b8 05 	sts	0x05B8, r24
    1688:	90 93 b9 05 	sts	0x05B9, r25
    168c:	a0 93 ba 05 	sts	0x05BA, r26
    1690:	b0 93 bb 05 	sts	0x05BB, r27

		 /* Store the Number of remaining if found */
		 NoOfRemaning = DesiredTickS % 256;
    1694:	89 85       	ldd	r24, Y+9	; 0x09
    1696:	9a 85       	ldd	r25, Y+10	; 0x0a
    1698:	ab 85       	ldd	r26, Y+11	; 0x0b
    169a:	bc 85       	ldd	r27, Y+12	; 0x0c
    169c:	90 70       	andi	r25, 0x00	; 0
    169e:	a0 70       	andi	r26, 0x00	; 0
    16a0:	b0 70       	andi	r27, 0x00	; 0
    16a2:	80 93 bc 05 	sts	0x05BC, r24
    16a6:	90 93 bd 05 	sts	0x05BD, r25
    16aa:	a0 93 be 05 	sts	0x05BE, r26
    16ae:	b0 93 bf 05 	sts	0x05BF, r27

		 /*if there is remaining then start from it */
		 if(NoOfRemaning != 0)
    16b2:	80 91 bc 05 	lds	r24, 0x05BC
    16b6:	90 91 bd 05 	lds	r25, 0x05BD
    16ba:	a0 91 be 05 	lds	r26, 0x05BE
    16be:	b0 91 bf 05 	lds	r27, 0x05BF
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	a1 05       	cpc	r26, r1
    16c6:	b1 05       	cpc	r27, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <M_TIMER0_setDelayTimeMilliSec+0x166>
    16ca:	64 c0       	rjmp	.+200    	; 0x1794 <M_TIMER0_setDelayTimeMilliSec+0x22e>
		 {
			 TIMER0_TCNT0 = 256 - NoOfRemaning ;
    16cc:	e2 e5       	ldi	r30, 0x52	; 82
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 91 bc 05 	lds	r24, 0x05BC
    16d4:	90 91 bd 05 	lds	r25, 0x05BD
    16d8:	a0 91 be 05 	lds	r26, 0x05BE
    16dc:	b0 91 bf 05 	lds	r27, 0x05BF
    16e0:	81 95       	neg	r24
    16e2:	80 83       	st	Z, r24
			 NoOfOverFlow++ ;
    16e4:	80 91 b8 05 	lds	r24, 0x05B8
    16e8:	90 91 b9 05 	lds	r25, 0x05B9
    16ec:	a0 91 ba 05 	lds	r26, 0x05BA
    16f0:	b0 91 bb 05 	lds	r27, 0x05BB
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	a1 1d       	adc	r26, r1
    16f8:	b1 1d       	adc	r27, r1
    16fa:	80 93 b8 05 	sts	0x05B8, r24
    16fe:	90 93 b9 05 	sts	0x05B9, r25
    1702:	a0 93 ba 05 	sts	0x05BA, r26
    1706:	b0 93 bb 05 	sts	0x05BB, r27
    170a:	44 c0       	rjmp	.+136    	; 0x1794 <M_TIMER0_setDelayTimeMilliSec+0x22e>

		 }
	}
	else if(Local_Mode == CTC_MODE)
    170c:	89 a5       	ldd	r24, Y+41	; 0x29
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	09 f0       	breq	.+2      	; 0x1714 <M_TIMER0_setDelayTimeMilliSec+0x1ae>
    1712:	40 c0       	rjmp	.+128    	; 0x1794 <M_TIMER0_setDelayTimeMilliSec+0x22e>
	{
		CTC_Value = 255 ;
    1714:	8f ef       	ldi	r24, 0xFF	; 255
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a0 e0       	ldi	r26, 0x00	; 0
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	8d 83       	std	Y+5, r24	; 0x05
    171e:	9e 83       	std	Y+6, r25	; 0x06
    1720:	af 83       	std	Y+7, r26	; 0x07
    1722:	b8 87       	std	Y+8, r27	; 0x08
		u32 NoOfCompMatch = 0;
    1724:	19 82       	std	Y+1, r1	; 0x01
    1726:	1a 82       	std	Y+2, r1	; 0x02
    1728:	1b 82       	std	Y+3, r1	; 0x03
    172a:	1c 82       	std	Y+4, r1	; 0x04
    172c:	0b c0       	rjmp	.+22     	; 0x1744 <M_TIMER0_setDelayTimeMilliSec+0x1de>

		while(DesiredTickS % CTC_Value)
		{
			CTC_Value -- ;
    172e:	8d 81       	ldd	r24, Y+5	; 0x05
    1730:	9e 81       	ldd	r25, Y+6	; 0x06
    1732:	af 81       	ldd	r26, Y+7	; 0x07
    1734:	b8 85       	ldd	r27, Y+8	; 0x08
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	a1 09       	sbc	r26, r1
    173a:	b1 09       	sbc	r27, r1
    173c:	8d 83       	std	Y+5, r24	; 0x05
    173e:	9e 83       	std	Y+6, r25	; 0x06
    1740:	af 83       	std	Y+7, r26	; 0x07
    1742:	b8 87       	std	Y+8, r27	; 0x08
	else if(Local_Mode == CTC_MODE)
	{
		CTC_Value = 255 ;
		u32 NoOfCompMatch = 0;

		while(DesiredTickS % CTC_Value)
    1744:	89 85       	ldd	r24, Y+9	; 0x09
    1746:	9a 85       	ldd	r25, Y+10	; 0x0a
    1748:	ab 85       	ldd	r26, Y+11	; 0x0b
    174a:	bc 85       	ldd	r27, Y+12	; 0x0c
    174c:	2d 81       	ldd	r18, Y+5	; 0x05
    174e:	3e 81       	ldd	r19, Y+6	; 0x06
    1750:	4f 81       	ldd	r20, Y+7	; 0x07
    1752:	58 85       	ldd	r21, Y+8	; 0x08
    1754:	bc 01       	movw	r22, r24
    1756:	cd 01       	movw	r24, r26
    1758:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <__udivmodsi4>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	a1 05       	cpc	r26, r1
    1764:	b1 05       	cpc	r27, r1
    1766:	19 f7       	brne	.-58     	; 0x172e <M_TIMER0_setDelayTimeMilliSec+0x1c8>
		{
			CTC_Value -- ;
		}
		NoOfCompMatch = DesiredTickS % CTC_Value ;
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	ab 85       	ldd	r26, Y+11	; 0x0b
    176e:	bc 85       	ldd	r27, Y+12	; 0x0c
    1770:	2d 81       	ldd	r18, Y+5	; 0x05
    1772:	3e 81       	ldd	r19, Y+6	; 0x06
    1774:	4f 81       	ldd	r20, Y+7	; 0x07
    1776:	58 85       	ldd	r21, Y+8	; 0x08
    1778:	bc 01       	movw	r22, r24
    177a:	cd 01       	movw	r24, r26
    177c:	0e 94 97 45 	call	0x8b2e	; 0x8b2e <__udivmodsi4>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	89 83       	std	Y+1, r24	; 0x01
    1786:	9a 83       	std	Y+2, r25	; 0x02
    1788:	ab 83       	std	Y+3, r26	; 0x03
    178a:	bc 83       	std	Y+4, r27	; 0x04
		TIMER0_OCR0 = NoOfCompMatch;
    178c:	ec e5       	ldi	r30, 0x5C	; 92
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	80 83       	st	Z, r24
	}
	else if(Local_Mode == FAST_PWM_MODE)
	{

	}
}
    1794:	af 96       	adiw	r28, 0x2f	; 47
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	cf 91       	pop	r28
    17a2:	df 91       	pop	r29
    17a4:	08 95       	ret

000017a6 <M_TIMER0_EnableInt>:


void M_TIMER0_EnableInt(TIMER0_INTERRUPT_TYPE Local_InterruptType)
{
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	0f 92       	push	r0
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	89 83       	std	Y+1, r24	; 0x01
	if (Local_InterruptType == COMPARE_MATCH)
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	88 23       	and	r24, r24
    17b6:	41 f4       	brne	.+16     	; 0x17c8 <M_TIMER0_EnableInt+0x22>
	{
		SET_BIT(TIMER0_TIMSK, TIMSK_OCIE0);
    17b8:	a9 e5       	ldi	r26, 0x59	; 89
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e9 e5       	ldi	r30, 0x59	; 89
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	82 60       	ori	r24, 0x02	; 2
    17c4:	8c 93       	st	X, r24
    17c6:	0a c0       	rjmp	.+20     	; 0x17dc <M_TIMER0_EnableInt+0x36>
	}
	else if (Local_InterruptType == OVRER_FLOW)
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	39 f4       	brne	.+14     	; 0x17dc <M_TIMER0_EnableInt+0x36>
	{
		SET_BIT(TIMER0_TIMSK, TIMSK_TOIE0);
    17ce:	a9 e5       	ldi	r26, 0x59	; 89
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e9 e5       	ldi	r30, 0x59	; 89
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	81 60       	ori	r24, 0x01	; 1
    17da:	8c 93       	st	X, r24
	else
	{
		/* No Interrupt in PWM Modes */
	}

}
    17dc:	0f 90       	pop	r0
    17de:	cf 91       	pop	r28
    17e0:	df 91       	pop	r29
    17e2:	08 95       	ret

000017e4 <M_TIMER0_DisableInt>:

void M_TIMER0_DisableInt()
{
    17e4:	df 93       	push	r29
    17e6:	cf 93       	push	r28
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMER0_TIMSK, TIMSK_OCIE0);
    17ec:	a9 e5       	ldi	r26, 0x59	; 89
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e9 e5       	ldi	r30, 0x59	; 89
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8d 7f       	andi	r24, 0xFD	; 253
    17f8:	8c 93       	st	X, r24
	CLR_BIT(TIMER0_TIMSK, TIMSK_TOIE0);
    17fa:	a9 e5       	ldi	r26, 0x59	; 89
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e9 e5       	ldi	r30, 0x59	; 89
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	8e 7f       	andi	r24, 0xFE	; 254
    1806:	8c 93       	st	X, r24
}
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <M_TIMER0_setCallBack>:

void M_TIMER0_setCallBack(TIMER0_INTERRUPT_TYPE Local_InterruptType ,void(*Local_CallBackFunc)(void))
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <M_TIMER0_setCallBack+0x6>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <M_TIMER0_setCallBack+0x8>
    1816:	0f 92       	push	r0
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	7b 83       	std	Y+3, r23	; 0x03
    1820:	6a 83       	std	Y+2, r22	; 0x02


	if (Local_CallBackFunc != NULL)
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	9b 81       	ldd	r25, Y+3	; 0x03
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	d9 f0       	breq	.+54     	; 0x1860 <M_TIMER0_setCallBack+0x52>
	{
		switch(Local_InterruptType)
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	3d 83       	std	Y+5, r19	; 0x05
    1832:	2c 83       	std	Y+4, r18	; 0x04
    1834:	8c 81       	ldd	r24, Y+4	; 0x04
    1836:	9d 81       	ldd	r25, Y+5	; 0x05
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	61 f0       	breq	.+24     	; 0x1854 <M_TIMER0_setCallBack+0x46>
    183c:	2c 81       	ldd	r18, Y+4	; 0x04
    183e:	3d 81       	ldd	r19, Y+5	; 0x05
    1840:	21 30       	cpi	r18, 0x01	; 1
    1842:	31 05       	cpc	r19, r1
    1844:	69 f4       	brne	.+26     	; 0x1860 <M_TIMER0_setCallBack+0x52>
		{
		case OVRER_FLOW:

			Timer0CallBackFunc[0] = Local_CallBackFunc ;
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	9b 81       	ldd	r25, Y+3	; 0x03
    184a:	90 93 b5 05 	sts	0x05B5, r25
    184e:	80 93 b4 05 	sts	0x05B4, r24
    1852:	06 c0       	rjmp	.+12     	; 0x1860 <M_TIMER0_setCallBack+0x52>
			break;

		case COMPARE_MATCH:
			Timer0CallBackFunc[1] = Local_CallBackFunc ;
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	9b 81       	ldd	r25, Y+3	; 0x03
    1858:	90 93 b7 05 	sts	0x05B7, r25
    185c:	80 93 b6 05 	sts	0x05B6, r24
			break;
		}
	}
}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	cf 91       	pop	r28
    186c:	df 91       	pop	r29
    186e:	08 95       	ret

00001870 <__vector_11>:
u16 Cont = 0 ;

ISR(TIMER0_OVF_vect)
{
    1870:	1f 92       	push	r1
    1872:	0f 92       	push	r0
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	0f 92       	push	r0
    1878:	11 24       	eor	r1, r1
    187a:	2f 93       	push	r18
    187c:	3f 93       	push	r19
    187e:	4f 93       	push	r20
    1880:	5f 93       	push	r21
    1882:	6f 93       	push	r22
    1884:	7f 93       	push	r23
    1886:	8f 93       	push	r24
    1888:	9f 93       	push	r25
    188a:	af 93       	push	r26
    188c:	bf 93       	push	r27
    188e:	ef 93       	push	r30
    1890:	ff 93       	push	r31
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
	Counter_NoOverFlow++ ;
    189a:	80 91 c0 05 	lds	r24, 0x05C0
    189e:	90 91 c1 05 	lds	r25, 0x05C1
    18a2:	a0 91 c2 05 	lds	r26, 0x05C2
    18a6:	b0 91 c3 05 	lds	r27, 0x05C3
    18aa:	01 96       	adiw	r24, 0x01	; 1
    18ac:	a1 1d       	adc	r26, r1
    18ae:	b1 1d       	adc	r27, r1
    18b0:	80 93 c0 05 	sts	0x05C0, r24
    18b4:	90 93 c1 05 	sts	0x05C1, r25
    18b8:	a0 93 c2 05 	sts	0x05C2, r26
    18bc:	b0 93 c3 05 	sts	0x05C3, r27



	if (Counter_NoOverFlow == NoOfOverFlow)
    18c0:	20 91 c0 05 	lds	r18, 0x05C0
    18c4:	30 91 c1 05 	lds	r19, 0x05C1
    18c8:	40 91 c2 05 	lds	r20, 0x05C2
    18cc:	50 91 c3 05 	lds	r21, 0x05C3
    18d0:	80 91 b8 05 	lds	r24, 0x05B8
    18d4:	90 91 b9 05 	lds	r25, 0x05B9
    18d8:	a0 91 ba 05 	lds	r26, 0x05BA
    18dc:	b0 91 bb 05 	lds	r27, 0x05BB
    18e0:	28 17       	cp	r18, r24
    18e2:	39 07       	cpc	r19, r25
    18e4:	4a 07       	cpc	r20, r26
    18e6:	5b 07       	cpc	r21, r27
    18e8:	c9 f4       	brne	.+50     	; 0x191c <__vector_11+0xac>
	{
		Timer0CallBackFunc[0]();
    18ea:	e0 91 b4 05 	lds	r30, 0x05B4
    18ee:	f0 91 b5 05 	lds	r31, 0x05B5
    18f2:	09 95       	icall
		Counter_NoOverFlow = 0 ;
    18f4:	10 92 c0 05 	sts	0x05C0, r1
    18f8:	10 92 c1 05 	sts	0x05C1, r1
    18fc:	10 92 c2 05 	sts	0x05C2, r1
    1900:	10 92 c3 05 	sts	0x05C3, r1
		TIMER0_TCNT0 = 256 - NoOfRemaning ;
    1904:	e2 e5       	ldi	r30, 0x52	; 82
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 91 bc 05 	lds	r24, 0x05BC
    190c:	90 91 bd 05 	lds	r25, 0x05BD
    1910:	a0 91 be 05 	lds	r26, 0x05BE
    1914:	b0 91 bf 05 	lds	r27, 0x05BF
    1918:	81 95       	neg	r24
    191a:	80 83       	st	Z, r24

	}

}
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	ff 91       	pop	r31
    1922:	ef 91       	pop	r30
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <Port_Init>:
  parameters (in)  :
  parameters (out) : none
  Return Value     : void
******************************************/
void Port_Init(const Port_ConfigType * ConfigPtr)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	2b 97       	sbiw	r28, 0x0b	; 11
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	9d 83       	std	Y+5, r25	; 0x05
    1958:	8c 83       	std	Y+4, r24	; 0x04

	if(ConfigPtr == NULL)
    195a:	8c 81       	ldd	r24, Y+4	; 0x04
    195c:	9d 81       	ldd	r25, Y+5	; 0x05
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	09 f4       	brne	.+2      	; 0x1964 <Port_Init+0x22>
    1962:	51 c2       	rjmp	.+1186   	; 0x1e06 <Port_Init+0x4c4>
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1964:	1b 82       	std	Y+3, r1	; 0x03
    1966:	4b c2       	rjmp	.+1174   	; 0x1dfe <Port_Init+0x4bc>
			{
				Local_pin =(ConfigPtr[i].Port_PinNumber)%10 ;
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	88 2f       	mov	r24, r24
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	9c 01       	movw	r18, r24
    1970:	22 0f       	add	r18, r18
    1972:	33 1f       	adc	r19, r19
    1974:	22 0f       	add	r18, r18
    1976:	33 1f       	adc	r19, r19
    1978:	8c 81       	ldd	r24, Y+4	; 0x04
    197a:	9d 81       	ldd	r25, Y+5	; 0x05
    197c:	fc 01       	movw	r30, r24
    197e:	e2 0f       	add	r30, r18
    1980:	f3 1f       	adc	r31, r19
    1982:	80 81       	ld	r24, Z
    1984:	9a e0       	ldi	r25, 0x0A	; 10
    1986:	69 2f       	mov	r22, r25
    1988:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodqi4>
    198c:	89 2f       	mov	r24, r25
    198e:	8a 83       	std	Y+2, r24	; 0x02
				Local_port =(ConfigPtr[i].Port_PinNumber)/10 ;
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9c 01       	movw	r18, r24
    1998:	22 0f       	add	r18, r18
    199a:	33 1f       	adc	r19, r19
    199c:	22 0f       	add	r18, r18
    199e:	33 1f       	adc	r19, r19
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	9d 81       	ldd	r25, Y+5	; 0x05
    19a4:	fc 01       	movw	r30, r24
    19a6:	e2 0f       	add	r30, r18
    19a8:	f3 1f       	adc	r31, r19
    19aa:	80 81       	ld	r24, Z
    19ac:	9a e0       	ldi	r25, 0x0A	; 10
    19ae:	69 2f       	mov	r22, r25
    19b0:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodqi4>
    19b4:	89 83       	std	Y+1, r24	; 0x01
				// step1 : set direction
				if(ConfigPtr[i].Port_PinDirection == PORT_PINDIR_INPUT || ConfigPtr[i].Port_PinDirection ==PORT_PINDIR_OUTPUT)
    19b6:	8b 81       	ldd	r24, Y+3	; 0x03
    19b8:	88 2f       	mov	r24, r24
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	9c 01       	movw	r18, r24
    19be:	22 0f       	add	r18, r18
    19c0:	33 1f       	adc	r19, r19
    19c2:	22 0f       	add	r18, r18
    19c4:	33 1f       	adc	r19, r19
    19c6:	8c 81       	ldd	r24, Y+4	; 0x04
    19c8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ca:	fc 01       	movw	r30, r24
    19cc:	e2 0f       	add	r30, r18
    19ce:	f3 1f       	adc	r31, r19
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	88 23       	and	r24, r24
    19d4:	89 f0       	breq	.+34     	; 0x19f8 <Port_Init+0xb6>
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	88 2f       	mov	r24, r24
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9c 01       	movw	r18, r24
    19de:	22 0f       	add	r18, r18
    19e0:	33 1f       	adc	r19, r19
    19e2:	22 0f       	add	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ea:	fc 01       	movw	r30, r24
    19ec:	e2 0f       	add	r30, r18
    19ee:	f3 1f       	adc	r31, r19
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	81 30       	cpi	r24, 0x01	; 1
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <Port_Init+0xb6>
    19f6:	00 c2       	rjmp	.+1024   	; 0x1df8 <Port_Init+0x4b6>
				{
					switch(Local_port)
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	3b 87       	std	Y+11, r19	; 0x0b
    1a00:	2a 87       	std	Y+10, r18	; 0x0a
    1a02:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a04:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a06:	62 30       	cpi	r22, 0x02	; 2
    1a08:	71 05       	cpc	r23, r1
    1a0a:	d1 f1       	breq	.+116    	; 0x1a80 <Port_Init+0x13e>
    1a0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a10:	83 30       	cpi	r24, 0x03	; 3
    1a12:	91 05       	cpc	r25, r1
    1a14:	34 f4       	brge	.+12     	; 0x1a22 <Port_Init+0xe0>
    1a16:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a18:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a1a:	21 30       	cpi	r18, 0x01	; 1
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	71 f0       	breq	.+28     	; 0x1a3c <Port_Init+0xfa>
    1a20:	94 c0       	rjmp	.+296    	; 0x1b4a <Port_Init+0x208>
    1a22:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a24:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a26:	63 30       	cpi	r22, 0x03	; 3
    1a28:	71 05       	cpc	r23, r1
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <Port_Init+0xec>
    1a2c:	4b c0       	rjmp	.+150    	; 0x1ac4 <Port_Init+0x182>
    1a2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a32:	84 30       	cpi	r24, 0x04	; 4
    1a34:	91 05       	cpc	r25, r1
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <Port_Init+0xf8>
    1a38:	67 c0       	rjmp	.+206    	; 0x1b08 <Port_Init+0x1c6>
    1a3a:	87 c0       	rjmp	.+270    	; 0x1b4a <Port_Init+0x208>
					{
					case PORT_PORTA:DDRA_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1a3c:	aa e3       	ldi	r26, 0x3A	; 58
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	ea e3       	ldi	r30, 0x3A	; 58
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	40 81       	ld	r20, Z
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	88 2f       	mov	r24, r24
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 01       	movw	r18, r24
    1a4e:	22 0f       	add	r18, r18
    1a50:	33 1f       	adc	r19, r19
    1a52:	22 0f       	add	r18, r18
    1a54:	33 1f       	adc	r19, r19
    1a56:	8c 81       	ldd	r24, Y+4	; 0x04
    1a58:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	e2 0f       	add	r30, r18
    1a5e:	f3 1f       	adc	r31, r19
    1a60:	82 81       	ldd	r24, Z+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	b9 01       	movw	r22, r18
    1a6e:	02 c0       	rjmp	.+4      	; 0x1a74 <Port_Init+0x132>
    1a70:	66 0f       	add	r22, r22
    1a72:	77 1f       	adc	r23, r23
    1a74:	8a 95       	dec	r24
    1a76:	e2 f7       	brpl	.-8      	; 0x1a70 <Port_Init+0x12e>
    1a78:	cb 01       	movw	r24, r22
    1a7a:	84 2b       	or	r24, r20
    1a7c:	8c 93       	st	X, r24
    1a7e:	65 c0       	rjmp	.+202    	; 0x1b4a <Port_Init+0x208>
					case PORT_PORTB:DDRB_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1a80:	a7 e3       	ldi	r26, 0x37	; 55
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e7 e3       	ldi	r30, 0x37	; 55
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	40 81       	ld	r20, Z
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	9c 01       	movw	r18, r24
    1a92:	22 0f       	add	r18, r18
    1a94:	33 1f       	adc	r19, r19
    1a96:	22 0f       	add	r18, r18
    1a98:	33 1f       	adc	r19, r19
    1a9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	e2 0f       	add	r30, r18
    1aa2:	f3 1f       	adc	r31, r19
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	b9 01       	movw	r22, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <Port_Init+0x176>
    1ab4:	66 0f       	add	r22, r22
    1ab6:	77 1f       	adc	r23, r23
    1ab8:	8a 95       	dec	r24
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <Port_Init+0x172>
    1abc:	cb 01       	movw	r24, r22
    1abe:	84 2b       	or	r24, r20
    1ac0:	8c 93       	st	X, r24
    1ac2:	43 c0       	rjmp	.+134    	; 0x1b4a <Port_Init+0x208>
					case PORT_PORTC:DDRC_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1ac4:	a4 e3       	ldi	r26, 0x34	; 52
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e4 e3       	ldi	r30, 0x34	; 52
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	40 81       	ld	r20, Z
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	88 2f       	mov	r24, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	9c 01       	movw	r18, r24
    1ad6:	22 0f       	add	r18, r18
    1ad8:	33 1f       	adc	r19, r19
    1ada:	22 0f       	add	r18, r18
    1adc:	33 1f       	adc	r19, r19
    1ade:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	e2 0f       	add	r30, r18
    1ae6:	f3 1f       	adc	r31, r19
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	88 2f       	mov	r24, r24
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	b9 01       	movw	r22, r18
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <Port_Init+0x1ba>
    1af8:	66 0f       	add	r22, r22
    1afa:	77 1f       	adc	r23, r23
    1afc:	8a 95       	dec	r24
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <Port_Init+0x1b6>
    1b00:	cb 01       	movw	r24, r22
    1b02:	84 2b       	or	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	21 c0       	rjmp	.+66     	; 0x1b4a <Port_Init+0x208>
					case PORT_PORTD:DDRD_REG|= (u8)(ConfigPtr[i].Port_PinDirection<< Local_pin);break;
    1b08:	a1 e3       	ldi	r26, 0x31	; 49
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e1 e3       	ldi	r30, 0x31	; 49
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	40 81       	ld	r20, Z
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9c 01       	movw	r18, r24
    1b1a:	22 0f       	add	r18, r18
    1b1c:	33 1f       	adc	r19, r19
    1b1e:	22 0f       	add	r18, r18
    1b20:	33 1f       	adc	r19, r19
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	fc 01       	movw	r30, r24
    1b28:	e2 0f       	add	r30, r18
    1b2a:	f3 1f       	adc	r31, r19
    1b2c:	82 81       	ldd	r24, Z+2	; 0x02
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	b9 01       	movw	r22, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <Port_Init+0x1fe>
    1b3c:	66 0f       	add	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	8a 95       	dec	r24
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <Port_Init+0x1fa>
    1b44:	cb 01       	movw	r24, r22
    1b46:	84 2b       	or	r24, r20
    1b48:	8c 93       	st	X, r24

					}
					// step 2 : config initial pin value
					if(ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_LOW || ConfigPtr[i].Port_PinLevelValue == PORT_PIN_LEVEL_HIGH)
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	88 2f       	mov	r24, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9c 01       	movw	r18, r24
    1b52:	22 0f       	add	r18, r18
    1b54:	33 1f       	adc	r19, r19
    1b56:	22 0f       	add	r18, r18
    1b58:	33 1f       	adc	r19, r19
    1b5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5e:	fc 01       	movw	r30, r24
    1b60:	e2 0f       	add	r30, r18
    1b62:	f3 1f       	adc	r31, r19
    1b64:	81 81       	ldd	r24, Z+1	; 0x01
    1b66:	88 23       	and	r24, r24
    1b68:	89 f0       	breq	.+34     	; 0x1b8c <Port_Init+0x24a>
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	88 2f       	mov	r24, r24
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9c 01       	movw	r18, r24
    1b72:	22 0f       	add	r18, r18
    1b74:	33 1f       	adc	r19, r19
    1b76:	22 0f       	add	r18, r18
    1b78:	33 1f       	adc	r19, r19
    1b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e2 0f       	add	r30, r18
    1b82:	f3 1f       	adc	r31, r19
    1b84:	81 81       	ldd	r24, Z+1	; 0x01
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <Port_Init+0x24a>
    1b8a:	36 c1       	rjmp	.+620    	; 0x1df8 <Port_Init+0x4b6>
					{
						switch(Local_port)
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	39 87       	std	Y+9, r19	; 0x09
    1b94:	28 87       	std	Y+8, r18	; 0x08
    1b96:	68 85       	ldd	r22, Y+8	; 0x08
    1b98:	79 85       	ldd	r23, Y+9	; 0x09
    1b9a:	62 30       	cpi	r22, 0x02	; 2
    1b9c:	71 05       	cpc	r23, r1
    1b9e:	d1 f1       	breq	.+116    	; 0x1c14 <Port_Init+0x2d2>
    1ba0:	88 85       	ldd	r24, Y+8	; 0x08
    1ba2:	99 85       	ldd	r25, Y+9	; 0x09
    1ba4:	83 30       	cpi	r24, 0x03	; 3
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	34 f4       	brge	.+12     	; 0x1bb6 <Port_Init+0x274>
    1baa:	28 85       	ldd	r18, Y+8	; 0x08
    1bac:	39 85       	ldd	r19, Y+9	; 0x09
    1bae:	21 30       	cpi	r18, 0x01	; 1
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	71 f0       	breq	.+28     	; 0x1bd0 <Port_Init+0x28e>
    1bb4:	94 c0       	rjmp	.+296    	; 0x1cde <Port_Init+0x39c>
    1bb6:	68 85       	ldd	r22, Y+8	; 0x08
    1bb8:	79 85       	ldd	r23, Y+9	; 0x09
    1bba:	63 30       	cpi	r22, 0x03	; 3
    1bbc:	71 05       	cpc	r23, r1
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <Port_Init+0x280>
    1bc0:	4b c0       	rjmp	.+150    	; 0x1c58 <Port_Init+0x316>
    1bc2:	88 85       	ldd	r24, Y+8	; 0x08
    1bc4:	99 85       	ldd	r25, Y+9	; 0x09
    1bc6:	84 30       	cpi	r24, 0x04	; 4
    1bc8:	91 05       	cpc	r25, r1
    1bca:	09 f4       	brne	.+2      	; 0x1bce <Port_Init+0x28c>
    1bcc:	67 c0       	rjmp	.+206    	; 0x1c9c <Port_Init+0x35a>
    1bce:	87 c0       	rjmp	.+270    	; 0x1cde <Port_Init+0x39c>
						{
						case PORT_PORTA:  PORTA_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1bd0:	ab e3       	ldi	r26, 0x3B	; 59
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	eb e3       	ldi	r30, 0x3B	; 59
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	40 81       	ld	r20, Z
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	88 2f       	mov	r24, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9c 01       	movw	r18, r24
    1be2:	22 0f       	add	r18, r18
    1be4:	33 1f       	adc	r19, r19
    1be6:	22 0f       	add	r18, r18
    1be8:	33 1f       	adc	r19, r19
    1bea:	8c 81       	ldd	r24, Y+4	; 0x04
    1bec:	9d 81       	ldd	r25, Y+5	; 0x05
    1bee:	fc 01       	movw	r30, r24
    1bf0:	e2 0f       	add	r30, r18
    1bf2:	f3 1f       	adc	r31, r19
    1bf4:	81 81       	ldd	r24, Z+1	; 0x01
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	b9 01       	movw	r22, r18
    1c02:	02 c0       	rjmp	.+4      	; 0x1c08 <Port_Init+0x2c6>
    1c04:	66 0f       	add	r22, r22
    1c06:	77 1f       	adc	r23, r23
    1c08:	8a 95       	dec	r24
    1c0a:	e2 f7       	brpl	.-8      	; 0x1c04 <Port_Init+0x2c2>
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	84 2b       	or	r24, r20
    1c10:	8c 93       	st	X, r24
    1c12:	65 c0       	rjmp	.+202    	; 0x1cde <Port_Init+0x39c>
						case PORT_PORTB:  PORTB_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1c14:	a8 e3       	ldi	r26, 0x38	; 56
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e8 e3       	ldi	r30, 0x38	; 56
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	40 81       	ld	r20, Z
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9c 01       	movw	r18, r24
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
    1c2a:	22 0f       	add	r18, r18
    1c2c:	33 1f       	adc	r19, r19
    1c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c30:	9d 81       	ldd	r25, Y+5	; 0x05
    1c32:	fc 01       	movw	r30, r24
    1c34:	e2 0f       	add	r30, r18
    1c36:	f3 1f       	adc	r31, r19
    1c38:	81 81       	ldd	r24, Z+1	; 0x01
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	88 2f       	mov	r24, r24
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	b9 01       	movw	r22, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <Port_Init+0x30a>
    1c48:	66 0f       	add	r22, r22
    1c4a:	77 1f       	adc	r23, r23
    1c4c:	8a 95       	dec	r24
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <Port_Init+0x306>
    1c50:	cb 01       	movw	r24, r22
    1c52:	84 2b       	or	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	43 c0       	rjmp	.+134    	; 0x1cde <Port_Init+0x39c>
						case PORT_PORTC:  PORTC_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1c58:	a5 e3       	ldi	r26, 0x35	; 53
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e5 e3       	ldi	r30, 0x35	; 53
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	40 81       	ld	r20, Z
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9c 01       	movw	r18, r24
    1c6a:	22 0f       	add	r18, r18
    1c6c:	33 1f       	adc	r19, r19
    1c6e:	22 0f       	add	r18, r18
    1c70:	33 1f       	adc	r19, r19
    1c72:	8c 81       	ldd	r24, Y+4	; 0x04
    1c74:	9d 81       	ldd	r25, Y+5	; 0x05
    1c76:	fc 01       	movw	r30, r24
    1c78:	e2 0f       	add	r30, r18
    1c7a:	f3 1f       	adc	r31, r19
    1c7c:	81 81       	ldd	r24, Z+1	; 0x01
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	88 2f       	mov	r24, r24
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	b9 01       	movw	r22, r18
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <Port_Init+0x34e>
    1c8c:	66 0f       	add	r22, r22
    1c8e:	77 1f       	adc	r23, r23
    1c90:	8a 95       	dec	r24
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <Port_Init+0x34a>
    1c94:	cb 01       	movw	r24, r22
    1c96:	84 2b       	or	r24, r20
    1c98:	8c 93       	st	X, r24
    1c9a:	21 c0       	rjmp	.+66     	; 0x1cde <Port_Init+0x39c>
						case PORT_PORTD:  PORTD_REG |= (u8)(ConfigPtr[i].Port_PinLevelValue<< Local_pin);break;
    1c9c:	a2 e3       	ldi	r26, 0x32	; 50
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e2 e3       	ldi	r30, 0x32	; 50
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	40 81       	ld	r20, Z
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	88 2f       	mov	r24, r24
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9c 01       	movw	r18, r24
    1cae:	22 0f       	add	r18, r18
    1cb0:	33 1f       	adc	r19, r19
    1cb2:	22 0f       	add	r18, r18
    1cb4:	33 1f       	adc	r19, r19
    1cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cba:	fc 01       	movw	r30, r24
    1cbc:	e2 0f       	add	r30, r18
    1cbe:	f3 1f       	adc	r31, r19
    1cc0:	81 81       	ldd	r24, Z+1	; 0x01
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	88 2f       	mov	r24, r24
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	b9 01       	movw	r22, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <Port_Init+0x392>
    1cd0:	66 0f       	add	r22, r22
    1cd2:	77 1f       	adc	r23, r23
    1cd4:	8a 95       	dec	r24
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <Port_Init+0x38e>
    1cd8:	cb 01       	movw	r24, r22
    1cda:	84 2b       	or	r24, r20
    1cdc:	8c 93       	st	X, r24

						}
						// step 3 : config Pin Internal Attach
						if(ConfigPtr[i].Port_PinDirection==PORT_PINDIR_OUTPUT && ConfigPtr[i].Port_PinInternalAttach == PORT_PIN_IN_ATTATCH_PULLUP)
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9c 01       	movw	r18, r24
    1ce6:	22 0f       	add	r18, r18
    1ce8:	33 1f       	adc	r19, r19
    1cea:	22 0f       	add	r18, r18
    1cec:	33 1f       	adc	r19, r19
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	e2 0f       	add	r30, r18
    1cf6:	f3 1f       	adc	r31, r19
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <Port_Init+0x3be>
    1cfe:	7c c0       	rjmp	.+248    	; 0x1df8 <Port_Init+0x4b6>
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	88 2f       	mov	r24, r24
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9c 01       	movw	r18, r24
    1d08:	22 0f       	add	r18, r18
    1d0a:	33 1f       	adc	r19, r19
    1d0c:	22 0f       	add	r18, r18
    1d0e:	33 1f       	adc	r19, r19
    1d10:	8c 81       	ldd	r24, Y+4	; 0x04
    1d12:	9d 81       	ldd	r25, Y+5	; 0x05
    1d14:	fc 01       	movw	r30, r24
    1d16:	e2 0f       	add	r30, r18
    1d18:	f3 1f       	adc	r31, r19
    1d1a:	83 81       	ldd	r24, Z+3	; 0x03
    1d1c:	88 23       	and	r24, r24
    1d1e:	09 f0       	breq	.+2      	; 0x1d22 <Port_Init+0x3e0>
    1d20:	6b c0       	rjmp	.+214    	; 0x1df8 <Port_Init+0x4b6>
						{
							switch(Local_port)
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	3f 83       	std	Y+7, r19	; 0x07
    1d2a:	2e 83       	std	Y+6, r18	; 0x06
    1d2c:	6e 81       	ldd	r22, Y+6	; 0x06
    1d2e:	7f 81       	ldd	r23, Y+7	; 0x07
    1d30:	62 30       	cpi	r22, 0x02	; 2
    1d32:	71 05       	cpc	r23, r1
    1d34:	49 f1       	breq	.+82     	; 0x1d88 <Port_Init+0x446>
    1d36:	8e 81       	ldd	r24, Y+6	; 0x06
    1d38:	9f 81       	ldd	r25, Y+7	; 0x07
    1d3a:	83 30       	cpi	r24, 0x03	; 3
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	34 f4       	brge	.+12     	; 0x1d4c <Port_Init+0x40a>
    1d40:	2e 81       	ldd	r18, Y+6	; 0x06
    1d42:	3f 81       	ldd	r19, Y+7	; 0x07
    1d44:	21 30       	cpi	r18, 0x01	; 1
    1d46:	31 05       	cpc	r19, r1
    1d48:	61 f0       	breq	.+24     	; 0x1d62 <Port_Init+0x420>
    1d4a:	56 c0       	rjmp	.+172    	; 0x1df8 <Port_Init+0x4b6>
    1d4c:	6e 81       	ldd	r22, Y+6	; 0x06
    1d4e:	7f 81       	ldd	r23, Y+7	; 0x07
    1d50:	63 30       	cpi	r22, 0x03	; 3
    1d52:	71 05       	cpc	r23, r1
    1d54:	61 f1       	breq	.+88     	; 0x1dae <Port_Init+0x46c>
    1d56:	8e 81       	ldd	r24, Y+6	; 0x06
    1d58:	9f 81       	ldd	r25, Y+7	; 0x07
    1d5a:	84 30       	cpi	r24, 0x04	; 4
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	d1 f1       	breq	.+116    	; 0x1dd4 <Port_Init+0x492>
    1d60:	4b c0       	rjmp	.+150    	; 0x1df8 <Port_Init+0x4b6>
							{
							case PORT_PORTA:PORTA_REG |= (u8)(1<< Local_pin);break;
    1d62:	ab e3       	ldi	r26, 0x3B	; 59
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	eb e3       	ldi	r30, 0x3B	; 59
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	40 81       	ld	r20, Z
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 2e       	mov	r0, r18
    1d78:	02 c0       	rjmp	.+4      	; 0x1d7e <Port_Init+0x43c>
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	0a 94       	dec	r0
    1d80:	e2 f7       	brpl	.-8      	; 0x1d7a <Port_Init+0x438>
    1d82:	84 2b       	or	r24, r20
    1d84:	8c 93       	st	X, r24
    1d86:	38 c0       	rjmp	.+112    	; 0x1df8 <Port_Init+0x4b6>
							case PORT_PORTB:PORTB_REG |= (u8)(1<< Local_pin);break;
    1d88:	a8 e3       	ldi	r26, 0x38	; 56
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e8 e3       	ldi	r30, 0x38	; 56
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	40 81       	ld	r20, Z
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 2e       	mov	r0, r18
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <Port_Init+0x462>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	0a 94       	dec	r0
    1da6:	e2 f7       	brpl	.-8      	; 0x1da0 <Port_Init+0x45e>
    1da8:	84 2b       	or	r24, r20
    1daa:	8c 93       	st	X, r24
    1dac:	25 c0       	rjmp	.+74     	; 0x1df8 <Port_Init+0x4b6>
							case PORT_PORTC:PORTC_REG |= (u8)(1<< Local_pin);break;
    1dae:	a5 e3       	ldi	r26, 0x35	; 53
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e5 e3       	ldi	r30, 0x35	; 53
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	40 81       	ld	r20, Z
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 2e       	mov	r0, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <Port_Init+0x488>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	0a 94       	dec	r0
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <Port_Init+0x484>
    1dce:	84 2b       	or	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	12 c0       	rjmp	.+36     	; 0x1df8 <Port_Init+0x4b6>
							case PORT_PORTD:PORTD_REG |= (u8)(1<< Local_pin);break;
    1dd4:	a2 e3       	ldi	r26, 0x32	; 50
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e2 e3       	ldi	r30, 0x32	; 50
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	40 81       	ld	r20, Z
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	02 2e       	mov	r0, r18
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <Port_Init+0x4ae>
    1dec:	88 0f       	add	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	0a 94       	dec	r0
    1df2:	e2 f7       	brpl	.-8      	; 0x1dec <Port_Init+0x4aa>
    1df4:	84 2b       	or	r24, r20
    1df6:	8c 93       	st	X, r24
		else
		{
			u8 i ;
			u8 Local_pin;
			u8 Local_port;
			for(i= 0;i<PORT_PINS_CONFIG_ARR_SIZE;i++)
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	8f 5f       	subi	r24, 0xFF	; 255
    1dfc:	8b 83       	std	Y+3, r24	; 0x03
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	80 32       	cpi	r24, 0x20	; 32
    1e02:	08 f4       	brcc	.+2      	; 0x1e06 <Port_Init+0x4c4>
    1e04:	b1 cd       	rjmp	.-1182   	; 0x1968 <Port_Init+0x26>
					//report error
				}

		    }//for
		}//else
}
    1e06:	2b 96       	adiw	r28, 0x0b	; 11
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	f8 94       	cli
    1e0c:	de bf       	out	0x3e, r29	; 62
    1e0e:	0f be       	out	0x3f, r0	; 63
    1e10:	cd bf       	out	0x3d, r28	; 61
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <M_GIE_Void_Enable>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GIE_init.h"

void M_GIE_Void_Enable()
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GLI_SREG, SREG_GIE);
    1e20:	af e5       	ldi	r26, 0x5F	; 95
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	ef e5       	ldi	r30, 0x5F	; 95
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 68       	ori	r24, 0x80	; 128
    1e2c:	8c 93       	st	X, r24
}
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <M_GIE_Void_Disable>:
void M_GIE_Void_Disable()
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GLI_SREG, SREG_GIE);
    1e3c:	af e5       	ldi	r26, 0x5F	; 95
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	ef e5       	ldi	r30, 0x5F	; 95
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	8f 77       	andi	r24, 0x7F	; 127
    1e48:	8c 93       	st	X, r24
}
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <M_Dio_en_getPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_LevelType  M_Dio_en_getPinValue(Dio_ChannelType ChannelId)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <M_Dio_en_getPinValue+0x6>
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <M_Dio_en_getPinValue+0x8>
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <M_Dio_en_getPinValue+0xa>
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	8c 83       	std	Y+4, r24	; 0x04
	u8 pin = ChannelId % 10;
    1e60:	8c 81       	ldd	r24, Y+4	; 0x04
    1e62:	9a e0       	ldi	r25, 0x0A	; 10
    1e64:	69 2f       	mov	r22, r25
    1e66:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodqi4>
    1e6a:	89 2f       	mov	r24, r25
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
	u8 port = ChannelId / 10;
    1e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e70:	9a e0       	ldi	r25, 0x0A	; 10
    1e72:	69 2f       	mov	r22, r25
    1e74:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodqi4>
    1e78:	8a 83       	std	Y+2, r24	; 0x02

	Dio_LevelType Local_levelType;
	switch(port)
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	3e 83       	std	Y+6, r19	; 0x06
    1e82:	2d 83       	std	Y+5, r18	; 0x05
    1e84:	4d 81       	ldd	r20, Y+5	; 0x05
    1e86:	5e 81       	ldd	r21, Y+6	; 0x06
    1e88:	42 30       	cpi	r20, 0x02	; 2
    1e8a:	51 05       	cpc	r21, r1
    1e8c:	41 f1       	breq	.+80     	; 0x1ede <M_Dio_en_getPinValue+0x8e>
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	83 30       	cpi	r24, 0x03	; 3
    1e94:	91 05       	cpc	r25, r1
    1e96:	34 f4       	brge	.+12     	; 0x1ea4 <M_Dio_en_getPinValue+0x54>
    1e98:	2d 81       	ldd	r18, Y+5	; 0x05
    1e9a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e9c:	21 30       	cpi	r18, 0x01	; 1
    1e9e:	31 05       	cpc	r19, r1
    1ea0:	61 f0       	breq	.+24     	; 0x1eba <M_Dio_en_getPinValue+0x6a>
    1ea2:	52 c0       	rjmp	.+164    	; 0x1f48 <M_Dio_en_getPinValue+0xf8>
    1ea4:	4d 81       	ldd	r20, Y+5	; 0x05
    1ea6:	5e 81       	ldd	r21, Y+6	; 0x06
    1ea8:	43 30       	cpi	r20, 0x03	; 3
    1eaa:	51 05       	cpc	r21, r1
    1eac:	51 f1       	breq	.+84     	; 0x1f02 <M_Dio_en_getPinValue+0xb2>
    1eae:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb2:	84 30       	cpi	r24, 0x04	; 4
    1eb4:	91 05       	cpc	r25, r1
    1eb6:	b9 f1       	breq	.+110    	; 0x1f26 <M_Dio_en_getPinValue+0xd6>
    1eb8:	47 c0       	rjmp	.+142    	; 0x1f48 <M_Dio_en_getPinValue+0xf8>
	{
	case DIO_PORTA :Local_levelType = GET_BIT( PINA_REG,pin);break;
    1eba:	e9 e3       	ldi	r30, 0x39	; 57
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	88 2f       	mov	r24, r24
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a9 01       	movw	r20, r18
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <M_Dio_en_getPinValue+0x82>
    1ece:	55 95       	asr	r21
    1ed0:	47 95       	ror	r20
    1ed2:	8a 95       	dec	r24
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <M_Dio_en_getPinValue+0x7e>
    1ed6:	ca 01       	movw	r24, r20
    1ed8:	81 70       	andi	r24, 0x01	; 1
    1eda:	89 83       	std	Y+1, r24	; 0x01
    1edc:	35 c0       	rjmp	.+106    	; 0x1f48 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTB :Local_levelType = GET_BIT( PINB_REG,pin);break;
    1ede:	e6 e3       	ldi	r30, 0x36	; 54
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a9 01       	movw	r20, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <M_Dio_en_getPinValue+0xa6>
    1ef2:	55 95       	asr	r21
    1ef4:	47 95       	ror	r20
    1ef6:	8a 95       	dec	r24
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <M_Dio_en_getPinValue+0xa2>
    1efa:	ca 01       	movw	r24, r20
    1efc:	81 70       	andi	r24, 0x01	; 1
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	23 c0       	rjmp	.+70     	; 0x1f48 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTC :Local_levelType = GET_BIT( PINC_REG,pin);break;
    1f02:	e3 e3       	ldi	r30, 0x33	; 51
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a9 01       	movw	r20, r18
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <M_Dio_en_getPinValue+0xca>
    1f16:	55 95       	asr	r21
    1f18:	47 95       	ror	r20
    1f1a:	8a 95       	dec	r24
    1f1c:	e2 f7       	brpl	.-8      	; 0x1f16 <M_Dio_en_getPinValue+0xc6>
    1f1e:	ca 01       	movw	r24, r20
    1f20:	81 70       	andi	r24, 0x01	; 1
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	11 c0       	rjmp	.+34     	; 0x1f48 <M_Dio_en_getPinValue+0xf8>
	case DIO_PORTD :Local_levelType = GET_BIT( PIND_REG,pin);break;
    1f26:	e0 e3       	ldi	r30, 0x30	; 48
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	88 2f       	mov	r24, r24
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a9 01       	movw	r20, r18
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <M_Dio_en_getPinValue+0xee>
    1f3a:	55 95       	asr	r21
    1f3c:	47 95       	ror	r20
    1f3e:	8a 95       	dec	r24
    1f40:	e2 f7       	brpl	.-8      	; 0x1f3a <M_Dio_en_getPinValue+0xea>
    1f42:	ca 01       	movw	r24, r20
    1f44:	81 70       	andi	r24, 0x01	; 1
    1f46:	89 83       	std	Y+1, r24	; 0x01
	}
    return Local_levelType ;
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f4a:	26 96       	adiw	r28, 0x06	; 6
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <M_Dio_void_setPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPinValue(Dio_ChannelType ChannelId,Dio_LevelType Level)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	28 97       	sbiw	r28, 0x08	; 8
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	8b 83       	std	Y+3, r24	; 0x03
    1f72:	6c 83       	std	Y+4, r22	; 0x04
	u8 pin = ChannelId % 10;
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9a e0       	ldi	r25, 0x0A	; 10
    1f78:	69 2f       	mov	r22, r25
    1f7a:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodqi4>
    1f7e:	89 2f       	mov	r24, r25
    1f80:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = ChannelId / 10;
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	9a e0       	ldi	r25, 0x0A	; 10
    1f86:	69 2f       	mov	r22, r25
    1f88:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodqi4>
    1f8c:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    1f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f90:	81 30       	cpi	r24, 0x01	; 1
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <M_Dio_void_setPinValue+0x3a>
    1f94:	70 c0       	rjmp	.+224    	; 0x2076 <M_Dio_void_setPinValue+0x11a>
	{
		switch(port)
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	38 87       	std	Y+8, r19	; 0x08
    1f9e:	2f 83       	std	Y+7, r18	; 0x07
    1fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa2:	98 85       	ldd	r25, Y+8	; 0x08
    1fa4:	82 30       	cpi	r24, 0x02	; 2
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	51 f1       	breq	.+84     	; 0x1ffe <M_Dio_void_setPinValue+0xa2>
    1faa:	2f 81       	ldd	r18, Y+7	; 0x07
    1fac:	38 85       	ldd	r19, Y+8	; 0x08
    1fae:	23 30       	cpi	r18, 0x03	; 3
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	34 f4       	brge	.+12     	; 0x1fc0 <M_Dio_void_setPinValue+0x64>
    1fb4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb6:	98 85       	ldd	r25, Y+8	; 0x08
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	91 05       	cpc	r25, r1
    1fbc:	61 f0       	breq	.+24     	; 0x1fd6 <M_Dio_void_setPinValue+0x7a>
    1fbe:	d3 c0       	rjmp	.+422    	; 0x2166 <M_Dio_void_setPinValue+0x20a>
    1fc0:	2f 81       	ldd	r18, Y+7	; 0x07
    1fc2:	38 85       	ldd	r19, Y+8	; 0x08
    1fc4:	23 30       	cpi	r18, 0x03	; 3
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	71 f1       	breq	.+92     	; 0x2026 <M_Dio_void_setPinValue+0xca>
    1fca:	8f 81       	ldd	r24, Y+7	; 0x07
    1fcc:	98 85       	ldd	r25, Y+8	; 0x08
    1fce:	84 30       	cpi	r24, 0x04	; 4
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	e9 f1       	breq	.+122    	; 0x204e <M_Dio_void_setPinValue+0xf2>
    1fd4:	c8 c0       	rjmp	.+400    	; 0x2166 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : SET_BIT( PORTA_REG,pin);break;
    1fd6:	ab e3       	ldi	r26, 0x3B	; 59
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	eb e3       	ldi	r30, 0x3B	; 59
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	02 2e       	mov	r0, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <M_Dio_void_setPinValue+0x98>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	0a 94       	dec	r0
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <M_Dio_void_setPinValue+0x94>
    1ff8:	84 2b       	or	r24, r20
    1ffa:	8c 93       	st	X, r24
    1ffc:	b4 c0       	rjmp	.+360    	; 0x2166 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : SET_BIT( PORTB_REG,pin);break;
    1ffe:	a8 e3       	ldi	r26, 0x38	; 56
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e8 e3       	ldi	r30, 0x38	; 56
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	48 2f       	mov	r20, r24
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	02 2e       	mov	r0, r18
    2016:	02 c0       	rjmp	.+4      	; 0x201c <M_Dio_void_setPinValue+0xc0>
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	0a 94       	dec	r0
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <M_Dio_void_setPinValue+0xbc>
    2020:	84 2b       	or	r24, r20
    2022:	8c 93       	st	X, r24
    2024:	a0 c0       	rjmp	.+320    	; 0x2166 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : SET_BIT( PORTC_REG,pin);break;
    2026:	a5 e3       	ldi	r26, 0x35	; 53
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e5 e3       	ldi	r30, 0x35	; 53
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	48 2f       	mov	r20, r24
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	02 2e       	mov	r0, r18
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <M_Dio_void_setPinValue+0xe8>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	0a 94       	dec	r0
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <M_Dio_void_setPinValue+0xe4>
    2048:	84 2b       	or	r24, r20
    204a:	8c 93       	st	X, r24
    204c:	8c c0       	rjmp	.+280    	; 0x2166 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : SET_BIT( PORTD_REG,pin);break;
    204e:	a2 e3       	ldi	r26, 0x32	; 50
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e2 e3       	ldi	r30, 0x32	; 50
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	48 2f       	mov	r20, r24
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	02 2e       	mov	r0, r18
    2066:	02 c0       	rjmp	.+4      	; 0x206c <M_Dio_void_setPinValue+0x110>
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	0a 94       	dec	r0
    206e:	e2 f7       	brpl	.-8      	; 0x2068 <M_Dio_void_setPinValue+0x10c>
    2070:	84 2b       	or	r24, r20
    2072:	8c 93       	st	X, r24
    2074:	78 c0       	rjmp	.+240    	; 0x2166 <M_Dio_void_setPinValue+0x20a>
		}

	}
	else if (Level == DIO_LOW)
    2076:	8c 81       	ldd	r24, Y+4	; 0x04
    2078:	88 23       	and	r24, r24
    207a:	09 f0       	breq	.+2      	; 0x207e <M_Dio_void_setPinValue+0x122>
    207c:	74 c0       	rjmp	.+232    	; 0x2166 <M_Dio_void_setPinValue+0x20a>
	{
		switch(port)
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	3e 83       	std	Y+6, r19	; 0x06
    2086:	2d 83       	std	Y+5, r18	; 0x05
    2088:	8d 81       	ldd	r24, Y+5	; 0x05
    208a:	9e 81       	ldd	r25, Y+6	; 0x06
    208c:	82 30       	cpi	r24, 0x02	; 2
    208e:	91 05       	cpc	r25, r1
    2090:	61 f1       	breq	.+88     	; 0x20ea <M_Dio_void_setPinValue+0x18e>
    2092:	2d 81       	ldd	r18, Y+5	; 0x05
    2094:	3e 81       	ldd	r19, Y+6	; 0x06
    2096:	23 30       	cpi	r18, 0x03	; 3
    2098:	31 05       	cpc	r19, r1
    209a:	34 f4       	brge	.+12     	; 0x20a8 <M_Dio_void_setPinValue+0x14c>
    209c:	8d 81       	ldd	r24, Y+5	; 0x05
    209e:	9e 81       	ldd	r25, Y+6	; 0x06
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	91 05       	cpc	r25, r1
    20a4:	69 f0       	breq	.+26     	; 0x20c0 <M_Dio_void_setPinValue+0x164>
    20a6:	5f c0       	rjmp	.+190    	; 0x2166 <M_Dio_void_setPinValue+0x20a>
    20a8:	2d 81       	ldd	r18, Y+5	; 0x05
    20aa:	3e 81       	ldd	r19, Y+6	; 0x06
    20ac:	23 30       	cpi	r18, 0x03	; 3
    20ae:	31 05       	cpc	r19, r1
    20b0:	89 f1       	breq	.+98     	; 0x2114 <M_Dio_void_setPinValue+0x1b8>
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	84 30       	cpi	r24, 0x04	; 4
    20b8:	91 05       	cpc	r25, r1
    20ba:	09 f4       	brne	.+2      	; 0x20be <M_Dio_void_setPinValue+0x162>
    20bc:	40 c0       	rjmp	.+128    	; 0x213e <M_Dio_void_setPinValue+0x1e2>
    20be:	53 c0       	rjmp	.+166    	; 0x2166 <M_Dio_void_setPinValue+0x20a>
		{
		case DIO_PORTA : CLR_BIT( PORTA_REG,pin);break;
    20c0:	ab e3       	ldi	r26, 0x3B	; 59
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	eb e3       	ldi	r30, 0x3B	; 59
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	48 2f       	mov	r20, r24
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	02 2e       	mov	r0, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <M_Dio_void_setPinValue+0x182>
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	0a 94       	dec	r0
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <M_Dio_void_setPinValue+0x17e>
    20e2:	80 95       	com	r24
    20e4:	84 23       	and	r24, r20
    20e6:	8c 93       	st	X, r24
    20e8:	3e c0       	rjmp	.+124    	; 0x2166 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTB : CLR_BIT( PORTB_REG,pin);break;
    20ea:	a8 e3       	ldi	r26, 0x38	; 56
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e8 e3       	ldi	r30, 0x38	; 56
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	48 2f       	mov	r20, r24
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	02 2e       	mov	r0, r18
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <M_Dio_void_setPinValue+0x1ac>
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	0a 94       	dec	r0
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <M_Dio_void_setPinValue+0x1a8>
    210c:	80 95       	com	r24
    210e:	84 23       	and	r24, r20
    2110:	8c 93       	st	X, r24
    2112:	29 c0       	rjmp	.+82     	; 0x2166 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTC : CLR_BIT( PORTC_REG,pin);break;
    2114:	a5 e3       	ldi	r26, 0x35	; 53
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e5 e3       	ldi	r30, 0x35	; 53
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	48 2f       	mov	r20, r24
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	02 2e       	mov	r0, r18
    212c:	02 c0       	rjmp	.+4      	; 0x2132 <M_Dio_void_setPinValue+0x1d6>
    212e:	88 0f       	add	r24, r24
    2130:	99 1f       	adc	r25, r25
    2132:	0a 94       	dec	r0
    2134:	e2 f7       	brpl	.-8      	; 0x212e <M_Dio_void_setPinValue+0x1d2>
    2136:	80 95       	com	r24
    2138:	84 23       	and	r24, r20
    213a:	8c 93       	st	X, r24
    213c:	14 c0       	rjmp	.+40     	; 0x2166 <M_Dio_void_setPinValue+0x20a>
		case DIO_PORTD : CLR_BIT( PORTD_REG,pin);break;
    213e:	a2 e3       	ldi	r26, 0x32	; 50
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e2 e3       	ldi	r30, 0x32	; 50
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	48 2f       	mov	r20, r24
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	02 2e       	mov	r0, r18
    2156:	02 c0       	rjmp	.+4      	; 0x215c <M_Dio_void_setPinValue+0x200>
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	0a 94       	dec	r0
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <M_Dio_void_setPinValue+0x1fc>
    2160:	80 95       	com	r24
    2162:	84 23       	and	r24, r20
    2164:	8c 93       	st	X, r24
		}

	}

}
    2166:	28 96       	adiw	r28, 0x08	; 8
    2168:	0f b6       	in	r0, 0x3f	; 63
    216a:	f8 94       	cli
    216c:	de bf       	out	0x3e, r29	; 62
    216e:	0f be       	out	0x3f, r0	; 63
    2170:	cd bf       	out	0x3d, r28	; 61
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <M_Dio_en_getPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_Dio_en_getPortValue(Dio_PortType PortId)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <M_Dio_en_getPortValue+0x6>
    217e:	00 d0       	rcall	.+0      	; 0x2180 <M_Dio_en_getPortValue+0x8>
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_Reading;

	switch( PortId)
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	3c 83       	std	Y+4, r19	; 0x04
    218e:	2b 83       	std	Y+3, r18	; 0x03
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	82 30       	cpi	r24, 0x02	; 2
    2196:	91 05       	cpc	r25, r1
    2198:	d9 f0       	breq	.+54     	; 0x21d0 <M_Dio_en_getPortValue+0x58>
    219a:	2b 81       	ldd	r18, Y+3	; 0x03
    219c:	3c 81       	ldd	r19, Y+4	; 0x04
    219e:	23 30       	cpi	r18, 0x03	; 3
    21a0:	31 05       	cpc	r19, r1
    21a2:	34 f4       	brge	.+12     	; 0x21b0 <M_Dio_en_getPortValue+0x38>
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	81 30       	cpi	r24, 0x01	; 1
    21aa:	91 05       	cpc	r25, r1
    21ac:	61 f0       	breq	.+24     	; 0x21c6 <M_Dio_en_getPortValue+0x4e>
    21ae:	1e c0       	rjmp	.+60     	; 0x21ec <M_Dio_en_getPortValue+0x74>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	23 30       	cpi	r18, 0x03	; 3
    21b6:	31 05       	cpc	r19, r1
    21b8:	81 f0       	breq	.+32     	; 0x21da <M_Dio_en_getPortValue+0x62>
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	84 30       	cpi	r24, 0x04	; 4
    21c0:	91 05       	cpc	r25, r1
    21c2:	81 f0       	breq	.+32     	; 0x21e4 <M_Dio_en_getPortValue+0x6c>
    21c4:	13 c0       	rjmp	.+38     	; 0x21ec <M_Dio_en_getPortValue+0x74>
	{
	case DIO_PORTA :Local_Reading =  PORTA_REG;break;
    21c6:	eb e3       	ldi	r30, 0x3B	; 59
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	0e c0       	rjmp	.+28     	; 0x21ec <M_Dio_en_getPortValue+0x74>
	case DIO_PORTB :Local_Reading =  PORTB_REG;break;
    21d0:	e8 e3       	ldi	r30, 0x38	; 56
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	09 c0       	rjmp	.+18     	; 0x21ec <M_Dio_en_getPortValue+0x74>
	case DIO_PORTC :Local_Reading =  PORTC_REG;break;
    21da:	e5 e3       	ldi	r30, 0x35	; 53
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	89 83       	std	Y+1, r24	; 0x01
    21e2:	04 c0       	rjmp	.+8      	; 0x21ec <M_Dio_en_getPortValue+0x74>
	case DIO_PORTD :Local_Reading =  PORTD_REG;break;
    21e4:	e2 e3       	ldi	r30, 0x32	; 50
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_Reading;
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <M_Dio_void_setPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_setPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <M_Dio_void_setPortValue+0x6>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <M_Dio_void_setPortValue+0x8>
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	3c 83       	std	Y+4, r19	; 0x04
    2214:	2b 83       	std	Y+3, r18	; 0x03
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	9c 81       	ldd	r25, Y+4	; 0x04
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	91 05       	cpc	r25, r1
    221e:	d9 f0       	breq	.+54     	; 0x2256 <M_Dio_void_setPortValue+0x5a>
    2220:	2b 81       	ldd	r18, Y+3	; 0x03
    2222:	3c 81       	ldd	r19, Y+4	; 0x04
    2224:	23 30       	cpi	r18, 0x03	; 3
    2226:	31 05       	cpc	r19, r1
    2228:	34 f4       	brge	.+12     	; 0x2236 <M_Dio_void_setPortValue+0x3a>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	81 30       	cpi	r24, 0x01	; 1
    2230:	91 05       	cpc	r25, r1
    2232:	61 f0       	breq	.+24     	; 0x224c <M_Dio_void_setPortValue+0x50>
    2234:	1e c0       	rjmp	.+60     	; 0x2272 <M_Dio_void_setPortValue+0x76>
    2236:	2b 81       	ldd	r18, Y+3	; 0x03
    2238:	3c 81       	ldd	r19, Y+4	; 0x04
    223a:	23 30       	cpi	r18, 0x03	; 3
    223c:	31 05       	cpc	r19, r1
    223e:	81 f0       	breq	.+32     	; 0x2260 <M_Dio_void_setPortValue+0x64>
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	84 30       	cpi	r24, 0x04	; 4
    2246:	91 05       	cpc	r25, r1
    2248:	81 f0       	breq	.+32     	; 0x226a <M_Dio_void_setPortValue+0x6e>
    224a:	13 c0       	rjmp	.+38     	; 0x2272 <M_Dio_void_setPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level;break;
    224c:	eb e3       	ldi	r30, 0x3B	; 59
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	80 83       	st	Z, r24
    2254:	0e c0       	rjmp	.+28     	; 0x2272 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTB : PORTB_REG = Level;break;
    2256:	e8 e3       	ldi	r30, 0x38	; 56
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	80 83       	st	Z, r24
    225e:	09 c0       	rjmp	.+18     	; 0x2272 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTC : PORTC_REG = Level;break;
    2260:	e5 e3       	ldi	r30, 0x35	; 53
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	80 83       	st	Z, r24
    2268:	04 c0       	rjmp	.+8      	; 0x2272 <M_Dio_void_setPortValue+0x76>
    	case DIO_PORTD : PORTD_REG = Level;break;
    226a:	e2 e3       	ldi	r30, 0x32	; 50
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	80 83       	st	Z, r24
	}
}
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <M_Dio_void_togglePinValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_Dio_void_togglePinValue(Dio_ChannelType channelId)
{
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	00 d0       	rcall	.+0      	; 0x2286 <M_Dio_void_togglePinValue+0x6>
    2286:	00 d0       	rcall	.+0      	; 0x2288 <M_Dio_void_togglePinValue+0x8>
    2288:	0f 92       	push	r0
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin = channelId % 10;
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9a e0       	ldi	r25, 0x0A	; 10
    2294:	69 2f       	mov	r22, r25
    2296:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodqi4>
    229a:	89 2f       	mov	r24, r25
    229c:	8a 83       	std	Y+2, r24	; 0x02
	u8 port = channelId/ 10;
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9a e0       	ldi	r25, 0x0A	; 10
    22a2:	69 2f       	mov	r22, r25
    22a4:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodqi4>
    22a8:	89 83       	std	Y+1, r24	; 0x01

	switch(port)
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	3d 83       	std	Y+5, r19	; 0x05
    22b2:	2c 83       	std	Y+4, r18	; 0x04
    22b4:	8c 81       	ldd	r24, Y+4	; 0x04
    22b6:	9d 81       	ldd	r25, Y+5	; 0x05
    22b8:	82 30       	cpi	r24, 0x02	; 2
    22ba:	91 05       	cpc	r25, r1
    22bc:	51 f1       	breq	.+84     	; 0x2312 <M_Dio_void_togglePinValue+0x92>
    22be:	2c 81       	ldd	r18, Y+4	; 0x04
    22c0:	3d 81       	ldd	r19, Y+5	; 0x05
    22c2:	23 30       	cpi	r18, 0x03	; 3
    22c4:	31 05       	cpc	r19, r1
    22c6:	34 f4       	brge	.+12     	; 0x22d4 <M_Dio_void_togglePinValue+0x54>
    22c8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ca:	9d 81       	ldd	r25, Y+5	; 0x05
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	91 05       	cpc	r25, r1
    22d0:	61 f0       	breq	.+24     	; 0x22ea <M_Dio_void_togglePinValue+0x6a>
    22d2:	5a c0       	rjmp	.+180    	; 0x2388 <M_Dio_void_togglePinValue+0x108>
    22d4:	2c 81       	ldd	r18, Y+4	; 0x04
    22d6:	3d 81       	ldd	r19, Y+5	; 0x05
    22d8:	23 30       	cpi	r18, 0x03	; 3
    22da:	31 05       	cpc	r19, r1
    22dc:	71 f1       	breq	.+92     	; 0x233a <M_Dio_void_togglePinValue+0xba>
    22de:	8c 81       	ldd	r24, Y+4	; 0x04
    22e0:	9d 81       	ldd	r25, Y+5	; 0x05
    22e2:	84 30       	cpi	r24, 0x04	; 4
    22e4:	91 05       	cpc	r25, r1
    22e6:	e9 f1       	breq	.+122    	; 0x2362 <M_Dio_void_togglePinValue+0xe2>
    22e8:	4f c0       	rjmp	.+158    	; 0x2388 <M_Dio_void_togglePinValue+0x108>
	{
	case DIO_PORTA :TOG_BIT( PORTA_REG,pin);break;
    22ea:	ab e3       	ldi	r26, 0x3B	; 59
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	eb e3       	ldi	r30, 0x3B	; 59
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	48 2f       	mov	r20, r24
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	02 2e       	mov	r0, r18
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <M_Dio_void_togglePinValue+0x88>
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	0a 94       	dec	r0
    230a:	e2 f7       	brpl	.-8      	; 0x2304 <M_Dio_void_togglePinValue+0x84>
    230c:	84 27       	eor	r24, r20
    230e:	8c 93       	st	X, r24
    2310:	3b c0       	rjmp	.+118    	; 0x2388 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTB :TOG_BIT( PORTB_REG,pin);break;
    2312:	a8 e3       	ldi	r26, 0x38	; 56
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	e8 e3       	ldi	r30, 0x38	; 56
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	80 81       	ld	r24, Z
    231c:	48 2f       	mov	r20, r24
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	02 2e       	mov	r0, r18
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <M_Dio_void_togglePinValue+0xb0>
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	0a 94       	dec	r0
    2332:	e2 f7       	brpl	.-8      	; 0x232c <M_Dio_void_togglePinValue+0xac>
    2334:	84 27       	eor	r24, r20
    2336:	8c 93       	st	X, r24
    2338:	27 c0       	rjmp	.+78     	; 0x2388 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTC :TOG_BIT( PORTC_REG,pin);break;
    233a:	a5 e3       	ldi	r26, 0x35	; 53
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e5 e3       	ldi	r30, 0x35	; 53
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	48 2f       	mov	r20, r24
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	02 2e       	mov	r0, r18
    2352:	02 c0       	rjmp	.+4      	; 0x2358 <M_Dio_void_togglePinValue+0xd8>
    2354:	88 0f       	add	r24, r24
    2356:	99 1f       	adc	r25, r25
    2358:	0a 94       	dec	r0
    235a:	e2 f7       	brpl	.-8      	; 0x2354 <M_Dio_void_togglePinValue+0xd4>
    235c:	84 27       	eor	r24, r20
    235e:	8c 93       	st	X, r24
    2360:	13 c0       	rjmp	.+38     	; 0x2388 <M_Dio_void_togglePinValue+0x108>
	case DIO_PORTD :TOG_BIT( PORTD_REG,pin);break;
    2362:	a2 e3       	ldi	r26, 0x32	; 50
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e2 e3       	ldi	r30, 0x32	; 50
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	48 2f       	mov	r20, r24
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	02 2e       	mov	r0, r18
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <M_Dio_void_togglePinValue+0x100>
    237c:	88 0f       	add	r24, r24
    237e:	99 1f       	adc	r25, r25
    2380:	0a 94       	dec	r0
    2382:	e2 f7       	brpl	.-8      	; 0x237c <M_Dio_void_togglePinValue+0xfc>
    2384:	84 27       	eor	r24, r20
    2386:	8c 93       	st	X, r24
	}

}
    2388:	0f 90       	pop	r0
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <H_Relay_Void_WorkOn>:
#include "Relay_Cfg.h"
#include "Relay_Int.h"
#include "Relay_Priv.h"

void H_Relay_Void_WorkOn(Realy_Type relay)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	00 d0       	rcall	.+0      	; 0x239e <H_Relay_Void_WorkOn+0x6>
    239e:	0f 92       	push	r0
    23a0:	cd b7       	in	r28, 0x3d	; 61
    23a2:	de b7       	in	r29, 0x3e	; 62
    23a4:	89 83       	std	Y+1, r24	; 0x01
	switch(relay)
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	3b 83       	std	Y+3, r19	; 0x03
    23ae:	2a 83       	std	Y+2, r18	; 0x02
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	9b 81       	ldd	r25, Y+3	; 0x03
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	91 05       	cpc	r25, r1
    23b8:	31 f0       	breq	.+12     	; 0x23c6 <H_Relay_Void_WorkOn+0x2e>
    23ba:	2a 81       	ldd	r18, Y+2	; 0x02
    23bc:	3b 81       	ldd	r19, Y+3	; 0x03
    23be:	22 30       	cpi	r18, 0x02	; 2
    23c0:	31 05       	cpc	r19, r1
    23c2:	31 f0       	breq	.+12     	; 0x23d0 <H_Relay_Void_WorkOn+0x38>
    23c4:	09 c0       	rjmp	.+18     	; 0x23d8 <H_Relay_Void_WorkOn+0x40>
	{
	case Relay_1:
		M_Dio_void_setPinValue(RELAY_1_PIN, DIO_HIGH);
    23c6:	85 e2       	ldi	r24, 0x25	; 37
    23c8:	61 e0       	ldi	r22, 0x01	; 1
    23ca:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
    23ce:	04 c0       	rjmp	.+8      	; 0x23d8 <H_Relay_Void_WorkOn+0x40>
	break;
	case Relay_2:
		M_Dio_void_setPinValue(RELAY_2_PIN, DIO_HIGH);
    23d0:	81 e1       	ldi	r24, 0x11	; 17
    23d2:	61 e0       	ldi	r22, 0x01	; 1
    23d4:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
	break;
	}
}
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	08 95       	ret

000023e4 <H_Relay_Void_WorkOff>:

void H_Relay_Void_WorkOff(Realy_Type relay)
{
    23e4:	df 93       	push	r29
    23e6:	cf 93       	push	r28
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <H_Relay_Void_WorkOff+0x6>
    23ea:	0f 92       	push	r0
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	89 83       	std	Y+1, r24	; 0x01
	switch(relay)
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	3b 83       	std	Y+3, r19	; 0x03
    23fa:	2a 83       	std	Y+2, r18	; 0x02
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2400:	81 30       	cpi	r24, 0x01	; 1
    2402:	91 05       	cpc	r25, r1
    2404:	31 f0       	breq	.+12     	; 0x2412 <H_Relay_Void_WorkOff+0x2e>
    2406:	2a 81       	ldd	r18, Y+2	; 0x02
    2408:	3b 81       	ldd	r19, Y+3	; 0x03
    240a:	22 30       	cpi	r18, 0x02	; 2
    240c:	31 05       	cpc	r19, r1
    240e:	31 f0       	breq	.+12     	; 0x241c <H_Relay_Void_WorkOff+0x38>
    2410:	09 c0       	rjmp	.+18     	; 0x2424 <H_Relay_Void_WorkOff+0x40>
	{
	case Relay_1:
		M_Dio_void_setPinValue(RELAY_1_PIN, DIO_LOW);
    2412:	85 e2       	ldi	r24, 0x25	; 37
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
    241a:	04 c0       	rjmp	.+8      	; 0x2424 <H_Relay_Void_WorkOff+0x40>
	break;
	case Relay_2:
		M_Dio_void_setPinValue(RELAY_2_PIN, DIO_LOW);
    241c:	81 e1       	ldi	r24, 0x11	; 17
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
	break;
	}
}
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <H_RTC_Void_Init>:
#include "RTC_priv.h"
#include "TWI_init.h"
#include "RTC_types.h"

void H_RTC_Void_Init()
{
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	cd b7       	in	r28, 0x3d	; 61
    2436:	de b7       	in	r29, 0x3e	; 62
	M_TWI_Void_InitMaster(TWI_SCL_100KHZ);
    2438:	84 e2       	ldi	r24, 0x24	; 36
    243a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <M_TWI_Void_InitMaster>
}
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <H_RTC_Void_SetTime>:

void H_RTC_Void_SetTime(RTC_CONFIG_TIME *Copy_TimeConfig, u8 Copy_DayTime)
{
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	00 d0       	rcall	.+0      	; 0x244a <H_RTC_Void_SetTime+0x6>
    244a:	00 d0       	rcall	.+0      	; 0x244c <H_RTC_Void_SetTime+0x8>
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	9b 83       	std	Y+3, r25	; 0x03
    2452:	8a 83       	std	Y+2, r24	; 0x02
    2454:	6c 83       	std	Y+4, r22	; 0x04
	u8 Temp_Hours = Copy_TimeConfig->RTC_Hours ;
    2456:	ea 81       	ldd	r30, Y+2	; 0x02
    2458:	fb 81       	ldd	r31, Y+3	; 0x03
    245a:	80 81       	ld	r24, Z
    245c:	89 83       	std	Y+1, r24	; 0x01

	/* Send Start Condition*/
	M_TWI_Void_SendStartCondition();
    245e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <M_TWI_Void_SendStartCondition>
	/* Send RTC Address with read*/
	M_TWI_Void_SendByte(RTC_ADDRESS_W);
    2462:	80 ed       	ldi	r24, 0xD0	; 208
    2464:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	/* Send Date address */
	M_TWI_Void_SendByte(RTC_TIME_ADDRESS);
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	/* Send Time */
	M_TWI_Void_SendByte(H_RTC_DEC_TO_BCD(Copy_TimeConfig->RTC_Seconed));
    246e:	ea 81       	ldd	r30, Y+2	; 0x02
    2470:	fb 81       	ldd	r31, Y+3	; 0x03
    2472:	82 81       	ldd	r24, Z+2	; 0x02
    2474:	0e 94 48 13 	call	0x2690	; 0x2690 <H_RTC_DEC_TO_BCD>
    2478:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>

	M_TWI_Void_SendByte(H_RTC_DEC_TO_BCD(Copy_TimeConfig->RTC_Minutes));
    247c:	ea 81       	ldd	r30, Y+2	; 0x02
    247e:	fb 81       	ldd	r31, Y+3	; 0x03
    2480:	81 81       	ldd	r24, Z+1	; 0x01
    2482:	0e 94 48 13 	call	0x2690	; 0x2690 <H_RTC_DEC_TO_BCD>
    2486:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>

	if (Copy_DayTime == RTC_PM)
    248a:	8c 81       	ldd	r24, Y+4	; 0x04
    248c:	8c 33       	cpi	r24, 0x3C	; 60
    248e:	21 f4       	brne	.+8      	; 0x2498 <H_RTC_Void_SetTime+0x54>
	{
		Temp_Hours |= RTC_PM_MASK ;
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	80 66       	ori	r24, 0x60	; 96
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	06 c0       	rjmp	.+12     	; 0x24a4 <H_RTC_Void_SetTime+0x60>
	}
	else if(Copy_DayTime == RTC_AM)
    2498:	8c 81       	ldd	r24, Y+4	; 0x04
    249a:	88 32       	cpi	r24, 0x28	; 40
    249c:	19 f4       	brne	.+6      	; 0x24a4 <H_RTC_Void_SetTime+0x60>
	{
		Temp_Hours |= RTC_AM_MASK ;
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	80 64       	ori	r24, 0x40	; 64
    24a2:	89 83       	std	Y+1, r24	; 0x01
	}

	M_TWI_Void_SendByte(Temp_Hours);
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>

	M_TWI_Void_SendStopCondition();
    24aa:	0e 94 92 09 	call	0x1324	; 0x1324 <M_TWI_Void_SendStopCondition>
}
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <H_RTC_Void_GetTime>:

RTC_CONFIG_TIME H_RTC_Void_GetTime()
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <H_RTC_Void_GetTime+0x6>
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <H_RTC_Void_GetTime+0x8>
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <H_RTC_Void_GetTime+0xa>
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
	RTC_CONFIG_TIME Time;
	u8 Temp_Holder ;
	u8 Temp_DayTime;
	/* Send Start Condition*/
	M_TWI_Void_SendStartCondition();
    24ca:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <M_TWI_Void_SendStartCondition>
	/* Send RTC Address with read*/
	M_TWI_Void_SendByte(RTC_ADDRESS_W);
    24ce:	80 ed       	ldi	r24, 0xD0	; 208
    24d0:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	/* Send Date address */
	M_TWI_Void_SendByte(RTC_TIME_ADDRESS);
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	/* Send Repeated Start Condition*/
	M_TWI_Void_SendStartCondition();
    24da:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <M_TWI_Void_SendStartCondition>
	/* Send RTC Address with read*/
	M_TWI_Void_SendByte(RTC_ADDRESS_R);
    24de:	81 ed       	ldi	r24, 0xD1	; 209
    24e0:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>

	/*
	 *  Read Seconed
	 * */
	M_TWI_Void_RecevieWithACK(&Temp_Holder);
    24e4:	ce 01       	movw	r24, r28
    24e6:	06 96       	adiw	r24, 0x06	; 6
    24e8:	0e 94 34 09 	call	0x1268	; 0x1268 <M_TWI_Void_RecevieWithACK>
	H_RTC_BCD_TO_DEC(Temp_Holder);
    24ec:	8e 81       	ldd	r24, Y+6	; 0x06
    24ee:	0e 94 75 13 	call	0x26ea	; 0x26ea <H_RTC_BCD_TO_DEC>
	Time.RTC_Seconed= H_RTC_BCD_TO_DEC(Temp_Holder);
    24f2:	8e 81       	ldd	r24, Y+6	; 0x06
    24f4:	0e 94 75 13 	call	0x26ea	; 0x26ea <H_RTC_BCD_TO_DEC>
    24f8:	8c 83       	std	Y+4, r24	; 0x04
	/*
	 *  Read Min
	 * */
	M_TWI_Void_RecevieWithACK(&Temp_Holder);
    24fa:	ce 01       	movw	r24, r28
    24fc:	06 96       	adiw	r24, 0x06	; 6
    24fe:	0e 94 34 09 	call	0x1268	; 0x1268 <M_TWI_Void_RecevieWithACK>
	H_RTC_BCD_TO_DEC(Temp_Holder);
    2502:	8e 81       	ldd	r24, Y+6	; 0x06
    2504:	0e 94 75 13 	call	0x26ea	; 0x26ea <H_RTC_BCD_TO_DEC>
	Time.RTC_Minutes = H_RTC_BCD_TO_DEC(Temp_Holder);
    2508:	8e 81       	ldd	r24, Y+6	; 0x06
    250a:	0e 94 75 13 	call	0x26ea	; 0x26ea <H_RTC_BCD_TO_DEC>
    250e:	8b 83       	std	Y+3, r24	; 0x03
	/*
	 *  Read Hour
	 * */
	M_TWI_Void_RecevieWitNACK(&Temp_Holder);
    2510:	ce 01       	movw	r24, r28
    2512:	06 96       	adiw	r24, 0x06	; 6
    2514:	0e 94 52 09 	call	0x12a4	; 0x12a4 <M_TWI_Void_RecevieWitNACK>

	Temp_DayTime = Temp_Holder & 0xF0 ;
    2518:	8e 81       	ldd	r24, Y+6	; 0x06
    251a:	80 7f       	andi	r24, 0xF0	; 240
    251c:	89 83       	std	Y+1, r24	; 0x01
	Time.RTC_DayTime = H_RTC_BCD_TO_DEC(Temp_DayTime);
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	0e 94 75 13 	call	0x26ea	; 0x26ea <H_RTC_BCD_TO_DEC>
    2524:	8d 83       	std	Y+5, r24	; 0x05

	Temp_Holder &= 0x0F;
    2526:	8e 81       	ldd	r24, Y+6	; 0x06
    2528:	8f 70       	andi	r24, 0x0F	; 15
    252a:	8e 83       	std	Y+6, r24	; 0x06
	Time.RTC_Hours = H_RTC_BCD_TO_DEC(Temp_Holder);
    252c:	8e 81       	ldd	r24, Y+6	; 0x06
    252e:	0e 94 75 13 	call	0x26ea	; 0x26ea <H_RTC_BCD_TO_DEC>
    2532:	8a 83       	std	Y+2, r24	; 0x02

	/*
	 *  Send stop
	 * */
	M_TWI_Void_SendStopCondition();
    2534:	0e 94 92 09 	call	0x1324	; 0x1324 <M_TWI_Void_SendStopCondition>

	return Time ;
    2538:	8a 81       	ldd	r24, Y+2	; 0x02
    253a:	9b 81       	ldd	r25, Y+3	; 0x03
    253c:	ac 81       	ldd	r26, Y+4	; 0x04
    253e:	bd 81       	ldd	r27, Y+5	; 0x05
}
    2540:	bc 01       	movw	r22, r24
    2542:	cd 01       	movw	r24, r26
    2544:	26 96       	adiw	r28, 0x06	; 6
    2546:	0f b6       	in	r0, 0x3f	; 63
    2548:	f8 94       	cli
    254a:	de bf       	out	0x3e, r29	; 62
    254c:	0f be       	out	0x3f, r0	; 63
    254e:	cd bf       	out	0x3d, r28	; 61
    2550:	cf 91       	pop	r28
    2552:	df 91       	pop	r29
    2554:	08 95       	ret

00002556 <H_RTC_Void_SetDate>:


void H_RTC_Void_SetDate(RTC_CONFIG_DATE *Copy_DateConfig)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	00 d0       	rcall	.+0      	; 0x255c <H_RTC_Void_SetDate+0x6>
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	9a 83       	std	Y+2, r25	; 0x02
    2562:	89 83       	std	Y+1, r24	; 0x01
	/* Send Start Condition*/
	M_TWI_Void_SendStartCondition();
    2564:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <M_TWI_Void_SendStartCondition>

	/* Send RTC Address with read*/
	M_TWI_Void_SendByte(RTC_ADDRESS_W);
    2568:	80 ed       	ldi	r24, 0xD0	; 208
    256a:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>

	/* Send Date address */
	M_TWI_Void_SendByte(RTC_DATE_ADDRESS);
    256e:	84 e0       	ldi	r24, 0x04	; 4
    2570:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>

	/* Send Date for the day */
	M_TWI_Void_SendByte(H_RTC_DEC_TO_BCD(Copy_DateConfig->RTC_Day));
    2574:	e9 81       	ldd	r30, Y+1	; 0x01
    2576:	fa 81       	ldd	r31, Y+2	; 0x02
    2578:	80 81       	ld	r24, Z
    257a:	0e 94 48 13 	call	0x2690	; 0x2690 <H_RTC_DEC_TO_BCD>
    257e:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>

	M_TWI_Void_SendByte(H_RTC_DEC_TO_BCD(Copy_DateConfig->RTC_Month));
    2582:	e9 81       	ldd	r30, Y+1	; 0x01
    2584:	fa 81       	ldd	r31, Y+2	; 0x02
    2586:	81 81       	ldd	r24, Z+1	; 0x01
    2588:	0e 94 48 13 	call	0x2690	; 0x2690 <H_RTC_DEC_TO_BCD>
    258c:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>

	M_TWI_Void_SendByte(H_RTC_DEC_TO_BCD(Copy_DateConfig->RTC_Year));
    2590:	e9 81       	ldd	r30, Y+1	; 0x01
    2592:	fa 81       	ldd	r31, Y+2	; 0x02
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	0e 94 48 13 	call	0x2690	; 0x2690 <H_RTC_DEC_TO_BCD>
    259a:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>

	M_TWI_Void_SendStopCondition();
    259e:	0e 94 92 09 	call	0x1324	; 0x1324 <M_TWI_Void_SendStopCondition>
}
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	cf 91       	pop	r28
    25a8:	df 91       	pop	r29
    25aa:	08 95       	ret

000025ac <H_RTC_Void_GetDate>:


RTC_CONFIG_DATE H_RTC_Void_GetDate()
{
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	60 97       	sbiw	r28, 0x10	; 16
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	f8 94       	cli
    25ba:	de bf       	out	0x3e, r29	; 62
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	cd bf       	out	0x3d, r28	; 61
	RTC_CONFIG_DATE Date;
	u8 Holder ;

	/* Send Start Condition*/
	M_TWI_Void_SendStartCondition();
    25c0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <M_TWI_Void_SendStartCondition>
	/* Send RTC Address with read*/
	M_TWI_Void_SendByte(RTC_ADDRESS_W);
    25c4:	80 ed       	ldi	r24, 0xD0	; 208
    25c6:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	/* Send Date address */
	M_TWI_Void_SendByte(RTC_DATE_ADDRESS);
    25ca:	84 e0       	ldi	r24, 0x04	; 4
    25cc:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	/* Send Repeated Start Condition*/
	M_TWI_Void_SendStartCondition();
    25d0:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <M_TWI_Void_SendStartCondition>
	/* Send RTC Address with read*/
	M_TWI_Void_SendByte(RTC_ADDRESS_R);
    25d4:	81 ed       	ldi	r24, 0xD1	; 209
    25d6:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	/*
	 *  Read Day
	 * */
	M_TWI_Void_RecevieWithACK(&Holder);
    25da:	ce 01       	movw	r24, r28
    25dc:	07 96       	adiw	r24, 0x07	; 7
    25de:	0e 94 34 09 	call	0x1268	; 0x1268 <M_TWI_Void_RecevieWithACK>
	H_RTC_BCD_TO_DEC(Holder);
    25e2:	8f 81       	ldd	r24, Y+7	; 0x07
    25e4:	0e 94 75 13 	call	0x26ea	; 0x26ea <H_RTC_BCD_TO_DEC>
	Date.RTC_Day= H_RTC_BCD_TO_DEC(Holder);
    25e8:	8f 81       	ldd	r24, Y+7	; 0x07
    25ea:	0e 94 75 13 	call	0x26ea	; 0x26ea <H_RTC_BCD_TO_DEC>
    25ee:	8c 83       	std	Y+4, r24	; 0x04
	/*
	 * Read Months
	 * */
	M_TWI_Void_RecevieWithACK(&Holder);
    25f0:	ce 01       	movw	r24, r28
    25f2:	07 96       	adiw	r24, 0x07	; 7
    25f4:	0e 94 34 09 	call	0x1268	; 0x1268 <M_TWI_Void_RecevieWithACK>
	H_RTC_BCD_TO_DEC(Holder);
    25f8:	8f 81       	ldd	r24, Y+7	; 0x07
    25fa:	0e 94 75 13 	call	0x26ea	; 0x26ea <H_RTC_BCD_TO_DEC>
	Date.RTC_Month= H_RTC_BCD_TO_DEC(Holder);
    25fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2600:	0e 94 75 13 	call	0x26ea	; 0x26ea <H_RTC_BCD_TO_DEC>
    2604:	8d 83       	std	Y+5, r24	; 0x05
	/*
	 * Read Years
	 * */
	M_TWI_Void_RecevieWitNACK(&Holder);
    2606:	ce 01       	movw	r24, r28
    2608:	07 96       	adiw	r24, 0x07	; 7
    260a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <M_TWI_Void_RecevieWitNACK>
	H_RTC_BCD_TO_DEC(Holder);
    260e:	8f 81       	ldd	r24, Y+7	; 0x07
    2610:	0e 94 75 13 	call	0x26ea	; 0x26ea <H_RTC_BCD_TO_DEC>
	Date.RTC_Year= H_RTC_BCD_TO_DEC(Holder);
    2614:	8f 81       	ldd	r24, Y+7	; 0x07
    2616:	0e 94 75 13 	call	0x26ea	; 0x26ea <H_RTC_BCD_TO_DEC>
    261a:	8e 83       	std	Y+6, r24	; 0x06

	/*
	 * STOP TWI
	 */
	M_TWI_Void_SendStopCondition();
    261c:	0e 94 92 09 	call	0x1324	; 0x1324 <M_TWI_Void_SendStopCondition>

return Date;
    2620:	ce 01       	movw	r24, r28
    2622:	01 96       	adiw	r24, 0x01	; 1
    2624:	99 87       	std	Y+9, r25	; 0x09
    2626:	88 87       	std	Y+8, r24	; 0x08
    2628:	fe 01       	movw	r30, r28
    262a:	34 96       	adiw	r30, 0x04	; 4
    262c:	fb 87       	std	Y+11, r31	; 0x0b
    262e:	ea 87       	std	Y+10, r30	; 0x0a
    2630:	f3 e0       	ldi	r31, 0x03	; 3
    2632:	fc 87       	std	Y+12, r31	; 0x0c
    2634:	ea 85       	ldd	r30, Y+10	; 0x0a
    2636:	fb 85       	ldd	r31, Y+11	; 0x0b
    2638:	00 80       	ld	r0, Z
    263a:	8a 85       	ldd	r24, Y+10	; 0x0a
    263c:	9b 85       	ldd	r25, Y+11	; 0x0b
    263e:	01 96       	adiw	r24, 0x01	; 1
    2640:	9b 87       	std	Y+11, r25	; 0x0b
    2642:	8a 87       	std	Y+10, r24	; 0x0a
    2644:	e8 85       	ldd	r30, Y+8	; 0x08
    2646:	f9 85       	ldd	r31, Y+9	; 0x09
    2648:	00 82       	st	Z, r0
    264a:	88 85       	ldd	r24, Y+8	; 0x08
    264c:	99 85       	ldd	r25, Y+9	; 0x09
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	99 87       	std	Y+9, r25	; 0x09
    2652:	88 87       	std	Y+8, r24	; 0x08
    2654:	9c 85       	ldd	r25, Y+12	; 0x0c
    2656:	91 50       	subi	r25, 0x01	; 1
    2658:	9c 87       	std	Y+12, r25	; 0x0c
    265a:	ec 85       	ldd	r30, Y+12	; 0x0c
    265c:	ee 23       	and	r30, r30
    265e:	51 f7       	brne	.-44     	; 0x2634 <H_RTC_Void_GetDate+0x88>
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	29 81       	ldd	r18, Y+1	; 0x01
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	9b 81       	ldd	r25, Y+3	; 0x03
    266c:	2d 87       	std	Y+13, r18	; 0x0d
    266e:	8e 87       	std	Y+14, r24	; 0x0e
    2670:	9f 87       	std	Y+15, r25	; 0x0f
    2672:	8d 85       	ldd	r24, Y+13	; 0x0d
    2674:	9e 85       	ldd	r25, Y+14	; 0x0e
    2676:	af 85       	ldd	r26, Y+15	; 0x0f
    2678:	b8 89       	ldd	r27, Y+16	; 0x10
}
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	60 96       	adiw	r28, 0x10	; 16
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	f8 94       	cli
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	0f be       	out	0x3f, r0	; 63
    2688:	cd bf       	out	0x3d, r28	; 61
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret

00002690 <H_RTC_DEC_TO_BCD>:

u8 H_RTC_DEC_TO_BCD(u8 Copy_Number)
{
    2690:	df 93       	push	r29
    2692:	cf 93       	push	r28
    2694:	00 d0       	rcall	.+0      	; 0x2696 <H_RTC_DEC_TO_BCD+0x6>
    2696:	0f 92       	push	r0
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    269c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Temp_Ones = 0 ;
    269e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Temp_Tens = 0 ;
    26a0:	19 82       	std	Y+1, r1	; 0x01

Temp_Ones = Copy_Number % 10;
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9a e0       	ldi	r25, 0x0A	; 10
    26a6:	69 2f       	mov	r22, r25
    26a8:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodqi4>
    26ac:	89 2f       	mov	r24, r25
    26ae:	8a 83       	std	Y+2, r24	; 0x02

Temp_Tens = Copy_Number / 10;
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	9a e0       	ldi	r25, 0x0A	; 10
    26b4:	69 2f       	mov	r22, r25
    26b6:	0e 94 8b 45 	call	0x8b16	; 0x8b16 <__udivmodqi4>
    26ba:	89 83       	std	Y+1, r24	; 0x01

Temp_Ones &= RTC_ONES_MASK ;
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	8f 70       	andi	r24, 0x0F	; 15
    26c0:	8a 83       	std	Y+2, r24	; 0x02

Temp_Tens =  (Temp_Tens <<4) & RTC_TENS_MASK;
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	82 95       	swap	r24
    26ca:	92 95       	swap	r25
    26cc:	90 7f       	andi	r25, 0xF0	; 240
    26ce:	98 27       	eor	r25, r24
    26d0:	80 7f       	andi	r24, 0xF0	; 240
    26d2:	98 27       	eor	r25, r24
    26d4:	80 77       	andi	r24, 0x70	; 112
    26d6:	89 83       	std	Y+1, r24	; 0x01

return Temp_Ones | Temp_Tens;
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	89 2b       	or	r24, r25
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	cf 91       	pop	r28
    26e6:	df 91       	pop	r29
    26e8:	08 95       	ret

000026ea <H_RTC_BCD_TO_DEC>:

u8 H_RTC_BCD_TO_DEC(u8 Copy_Number)
{
    26ea:	df 93       	push	r29
    26ec:	cf 93       	push	r28
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <H_RTC_BCD_TO_DEC+0x6>
    26f0:	0f 92       	push	r0
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	8b 83       	std	Y+3, r24	; 0x03
	u8 Temp_Ones = 0 ;
    26f8:	1a 82       	std	Y+2, r1	; 0x02
	u8 Temp_Tens = 0 ;
    26fa:	19 82       	std	Y+1, r1	; 0x01

	Temp_Ones = Copy_Number & RTC_ONES_BCD_MASK;
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	8f 70       	andi	r24, 0x0F	; 15
    2700:	8a 83       	std	Y+2, r24	; 0x02

	Temp_Tens= Copy_Number & RTC_TENS_BCD_MASK;
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	80 7f       	andi	r24, 0xF0	; 240
    2706:	89 83       	std	Y+1, r24	; 0x01

	Temp_Tens = ((Temp_Tens>>4) * 10) ;
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	82 95       	swap	r24
    270c:	8f 70       	andi	r24, 0x0F	; 15
    270e:	88 2f       	mov	r24, r24
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9c 01       	movw	r18, r24
    2714:	22 0f       	add	r18, r18
    2716:	33 1f       	adc	r19, r19
    2718:	c9 01       	movw	r24, r18
    271a:	88 0f       	add	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	82 0f       	add	r24, r18
    2724:	93 1f       	adc	r25, r19
    2726:	89 83       	std	Y+1, r24	; 0x01
//	H_LCD_void_sendIntNum((Temp_Ones + Temp_Tens));
	return (Temp_Ones + Temp_Tens);
    2728:	9a 81       	ldd	r25, Y+2	; 0x02
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	89 0f       	add	r24, r25
}
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <H_KEYPAD_u8_getPressedKey>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
u8 H_KEYPAD_u8_getPressedKey(void)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	cd b7       	in	r28, 0x3d	; 61
    2740:	de b7       	in	r29, 0x3e	; 62
    2742:	62 97       	sbiw	r28, 0x12	; 18
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Pressed_key=NO_PRESSED_KEY;
    274e:	19 8a       	std	Y+17, r1	; 0x11
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    2750:	18 8a       	std	Y+16, r1	; 0x10
    2752:	c8 c0       	rjmp	.+400    	; 0x28e4 <H_KEYPAD_u8_getPressedKey+0x1aa>
	{
		M_Dio_void_setPinValue(ROWS_ARR[0], DIO_HIGH);
    2754:	80 91 58 04 	lds	r24, 0x0458
    2758:	61 e0       	ldi	r22, 0x01	; 1
    275a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
    275e:	80 91 59 04 	lds	r24, 0x0459
    2762:	61 e0       	ldi	r22, 0x01	; 1
    2764:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
    2768:	80 91 5a 04 	lds	r24, 0x045A
    276c:	61 e0       	ldi	r22, 0x01	; 1
    276e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);
    2772:	80 91 5b 04 	lds	r24, 0x045B
    2776:	61 e0       	ldi	r22, 0x01	; 1
    2778:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
    277c:	88 89       	ldd	r24, Y+16	; 0x10
    277e:	88 2f       	mov	r24, r24
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	fc 01       	movw	r30, r24
    2784:	e8 5a       	subi	r30, 0xA8	; 168
    2786:	fb 4f       	sbci	r31, 0xFB	; 251
    2788:	80 81       	ld	r24, Z
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
		for(COL_Index=0;COL_Index<4;COL_Index++)
    2790:	1f 86       	std	Y+15, r1	; 0x0f
    2792:	a1 c0       	rjmp	.+322    	; 0x28d6 <H_KEYPAD_u8_getPressedKey+0x19c>
		{
			if((M_Dio_en_getPinValue(COLS_ARR[COL_Index]))==DIO_LOW)
    2794:	8f 85       	ldd	r24, Y+15	; 0x0f
    2796:	88 2f       	mov	r24, r24
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	fc 01       	movw	r30, r24
    279c:	e4 5a       	subi	r30, 0xA4	; 164
    279e:	fb 4f       	sbci	r31, 0xFB	; 251
    27a0:	80 81       	ld	r24, Z
    27a2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <M_Dio_en_getPinValue>
    27a6:	88 23       	and	r24, r24
    27a8:	09 f0       	breq	.+2      	; 0x27ac <H_KEYPAD_u8_getPressedKey+0x72>
    27aa:	92 c0       	rjmp	.+292    	; 0x28d0 <H_KEYPAD_u8_getPressedKey+0x196>
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	a8 e4       	ldi	r26, 0x48	; 72
    27b2:	b2 e4       	ldi	r27, 0x42	; 66
    27b4:	8b 87       	std	Y+11, r24	; 0x0b
    27b6:	9c 87       	std	Y+12, r25	; 0x0c
    27b8:	ad 87       	std	Y+13, r26	; 0x0d
    27ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27be:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	4a e7       	ldi	r20, 0x7A	; 122
    27ca:	55 e4       	ldi	r21, 0x45	; 69
    27cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	8f 83       	std	Y+7, r24	; 0x07
    27d6:	98 87       	std	Y+8, r25	; 0x08
    27d8:	a9 87       	std	Y+9, r26	; 0x09
    27da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27dc:	6f 81       	ldd	r22, Y+7	; 0x07
    27de:	78 85       	ldd	r23, Y+8	; 0x08
    27e0:	89 85       	ldd	r24, Y+9	; 0x09
    27e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e8       	ldi	r20, 0x80	; 128
    27ea:	5f e3       	ldi	r21, 0x3F	; 63
    27ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27f0:	88 23       	and	r24, r24
    27f2:	2c f4       	brge	.+10     	; 0x27fe <H_KEYPAD_u8_getPressedKey+0xc4>
		__ticks = 1;
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	9e 83       	std	Y+6, r25	; 0x06
    27fa:	8d 83       	std	Y+5, r24	; 0x05
    27fc:	3f c0       	rjmp	.+126    	; 0x287c <H_KEYPAD_u8_getPressedKey+0x142>
	else if (__tmp > 65535)
    27fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2800:	78 85       	ldd	r23, Y+8	; 0x08
    2802:	89 85       	ldd	r24, Y+9	; 0x09
    2804:	9a 85       	ldd	r25, Y+10	; 0x0a
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	3f ef       	ldi	r19, 0xFF	; 255
    280a:	4f e7       	ldi	r20, 0x7F	; 127
    280c:	57 e4       	ldi	r21, 0x47	; 71
    280e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2812:	18 16       	cp	r1, r24
    2814:	4c f5       	brge	.+82     	; 0x2868 <H_KEYPAD_u8_getPressedKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2816:	6b 85       	ldd	r22, Y+11	; 0x0b
    2818:	7c 85       	ldd	r23, Y+12	; 0x0c
    281a:	8d 85       	ldd	r24, Y+13	; 0x0d
    281c:	9e 85       	ldd	r25, Y+14	; 0x0e
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e2       	ldi	r20, 0x20	; 32
    2824:	51 e4       	ldi	r21, 0x41	; 65
    2826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	bc 01       	movw	r22, r24
    2830:	cd 01       	movw	r24, r26
    2832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	9e 83       	std	Y+6, r25	; 0x06
    283c:	8d 83       	std	Y+5, r24	; 0x05
    283e:	0f c0       	rjmp	.+30     	; 0x285e <H_KEYPAD_u8_getPressedKey+0x124>
    2840:	80 e9       	ldi	r24, 0x90	; 144
    2842:	91 e0       	ldi	r25, 0x01	; 1
    2844:	9c 83       	std	Y+4, r25	; 0x04
    2846:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <H_KEYPAD_u8_getPressedKey+0x112>
    2850:	9c 83       	std	Y+4, r25	; 0x04
    2852:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2854:	8d 81       	ldd	r24, Y+5	; 0x05
    2856:	9e 81       	ldd	r25, Y+6	; 0x06
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	9e 83       	std	Y+6, r25	; 0x06
    285c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    285e:	8d 81       	ldd	r24, Y+5	; 0x05
    2860:	9e 81       	ldd	r25, Y+6	; 0x06
    2862:	00 97       	sbiw	r24, 0x00	; 0
    2864:	69 f7       	brne	.-38     	; 0x2840 <H_KEYPAD_u8_getPressedKey+0x106>
    2866:	14 c0       	rjmp	.+40     	; 0x2890 <H_KEYPAD_u8_getPressedKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2868:	6f 81       	ldd	r22, Y+7	; 0x07
    286a:	78 85       	ldd	r23, Y+8	; 0x08
    286c:	89 85       	ldd	r24, Y+9	; 0x09
    286e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	9e 83       	std	Y+6, r25	; 0x06
    287a:	8d 83       	std	Y+5, r24	; 0x05
    287c:	8d 81       	ldd	r24, Y+5	; 0x05
    287e:	9e 81       	ldd	r25, Y+6	; 0x06
    2880:	9a 83       	std	Y+2, r25	; 0x02
    2882:	89 83       	std	Y+1, r24	; 0x01
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	9a 81       	ldd	r25, Y+2	; 0x02
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <H_KEYPAD_u8_getPressedKey+0x14e>
    288c:	9a 83       	std	Y+2, r25	; 0x02
    288e:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				while(M_Dio_en_getPinValue(COLS_ARR[COL_Index])==DIO_LOW);
    2890:	8f 85       	ldd	r24, Y+15	; 0x0f
    2892:	88 2f       	mov	r24, r24
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	fc 01       	movw	r30, r24
    2898:	e4 5a       	subi	r30, 0xA4	; 164
    289a:	fb 4f       	sbci	r31, 0xFB	; 251
    289c:	80 81       	ld	r24, Z
    289e:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <M_Dio_en_getPinValue>
    28a2:	88 23       	and	r24, r24
    28a4:	a9 f3       	breq	.-22     	; 0x2890 <H_KEYPAD_u8_getPressedKey+0x156>
				Local_Pressed_key= KPD_KEYS_CALC[ROW_Index][COL_Index];
    28a6:	88 89       	ldd	r24, Y+16	; 0x10
    28a8:	48 2f       	mov	r20, r24
    28aa:	50 e0       	ldi	r21, 0x00	; 0
    28ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ae:	28 2f       	mov	r18, r24
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	ca 01       	movw	r24, r20
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	82 0f       	add	r24, r18
    28be:	93 1f       	adc	r25, r19
    28c0:	fc 01       	movw	r30, r24
    28c2:	e8 5b       	subi	r30, 0xB8	; 184
    28c4:	fb 4f       	sbci	r31, 0xFB	; 251
    28c6:	80 81       	ld	r24, Z
    28c8:	89 8b       	std	Y+17, r24	; 0x11
				//M_Dio_void_setPinValue(DIO_PB7,DIO_HIGH);
				//_delay_ms(50);
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
    28ca:	89 89       	ldd	r24, Y+17	; 0x11
    28cc:	8a 8b       	std	Y+18, r24	; 0x12
    28ce:	10 c0       	rjmp	.+32     	; 0x28f0 <H_KEYPAD_u8_getPressedKey+0x1b6>
		M_Dio_void_setPinValue(ROWS_ARR[1], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[2], DIO_HIGH);
		M_Dio_void_setPinValue(ROWS_ARR[3], DIO_HIGH);

		M_Dio_void_setPinValue(ROWS_ARR[ROW_Index],DIO_LOW);
		for(COL_Index=0;COL_Index<4;COL_Index++)
    28d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d2:	8f 5f       	subi	r24, 0xFF	; 255
    28d4:	8f 87       	std	Y+15, r24	; 0x0f
    28d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d8:	84 30       	cpi	r24, 0x04	; 4
    28da:	08 f4       	brcc	.+2      	; 0x28de <H_KEYPAD_u8_getPressedKey+0x1a4>
    28dc:	5b cf       	rjmp	.-330    	; 0x2794 <H_KEYPAD_u8_getPressedKey+0x5a>
u8 H_KEYPAD_u8_getPressedKey(void)
{
	u8 Local_Pressed_key=NO_PRESSED_KEY;
	u8 ROW_Index;
	u8 COL_Index;
	for(ROW_Index=0;ROW_Index<4;ROW_Index++)
    28de:	88 89       	ldd	r24, Y+16	; 0x10
    28e0:	8f 5f       	subi	r24, 0xFF	; 255
    28e2:	88 8b       	std	Y+16, r24	; 0x10
    28e4:	88 89       	ldd	r24, Y+16	; 0x10
    28e6:	84 30       	cpi	r24, 0x04	; 4
    28e8:	08 f4       	brcc	.+2      	; 0x28ec <H_KEYPAD_u8_getPressedKey+0x1b2>
    28ea:	34 cf       	rjmp	.-408    	; 0x2754 <H_KEYPAD_u8_getPressedKey+0x1a>
				//M_Dio_void_setPinValue(DIO_PB7,DIO_LOW);
				return Local_Pressed_key;
			}
		}
	}
	return Local_Pressed_key;
    28ec:	89 89       	ldd	r24, Y+17	; 0x11
    28ee:	8a 8b       	std	Y+18, r24	; 0x12
    28f0:	8a 89       	ldd	r24, Y+18	; 0x12
}
    28f2:	62 96       	adiw	r28, 0x12	; 18
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	08 95       	ret

00002904 <Finger_Print_Init>:
u8 Search_Flag=0;
*/
static u8 Empty_Flag=0;
static u8 Delete_Flag=0;
void Finger_Print_Init(void)
{
    2904:	df 93       	push	r29
    2906:	cf 93       	push	r28
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
	Port_Init(PORT_Config_Arr);
    290c:	8b e2       	ldi	r24, 0x2B	; 43
    290e:	95 e0       	ldi	r25, 0x05	; 5
    2910:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Port_Init>
	H_LCD_void_Init();
    2914:	0e 94 33 28 	call	0x5066	; 0x5066 <H_LCD_void_Init>
	UART_Init(&ARR_UART_CFG_3);
    2918:	8b ed       	ldi	r24, 0xDB	; 219
    291a:	94 e0       	ldi	r25, 0x04	; 4
    291c:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_Init>
	UART_SetCallBack(Display_data);
    2920:	84 eb       	ldi	r24, 0xB4	; 180
    2922:	95 e2       	ldi	r25, 0x25	; 37
    2924:	0e 94 8b 08 	call	0x1116	; 0x1116 <UART_SetCallBack>
	M_GIE_Void_Enable();
    2928:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <M_GIE_Void_Enable>
}
    292c:	cf 91       	pop	r28
    292e:	df 91       	pop	r29
    2930:	08 95       	ret

00002932 <Finger_Print_Send_Command>:

void Finger_Print_Send_Command(u8 *Ptr_Package,u8 Package_Length )
{
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
    293a:	a0 97       	sbiw	r28, 0x20	; 32
    293c:	0f b6       	in	r0, 0x3f	; 63
    293e:	f8 94       	cli
    2940:	de bf       	out	0x3e, r29	; 62
    2942:	0f be       	out	0x3f, r0	; 63
    2944:	cd bf       	out	0x3d, r28	; 61
    2946:	9f 8f       	std	Y+31, r25	; 0x1f
    2948:	8e 8f       	std	Y+30, r24	; 0x1e
    294a:	68 a3       	std	Y+32, r22	; 0x20
	u8 counter=0;
    294c:	1d 8e       	std	Y+29, r1	; 0x1d
	do
	{
		UART_SendByte(Ptr_Package[counter]);
    294e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2956:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2958:	fc 01       	movw	r30, r24
    295a:	e2 0f       	add	r30, r18
    295c:	f3 1f       	adc	r31, r19
    295e:	80 81       	ld	r24, Z
    2960:	0e 94 27 08 	call	0x104e	; 0x104e <UART_SendByte>
		counter++;
    2964:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2966:	8f 5f       	subi	r24, 0xFF	; 255
    2968:	8d 8f       	std	Y+29, r24	; 0x1d
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	aa ef       	ldi	r26, 0xFA	; 250
    2970:	b3 e4       	ldi	r27, 0x43	; 67
    2972:	89 8f       	std	Y+25, r24	; 0x19
    2974:	9a 8f       	std	Y+26, r25	; 0x1a
    2976:	ab 8f       	std	Y+27, r26	; 0x1b
    2978:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297a:	69 8d       	ldd	r22, Y+25	; 0x19
    297c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    297e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2980:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	4a e7       	ldi	r20, 0x7A	; 122
    2988:	55 e4       	ldi	r21, 0x45	; 69
    298a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	8d 8b       	std	Y+21, r24	; 0x15
    2994:	9e 8b       	std	Y+22, r25	; 0x16
    2996:	af 8b       	std	Y+23, r26	; 0x17
    2998:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    299a:	6d 89       	ldd	r22, Y+21	; 0x15
    299c:	7e 89       	ldd	r23, Y+22	; 0x16
    299e:	8f 89       	ldd	r24, Y+23	; 0x17
    29a0:	98 8d       	ldd	r25, Y+24	; 0x18
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e8       	ldi	r20, 0x80	; 128
    29a8:	5f e3       	ldi	r21, 0x3F	; 63
    29aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ae:	88 23       	and	r24, r24
    29b0:	2c f4       	brge	.+10     	; 0x29bc <Finger_Print_Send_Command+0x8a>
		__ticks = 1;
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	9c 8b       	std	Y+20, r25	; 0x14
    29b8:	8b 8b       	std	Y+19, r24	; 0x13
    29ba:	3f c0       	rjmp	.+126    	; 0x2a3a <Finger_Print_Send_Command+0x108>
	else if (__tmp > 65535)
    29bc:	6d 89       	ldd	r22, Y+21	; 0x15
    29be:	7e 89       	ldd	r23, Y+22	; 0x16
    29c0:	8f 89       	ldd	r24, Y+23	; 0x17
    29c2:	98 8d       	ldd	r25, Y+24	; 0x18
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	3f ef       	ldi	r19, 0xFF	; 255
    29c8:	4f e7       	ldi	r20, 0x7F	; 127
    29ca:	57 e4       	ldi	r21, 0x47	; 71
    29cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d0:	18 16       	cp	r1, r24
    29d2:	4c f5       	brge	.+82     	; 0x2a26 <Finger_Print_Send_Command+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d4:	69 8d       	ldd	r22, Y+25	; 0x19
    29d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e2       	ldi	r20, 0x20	; 32
    29e2:	51 e4       	ldi	r21, 0x41	; 65
    29e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	bc 01       	movw	r22, r24
    29ee:	cd 01       	movw	r24, r26
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	9c 8b       	std	Y+20, r25	; 0x14
    29fa:	8b 8b       	std	Y+19, r24	; 0x13
    29fc:	0f c0       	rjmp	.+30     	; 0x2a1c <Finger_Print_Send_Command+0xea>
    29fe:	80 e9       	ldi	r24, 0x90	; 144
    2a00:	91 e0       	ldi	r25, 0x01	; 1
    2a02:	9a 8b       	std	Y+18, r25	; 0x12
    2a04:	89 8b       	std	Y+17, r24	; 0x11
    2a06:	89 89       	ldd	r24, Y+17	; 0x11
    2a08:	9a 89       	ldd	r25, Y+18	; 0x12
    2a0a:	01 97       	sbiw	r24, 0x01	; 1
    2a0c:	f1 f7       	brne	.-4      	; 0x2a0a <Finger_Print_Send_Command+0xd8>
    2a0e:	9a 8b       	std	Y+18, r25	; 0x12
    2a10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a12:	8b 89       	ldd	r24, Y+19	; 0x13
    2a14:	9c 89       	ldd	r25, Y+20	; 0x14
    2a16:	01 97       	sbiw	r24, 0x01	; 1
    2a18:	9c 8b       	std	Y+20, r25	; 0x14
    2a1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	69 f7       	brne	.-38     	; 0x29fe <Finger_Print_Send_Command+0xcc>
    2a24:	14 c0       	rjmp	.+40     	; 0x2a4e <Finger_Print_Send_Command+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a26:	6d 89       	ldd	r22, Y+21	; 0x15
    2a28:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	9c 8b       	std	Y+20, r25	; 0x14
    2a38:	8b 8b       	std	Y+19, r24	; 0x13
    2a3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a3e:	98 8b       	std	Y+16, r25	; 0x10
    2a40:	8f 87       	std	Y+15, r24	; 0x0f
    2a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a44:	98 89       	ldd	r25, Y+16	; 0x10
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <Finger_Print_Send_Command+0x114>
    2a4a:	98 8b       	std	Y+16, r25	; 0x10
    2a4c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
	}while(counter<Package_Length);
    2a4e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a50:	88 a1       	ldd	r24, Y+32	; 0x20
    2a52:	98 17       	cp	r25, r24
    2a54:	08 f4       	brcc	.+2      	; 0x2a58 <Finger_Print_Send_Command+0x126>
    2a56:	7b cf       	rjmp	.-266    	; 0x294e <Finger_Print_Send_Command+0x1c>
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	aa e7       	ldi	r26, 0x7A	; 122
    2a5e:	b4 e4       	ldi	r27, 0x44	; 68
    2a60:	8b 87       	std	Y+11, r24	; 0x0b
    2a62:	9c 87       	std	Y+12, r25	; 0x0c
    2a64:	ad 87       	std	Y+13, r26	; 0x0d
    2a66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	4a e7       	ldi	r20, 0x7A	; 122
    2a76:	55 e4       	ldi	r21, 0x45	; 69
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	8f 83       	std	Y+7, r24	; 0x07
    2a82:	98 87       	std	Y+8, r25	; 0x08
    2a84:	a9 87       	std	Y+9, r26	; 0x09
    2a86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e8       	ldi	r20, 0x80	; 128
    2a96:	5f e3       	ldi	r21, 0x3F	; 63
    2a98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a9c:	88 23       	and	r24, r24
    2a9e:	2c f4       	brge	.+10     	; 0x2aaa <Finger_Print_Send_Command+0x178>
		__ticks = 1;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	9e 83       	std	Y+6, r25	; 0x06
    2aa6:	8d 83       	std	Y+5, r24	; 0x05
    2aa8:	3f c0       	rjmp	.+126    	; 0x2b28 <Finger_Print_Send_Command+0x1f6>
	else if (__tmp > 65535)
    2aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2aac:	78 85       	ldd	r23, Y+8	; 0x08
    2aae:	89 85       	ldd	r24, Y+9	; 0x09
    2ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	3f ef       	ldi	r19, 0xFF	; 255
    2ab6:	4f e7       	ldi	r20, 0x7F	; 127
    2ab8:	57 e4       	ldi	r21, 0x47	; 71
    2aba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2abe:	18 16       	cp	r1, r24
    2ac0:	4c f5       	brge	.+82     	; 0x2b14 <Finger_Print_Send_Command+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ac4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ac6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ac8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aca:	20 e0       	ldi	r18, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	40 e2       	ldi	r20, 0x20	; 32
    2ad0:	51 e4       	ldi	r21, 0x41	; 65
    2ad2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad6:	dc 01       	movw	r26, r24
    2ad8:	cb 01       	movw	r24, r22
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	9e 83       	std	Y+6, r25	; 0x06
    2ae8:	8d 83       	std	Y+5, r24	; 0x05
    2aea:	0f c0       	rjmp	.+30     	; 0x2b0a <Finger_Print_Send_Command+0x1d8>
    2aec:	80 e9       	ldi	r24, 0x90	; 144
    2aee:	91 e0       	ldi	r25, 0x01	; 1
    2af0:	9c 83       	std	Y+4, r25	; 0x04
    2af2:	8b 83       	std	Y+3, r24	; 0x03
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <Finger_Print_Send_Command+0x1c6>
    2afc:	9c 83       	std	Y+4, r25	; 0x04
    2afe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b00:	8d 81       	ldd	r24, Y+5	; 0x05
    2b02:	9e 81       	ldd	r25, Y+6	; 0x06
    2b04:	01 97       	sbiw	r24, 0x01	; 1
    2b06:	9e 83       	std	Y+6, r25	; 0x06
    2b08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0e:	00 97       	sbiw	r24, 0x00	; 0
    2b10:	69 f7       	brne	.-38     	; 0x2aec <Finger_Print_Send_Command+0x1ba>
    2b12:	14 c0       	rjmp	.+40     	; 0x2b3c <Finger_Print_Send_Command+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b14:	6f 81       	ldd	r22, Y+7	; 0x07
    2b16:	78 85       	ldd	r23, Y+8	; 0x08
    2b18:	89 85       	ldd	r24, Y+9	; 0x09
    2b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	9e 83       	std	Y+6, r25	; 0x06
    2b26:	8d 83       	std	Y+5, r24	; 0x05
    2b28:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2c:	9a 83       	std	Y+2, r25	; 0x02
    2b2e:	89 83       	std	Y+1, r24	; 0x01
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	9a 81       	ldd	r25, Y+2	; 0x02
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <Finger_Print_Send_Command+0x202>
    2b38:	9a 83       	std	Y+2, r25	; 0x02
    2b3a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    2b3c:	a0 96       	adiw	r28, 0x20	; 32
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <Finger_Print_Enroll>:
Error_States_FB Finger_Print_Enroll(u8 FB_ID)
{
    2b4e:	0f 93       	push	r16
    2b50:	1f 93       	push	r17
    2b52:	df 93       	push	r29
    2b54:	cf 93       	push	r28
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	c2 58       	subi	r28, 0x82	; 130
    2b5c:	d0 40       	sbci	r29, 0x00	; 0
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	f8 94       	cli
    2b62:	de bf       	out	0x3e, r29	; 62
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	cd bf       	out	0x3d, r28	; 61
    2b68:	fe 01       	movw	r30, r28
    2b6a:	ee 57       	subi	r30, 0x7E	; 126
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	80 83       	st	Z, r24
	Error_States_FB Error_Status;
	u8 Gen_Image_Counter=0;
    2b70:	fe 01       	movw	r30, r28
    2b72:	e0 58       	subi	r30, 0x80	; 128
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	10 82       	st	Z, r1
	u8 IMG_2TZ_Counter=0;
    2b78:	fe 01       	movw	r30, r28
    2b7a:	e1 58       	subi	r30, 0x81	; 129
    2b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7e:	10 82       	st	Z, r1

	H_LCD_void_ClearDisplay();
    2b80:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
	H_LCD_void_sendString("Enroll New User");
    2b84:	80 e6       	ldi	r24, 0x60	; 96
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e5 58       	subi	r30, 0x85	; 133
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	90 e8       	ldi	r25, 0x80	; 128
    2b96:	ab e3       	ldi	r26, 0x3B	; 59
    2b98:	b5 e4       	ldi	r27, 0x45	; 69
    2b9a:	80 83       	st	Z, r24
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	a2 83       	std	Z+2, r26	; 0x02
    2ba0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba2:	8e 01       	movw	r16, r28
    2ba4:	09 58       	subi	r16, 0x89	; 137
    2ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e5 58       	subi	r30, 0x85	; 133
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	60 81       	ld	r22, Z
    2bb0:	71 81       	ldd	r23, Z+1	; 0x01
    2bb2:	82 81       	ldd	r24, Z+2	; 0x02
    2bb4:	93 81       	ldd	r25, Z+3	; 0x03
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	4a e7       	ldi	r20, 0x7A	; 122
    2bbc:	55 e4       	ldi	r21, 0x45	; 69
    2bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	f8 01       	movw	r30, r16
    2bc8:	80 83       	st	Z, r24
    2bca:	91 83       	std	Z+1, r25	; 0x01
    2bcc:	a2 83       	std	Z+2, r26	; 0x02
    2bce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e9 58       	subi	r30, 0x89	; 137
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	60 81       	ld	r22, Z
    2bd8:	71 81       	ldd	r23, Z+1	; 0x01
    2bda:	82 81       	ldd	r24, Z+2	; 0x02
    2bdc:	93 81       	ldd	r25, Z+3	; 0x03
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e8       	ldi	r20, 0x80	; 128
    2be4:	5f e3       	ldi	r21, 0x3F	; 63
    2be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bea:	88 23       	and	r24, r24
    2bec:	44 f4       	brge	.+16     	; 0x2bfe <Finger_Print_Enroll+0xb0>
		__ticks = 1;
    2bee:	fe 01       	movw	r30, r28
    2bf0:	eb 58       	subi	r30, 0x8B	; 139
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	91 83       	std	Z+1, r25	; 0x01
    2bfa:	80 83       	st	Z, r24
    2bfc:	64 c0       	rjmp	.+200    	; 0x2cc6 <Finger_Print_Enroll+0x178>
	else if (__tmp > 65535)
    2bfe:	fe 01       	movw	r30, r28
    2c00:	e9 58       	subi	r30, 0x89	; 137
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	60 81       	ld	r22, Z
    2c06:	71 81       	ldd	r23, Z+1	; 0x01
    2c08:	82 81       	ldd	r24, Z+2	; 0x02
    2c0a:	93 81       	ldd	r25, Z+3	; 0x03
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	3f ef       	ldi	r19, 0xFF	; 255
    2c10:	4f e7       	ldi	r20, 0x7F	; 127
    2c12:	57 e4       	ldi	r21, 0x47	; 71
    2c14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	0c f0       	brlt	.+2      	; 0x2c1e <Finger_Print_Enroll+0xd0>
    2c1c:	43 c0       	rjmp	.+134    	; 0x2ca4 <Finger_Print_Enroll+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1e:	fe 01       	movw	r30, r28
    2c20:	e5 58       	subi	r30, 0x85	; 133
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	60 81       	ld	r22, Z
    2c26:	71 81       	ldd	r23, Z+1	; 0x01
    2c28:	82 81       	ldd	r24, Z+2	; 0x02
    2c2a:	93 81       	ldd	r25, Z+3	; 0x03
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	8e 01       	movw	r16, r28
    2c3e:	0b 58       	subi	r16, 0x8B	; 139
    2c40:	1f 4f       	sbci	r17, 0xFF	; 255
    2c42:	bc 01       	movw	r22, r24
    2c44:	cd 01       	movw	r24, r26
    2c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	f8 01       	movw	r30, r16
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	80 83       	st	Z, r24
    2c54:	1f c0       	rjmp	.+62     	; 0x2c94 <Finger_Print_Enroll+0x146>
    2c56:	fe 01       	movw	r30, r28
    2c58:	ed 58       	subi	r30, 0x8D	; 141
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	80 e9       	ldi	r24, 0x90	; 144
    2c5e:	91 e0       	ldi	r25, 0x01	; 1
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	80 83       	st	Z, r24
    2c64:	fe 01       	movw	r30, r28
    2c66:	ed 58       	subi	r30, 0x8D	; 141
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	80 81       	ld	r24, Z
    2c6c:	91 81       	ldd	r25, Z+1	; 0x01
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <Finger_Print_Enroll+0x120>
    2c72:	fe 01       	movw	r30, r28
    2c74:	ed 58       	subi	r30, 0x8D	; 141
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7c:	de 01       	movw	r26, r28
    2c7e:	ab 58       	subi	r26, 0x8B	; 139
    2c80:	bf 4f       	sbci	r27, 0xFF	; 255
    2c82:	fe 01       	movw	r30, r28
    2c84:	eb 58       	subi	r30, 0x8B	; 139
    2c86:	ff 4f       	sbci	r31, 0xFF	; 255
    2c88:	80 81       	ld	r24, Z
    2c8a:	91 81       	ldd	r25, Z+1	; 0x01
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	11 96       	adiw	r26, 0x01	; 1
    2c90:	9c 93       	st	X, r25
    2c92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c94:	fe 01       	movw	r30, r28
    2c96:	eb 58       	subi	r30, 0x8B	; 139
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	91 81       	ldd	r25, Z+1	; 0x01
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	d1 f6       	brne	.-76     	; 0x2c56 <Finger_Print_Enroll+0x108>
    2ca2:	28 c0       	rjmp	.+80     	; 0x2cf4 <Finger_Print_Enroll+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca4:	8e 01       	movw	r16, r28
    2ca6:	0b 58       	subi	r16, 0x8B	; 139
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	fe 01       	movw	r30, r28
    2cac:	e9 58       	subi	r30, 0x89	; 137
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	f8 01       	movw	r30, r16
    2cc2:	91 83       	std	Z+1, r25	; 0x01
    2cc4:	80 83       	st	Z, r24
    2cc6:	de 01       	movw	r26, r28
    2cc8:	af 58       	subi	r26, 0x8F	; 143
    2cca:	bf 4f       	sbci	r27, 0xFF	; 255
    2ccc:	fe 01       	movw	r30, r28
    2cce:	eb 58       	subi	r30, 0x8B	; 139
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	80 81       	ld	r24, Z
    2cd4:	91 81       	ldd	r25, Z+1	; 0x01
    2cd6:	11 96       	adiw	r26, 0x01	; 1
    2cd8:	9c 93       	st	X, r25
    2cda:	8e 93       	st	-X, r24
    2cdc:	fe 01       	movw	r30, r28
    2cde:	ef 58       	subi	r30, 0x8F	; 143
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 81       	ld	r24, Z
    2ce4:	91 81       	ldd	r25, Z+1	; 0x01
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <Finger_Print_Enroll+0x198>
    2cea:	fe 01       	movw	r30, r28
    2cec:	ef 58       	subi	r30, 0x8F	; 143
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
	_delay_ms(3000);
	Store_Flag=0;
    2cf4:	10 92 d2 05 	sts	0x05D2, r1
	Enrollement_flag=1;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	80 93 cb 05 	sts	0x05CB, r24
    2cfe:	65 c5       	rjmp	.+2762   	; 0x37ca <Finger_Print_Enroll+0xc7c>
	while(Enrollement_flag)
	{
		Gen_Img_Flag=1;
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	80 93 cd 05 	sts	0x05CD, r24
    2d06:	0d c1       	rjmp	.+538    	; 0x2f22 <Finger_Print_Enroll+0x3d4>


		while(Gen_Img_Flag)
		{
			H_LCD_void_ClearDisplay();
    2d08:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("Check Finger!");
    2d0c:	80 e7       	ldi	r24, 0x70	; 112
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    2d14:	fe 01       	movw	r30, r28
    2d16:	e3 59       	subi	r30, 0x93	; 147
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	aa ef       	ldi	r26, 0xFA	; 250
    2d20:	b4 e4       	ldi	r27, 0x44	; 68
    2d22:	80 83       	st	Z, r24
    2d24:	91 83       	std	Z+1, r25	; 0x01
    2d26:	a2 83       	std	Z+2, r26	; 0x02
    2d28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2a:	8e 01       	movw	r16, r28
    2d2c:	07 59       	subi	r16, 0x97	; 151
    2d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d30:	fe 01       	movw	r30, r28
    2d32:	e3 59       	subi	r30, 0x93	; 147
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	60 81       	ld	r22, Z
    2d38:	71 81       	ldd	r23, Z+1	; 0x01
    2d3a:	82 81       	ldd	r24, Z+2	; 0x02
    2d3c:	93 81       	ldd	r25, Z+3	; 0x03
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	4a e7       	ldi	r20, 0x7A	; 122
    2d44:	55 e4       	ldi	r21, 0x45	; 69
    2d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	f8 01       	movw	r30, r16
    2d50:	80 83       	st	Z, r24
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	a2 83       	std	Z+2, r26	; 0x02
    2d56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e7 59       	subi	r30, 0x97	; 151
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	60 81       	ld	r22, Z
    2d60:	71 81       	ldd	r23, Z+1	; 0x01
    2d62:	82 81       	ldd	r24, Z+2	; 0x02
    2d64:	93 81       	ldd	r25, Z+3	; 0x03
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	40 e8       	ldi	r20, 0x80	; 128
    2d6c:	5f e3       	ldi	r21, 0x3F	; 63
    2d6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d72:	88 23       	and	r24, r24
    2d74:	44 f4       	brge	.+16     	; 0x2d86 <Finger_Print_Enroll+0x238>
		__ticks = 1;
    2d76:	fe 01       	movw	r30, r28
    2d78:	e9 59       	subi	r30, 0x99	; 153
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	80 83       	st	Z, r24
    2d84:	64 c0       	rjmp	.+200    	; 0x2e4e <Finger_Print_Enroll+0x300>
	else if (__tmp > 65535)
    2d86:	fe 01       	movw	r30, r28
    2d88:	e7 59       	subi	r30, 0x97	; 151
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	60 81       	ld	r22, Z
    2d8e:	71 81       	ldd	r23, Z+1	; 0x01
    2d90:	82 81       	ldd	r24, Z+2	; 0x02
    2d92:	93 81       	ldd	r25, Z+3	; 0x03
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	3f ef       	ldi	r19, 0xFF	; 255
    2d98:	4f e7       	ldi	r20, 0x7F	; 127
    2d9a:	57 e4       	ldi	r21, 0x47	; 71
    2d9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2da0:	18 16       	cp	r1, r24
    2da2:	0c f0       	brlt	.+2      	; 0x2da6 <Finger_Print_Enroll+0x258>
    2da4:	43 c0       	rjmp	.+134    	; 0x2e2c <Finger_Print_Enroll+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da6:	fe 01       	movw	r30, r28
    2da8:	e3 59       	subi	r30, 0x93	; 147
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	60 81       	ld	r22, Z
    2dae:	71 81       	ldd	r23, Z+1	; 0x01
    2db0:	82 81       	ldd	r24, Z+2	; 0x02
    2db2:	93 81       	ldd	r25, Z+3	; 0x03
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	40 e2       	ldi	r20, 0x20	; 32
    2dba:	51 e4       	ldi	r21, 0x41	; 65
    2dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	8e 01       	movw	r16, r28
    2dc6:	09 59       	subi	r16, 0x99	; 153
    2dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	f8 01       	movw	r30, r16
    2dd8:	91 83       	std	Z+1, r25	; 0x01
    2dda:	80 83       	st	Z, r24
    2ddc:	1f c0       	rjmp	.+62     	; 0x2e1c <Finger_Print_Enroll+0x2ce>
    2dde:	fe 01       	movw	r30, r28
    2de0:	eb 59       	subi	r30, 0x9B	; 155
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	80 e9       	ldi	r24, 0x90	; 144
    2de6:	91 e0       	ldi	r25, 0x01	; 1
    2de8:	91 83       	std	Z+1, r25	; 0x01
    2dea:	80 83       	st	Z, r24
    2dec:	fe 01       	movw	r30, r28
    2dee:	eb 59       	subi	r30, 0x9B	; 155
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	80 81       	ld	r24, Z
    2df4:	91 81       	ldd	r25, Z+1	; 0x01
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	f1 f7       	brne	.-4      	; 0x2df6 <Finger_Print_Enroll+0x2a8>
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	eb 59       	subi	r30, 0x9B	; 155
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	91 83       	std	Z+1, r25	; 0x01
    2e02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e04:	de 01       	movw	r26, r28
    2e06:	a9 59       	subi	r26, 0x99	; 153
    2e08:	bf 4f       	sbci	r27, 0xFF	; 255
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e9 59       	subi	r30, 0x99	; 153
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	80 81       	ld	r24, Z
    2e12:	91 81       	ldd	r25, Z+1	; 0x01
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	11 96       	adiw	r26, 0x01	; 1
    2e18:	9c 93       	st	X, r25
    2e1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	e9 59       	subi	r30, 0x99	; 153
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	80 81       	ld	r24, Z
    2e24:	91 81       	ldd	r25, Z+1	; 0x01
    2e26:	00 97       	sbiw	r24, 0x00	; 0
    2e28:	d1 f6       	brne	.-76     	; 0x2dde <Finger_Print_Enroll+0x290>
    2e2a:	27 c0       	rjmp	.+78     	; 0x2e7a <Finger_Print_Enroll+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e2c:	8e 01       	movw	r16, r28
    2e2e:	09 59       	subi	r16, 0x99	; 153
    2e30:	1f 4f       	sbci	r17, 0xFF	; 255
    2e32:	fe 01       	movw	r30, r28
    2e34:	e7 59       	subi	r30, 0x97	; 151
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	60 81       	ld	r22, Z
    2e3a:	71 81       	ldd	r23, Z+1	; 0x01
    2e3c:	82 81       	ldd	r24, Z+2	; 0x02
    2e3e:	93 81       	ldd	r25, Z+3	; 0x03
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	f8 01       	movw	r30, r16
    2e4a:	91 83       	std	Z+1, r25	; 0x01
    2e4c:	80 83       	st	Z, r24
    2e4e:	de 01       	movw	r26, r28
    2e50:	ad 59       	subi	r26, 0x9D	; 157
    2e52:	bf 4f       	sbci	r27, 0xFF	; 255
    2e54:	fe 01       	movw	r30, r28
    2e56:	e9 59       	subi	r30, 0x99	; 153
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	80 81       	ld	r24, Z
    2e5c:	91 81       	ldd	r25, Z+1	; 0x01
    2e5e:	8d 93       	st	X+, r24
    2e60:	9c 93       	st	X, r25
    2e62:	fe 01       	movw	r30, r28
    2e64:	ed 59       	subi	r30, 0x9D	; 157
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	80 81       	ld	r24, Z
    2e6a:	91 81       	ldd	r25, Z+1	; 0x01
    2e6c:	01 97       	sbiw	r24, 0x01	; 1
    2e6e:	f1 f7       	brne	.-4      	; 0x2e6c <Finger_Print_Enroll+0x31e>
    2e70:	fe 01       	movw	r30, r28
    2e72:	ed 59       	subi	r30, 0x9D	; 157
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	80 83       	st	Z, r24
			_delay_ms(2000);
			Finger_Print_Send_Command(GetImage,GEN_IMAGE_LENGTH);
    2e7a:	8c e7       	ldi	r24, 0x7C	; 124
    2e7c:	94 e0       	ldi	r25, 0x04	; 4
    2e7e:	6c e0       	ldi	r22, 0x0C	; 12
    2e80:	0e 94 99 14 	call	0x2932	; 0x2932 <Finger_Print_Send_Command>
			if(Buffer[Confirmation_Code]==Finger_Collection_Success)
    2e84:	80 91 ef 05 	lds	r24, 0x05EF
    2e88:	88 23       	and	r24, r24
    2e8a:	a9 f5       	brne	.+106    	; 0x2ef6 <Finger_Print_Enroll+0x3a8>
			{
				if(Gen_Image_Counter==0)
    2e8c:	fe 01       	movw	r30, r28
    2e8e:	e0 58       	subi	r30, 0x80	; 128
    2e90:	ff 4f       	sbci	r31, 0xFF	; 255
    2e92:	80 81       	ld	r24, Z
    2e94:	88 23       	and	r24, r24
    2e96:	b9 f4       	brne	.+46     	; 0x2ec6 <Finger_Print_Enroll+0x378>
				{
					H_LCD_void_ClearDisplay();
    2e98:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
					H_LCD_void_sendString("Check 1 done");
    2e9c:	8e e7       	ldi	r24, 0x7E	; 126
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
					Gen_Image_Counter++;
    2ea4:	de 01       	movw	r26, r28
    2ea6:	a0 58       	subi	r26, 0x80	; 128
    2ea8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e0 58       	subi	r30, 0x80	; 128
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	80 81       	ld	r24, Z
    2eb2:	8f 5f       	subi	r24, 0xFF	; 255
    2eb4:	8c 93       	st	X, r24
					Flush_Buffer();
    2eb6:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
					Img_2_TZ_Flag=1;
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	80 93 cf 05 	sts	0x05CF, r24
					//_delay_ms(1000);
					Gen_Img_Flag=0;
    2ec0:	10 92 cd 05 	sts	0x05CD, r1
    2ec4:	54 c3       	rjmp	.+1704   	; 0x356e <Finger_Print_Enroll+0xa20>
					break;
				}
				else if(Gen_Image_Counter==1)
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e0 58       	subi	r30, 0x80	; 128
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	80 81       	ld	r24, Z
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	41 f5       	brne	.+80     	; 0x2f22 <Finger_Print_Enroll+0x3d4>
				{
					H_LCD_void_ClearDisplay();
    2ed2:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
					H_LCD_void_sendString("Check 2 done");
    2ed6:	8b e8       	ldi	r24, 0x8B	; 139
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
					Flush_Buffer();
    2ede:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
					Img_2_TZ_Flag=1;
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	80 93 cf 05 	sts	0x05CF, r24
					//_delay_ms(1000);
					Gen_Img_Flag=0;
    2ee8:	10 92 cd 05 	sts	0x05CD, r1
					Gen_Image_Counter=0;
    2eec:	fe 01       	movw	r30, r28
    2eee:	e0 58       	subi	r30, 0x80	; 128
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	10 82       	st	Z, r1
    2ef4:	3c c3       	rjmp	.+1656   	; 0x356e <Finger_Print_Enroll+0xa20>
				//_delay_ms(1000);
				Gen_Img_Flag=0;
				break;
				*/
			}
			else if(Buffer[Confirmation_Code]==Error_When_Receiving_Package_Gen)
    2ef6:	80 91 ef 05 	lds	r24, 0x05EF
    2efa:	81 30       	cpi	r24, 0x01	; 1
    2efc:	19 f4       	brne	.+6      	; 0x2f04 <Finger_Print_Enroll+0x3b6>
			{
				Flush_Buffer();
    2efe:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    2f02:	0f c0       	rjmp	.+30     	; 0x2f22 <Finger_Print_Enroll+0x3d4>
			}
			else if(Buffer[Confirmation_Code]==Can_not_detect_finger)
    2f04:	80 91 ef 05 	lds	r24, 0x05EF
    2f08:	82 30       	cpi	r24, 0x02	; 2
    2f0a:	49 f4       	brne	.+18     	; 0x2f1e <Finger_Print_Enroll+0x3d0>
			{
				H_LCD_void_ClearDisplay();
    2f0c:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("Check Finger again");
    2f10:	88 e9       	ldi	r24, 0x98	; 152
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
				Flush_Buffer();
    2f18:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    2f1c:	02 c0       	rjmp	.+4      	; 0x2f22 <Finger_Print_Enroll+0x3d4>
			}
			else
			{
				Flush_Buffer();
    2f1e:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
	while(Enrollement_flag)
	{
		Gen_Img_Flag=1;


		while(Gen_Img_Flag)
    2f22:	80 91 cd 05 	lds	r24, 0x05CD
    2f26:	88 23       	and	r24, r24
    2f28:	09 f0       	breq	.+2      	; 0x2f2c <Finger_Print_Enroll+0x3de>
    2f2a:	ee ce       	rjmp	.-548    	; 0x2d08 <Finger_Print_Enroll+0x1ba>
    2f2c:	20 c3       	rjmp	.+1600   	; 0x356e <Finger_Print_Enroll+0xa20>
		}


		while(Img_2_TZ_Flag)
		{
			if(IMG_2TZ_Counter==0)
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e1 58       	subi	r30, 0x81	; 129
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	80 81       	ld	r24, Z
    2f36:	88 23       	and	r24, r24
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <Finger_Print_Enroll+0x3ee>
    2f3a:	10 c2       	rjmp	.+1056   	; 0x335c <Finger_Print_Enroll+0x80e>
			{
				Finger_Print_Send_Command(Img2TZ_1,IMAGE_2TZ_1_LENGTH);
    2f3c:	88 e8       	ldi	r24, 0x88	; 136
    2f3e:	94 e0       	ldi	r25, 0x04	; 4
    2f40:	6d e0       	ldi	r22, 0x0D	; 13
    2f42:	0e 94 99 14 	call	0x2932	; 0x2932 <Finger_Print_Send_Command>
				if(Buffer[Confirmation_Code]==Generate_character_file_complete)
    2f46:	80 91 ef 05 	lds	r24, 0x05EF
    2f4a:	88 23       	and	r24, r24
    2f4c:	09 f0       	breq	.+2      	; 0x2f50 <Finger_Print_Enroll+0x402>
    2f4e:	7e c1       	rjmp	.+764    	; 0x324c <Finger_Print_Enroll+0x6fe>
				{
					H_LCD_void_ClearDisplay();
    2f50:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
					H_LCD_void_sendString("Buffer1 done");
    2f54:	8b ea       	ldi	r24, 0xAB	; 171
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	e1 5a       	subi	r30, 0xA1	; 161
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	aa e7       	ldi	r26, 0x7A	; 122
    2f68:	b4 e4       	ldi	r27, 0x44	; 68
    2f6a:	80 83       	st	Z, r24
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	a2 83       	std	Z+2, r26	; 0x02
    2f70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f72:	8e 01       	movw	r16, r28
    2f74:	05 5a       	subi	r16, 0xA5	; 165
    2f76:	1f 4f       	sbci	r17, 0xFF	; 255
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e1 5a       	subi	r30, 0xA1	; 161
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	60 81       	ld	r22, Z
    2f80:	71 81       	ldd	r23, Z+1	; 0x01
    2f82:	82 81       	ldd	r24, Z+2	; 0x02
    2f84:	93 81       	ldd	r25, Z+3	; 0x03
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	4a e7       	ldi	r20, 0x7A	; 122
    2f8c:	55 e4       	ldi	r21, 0x45	; 69
    2f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	f8 01       	movw	r30, r16
    2f98:	80 83       	st	Z, r24
    2f9a:	91 83       	std	Z+1, r25	; 0x01
    2f9c:	a2 83       	std	Z+2, r26	; 0x02
    2f9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fa0:	fe 01       	movw	r30, r28
    2fa2:	e5 5a       	subi	r30, 0xA5	; 165
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	60 81       	ld	r22, Z
    2fa8:	71 81       	ldd	r23, Z+1	; 0x01
    2faa:	82 81       	ldd	r24, Z+2	; 0x02
    2fac:	93 81       	ldd	r25, Z+3	; 0x03
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e8       	ldi	r20, 0x80	; 128
    2fb4:	5f e3       	ldi	r21, 0x3F	; 63
    2fb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fba:	88 23       	and	r24, r24
    2fbc:	44 f4       	brge	.+16     	; 0x2fce <Finger_Print_Enroll+0x480>
		__ticks = 1;
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	e7 5a       	subi	r30, 0xA7	; 167
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	91 83       	std	Z+1, r25	; 0x01
    2fca:	80 83       	st	Z, r24
    2fcc:	64 c0       	rjmp	.+200    	; 0x3096 <Finger_Print_Enroll+0x548>
	else if (__tmp > 65535)
    2fce:	fe 01       	movw	r30, r28
    2fd0:	e5 5a       	subi	r30, 0xA5	; 165
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	60 81       	ld	r22, Z
    2fd6:	71 81       	ldd	r23, Z+1	; 0x01
    2fd8:	82 81       	ldd	r24, Z+2	; 0x02
    2fda:	93 81       	ldd	r25, Z+3	; 0x03
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	3f ef       	ldi	r19, 0xFF	; 255
    2fe0:	4f e7       	ldi	r20, 0x7F	; 127
    2fe2:	57 e4       	ldi	r21, 0x47	; 71
    2fe4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe8:	18 16       	cp	r1, r24
    2fea:	0c f0       	brlt	.+2      	; 0x2fee <Finger_Print_Enroll+0x4a0>
    2fec:	43 c0       	rjmp	.+134    	; 0x3074 <Finger_Print_Enroll+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fee:	fe 01       	movw	r30, r28
    2ff0:	e1 5a       	subi	r30, 0xA1	; 161
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	60 81       	ld	r22, Z
    2ff6:	71 81       	ldd	r23, Z+1	; 0x01
    2ff8:	82 81       	ldd	r24, Z+2	; 0x02
    2ffa:	93 81       	ldd	r25, Z+3	; 0x03
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e2       	ldi	r20, 0x20	; 32
    3002:	51 e4       	ldi	r21, 0x41	; 65
    3004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	8e 01       	movw	r16, r28
    300e:	07 5a       	subi	r16, 0xA7	; 167
    3010:	1f 4f       	sbci	r17, 0xFF	; 255
    3012:	bc 01       	movw	r22, r24
    3014:	cd 01       	movw	r24, r26
    3016:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	f8 01       	movw	r30, r16
    3020:	91 83       	std	Z+1, r25	; 0x01
    3022:	80 83       	st	Z, r24
    3024:	1f c0       	rjmp	.+62     	; 0x3064 <Finger_Print_Enroll+0x516>
    3026:	fe 01       	movw	r30, r28
    3028:	e9 5a       	subi	r30, 0xA9	; 169
    302a:	ff 4f       	sbci	r31, 0xFF	; 255
    302c:	80 e9       	ldi	r24, 0x90	; 144
    302e:	91 e0       	ldi	r25, 0x01	; 1
    3030:	91 83       	std	Z+1, r25	; 0x01
    3032:	80 83       	st	Z, r24
    3034:	fe 01       	movw	r30, r28
    3036:	e9 5a       	subi	r30, 0xA9	; 169
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	80 81       	ld	r24, Z
    303c:	91 81       	ldd	r25, Z+1	; 0x01
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <Finger_Print_Enroll+0x4f0>
    3042:	fe 01       	movw	r30, r28
    3044:	e9 5a       	subi	r30, 0xA9	; 169
    3046:	ff 4f       	sbci	r31, 0xFF	; 255
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304c:	de 01       	movw	r26, r28
    304e:	a7 5a       	subi	r26, 0xA7	; 167
    3050:	bf 4f       	sbci	r27, 0xFF	; 255
    3052:	fe 01       	movw	r30, r28
    3054:	e7 5a       	subi	r30, 0xA7	; 167
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	80 81       	ld	r24, Z
    305a:	91 81       	ldd	r25, Z+1	; 0x01
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	11 96       	adiw	r26, 0x01	; 1
    3060:	9c 93       	st	X, r25
    3062:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3064:	fe 01       	movw	r30, r28
    3066:	e7 5a       	subi	r30, 0xA7	; 167
    3068:	ff 4f       	sbci	r31, 0xFF	; 255
    306a:	80 81       	ld	r24, Z
    306c:	91 81       	ldd	r25, Z+1	; 0x01
    306e:	00 97       	sbiw	r24, 0x00	; 0
    3070:	d1 f6       	brne	.-76     	; 0x3026 <Finger_Print_Enroll+0x4d8>
    3072:	27 c0       	rjmp	.+78     	; 0x30c2 <Finger_Print_Enroll+0x574>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3074:	8e 01       	movw	r16, r28
    3076:	07 5a       	subi	r16, 0xA7	; 167
    3078:	1f 4f       	sbci	r17, 0xFF	; 255
    307a:	fe 01       	movw	r30, r28
    307c:	e5 5a       	subi	r30, 0xA5	; 165
    307e:	ff 4f       	sbci	r31, 0xFF	; 255
    3080:	60 81       	ld	r22, Z
    3082:	71 81       	ldd	r23, Z+1	; 0x01
    3084:	82 81       	ldd	r24, Z+2	; 0x02
    3086:	93 81       	ldd	r25, Z+3	; 0x03
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	f8 01       	movw	r30, r16
    3092:	91 83       	std	Z+1, r25	; 0x01
    3094:	80 83       	st	Z, r24
    3096:	de 01       	movw	r26, r28
    3098:	ab 5a       	subi	r26, 0xAB	; 171
    309a:	bf 4f       	sbci	r27, 0xFF	; 255
    309c:	fe 01       	movw	r30, r28
    309e:	e7 5a       	subi	r30, 0xA7	; 167
    30a0:	ff 4f       	sbci	r31, 0xFF	; 255
    30a2:	80 81       	ld	r24, Z
    30a4:	91 81       	ldd	r25, Z+1	; 0x01
    30a6:	8d 93       	st	X+, r24
    30a8:	9c 93       	st	X, r25
    30aa:	fe 01       	movw	r30, r28
    30ac:	eb 5a       	subi	r30, 0xAB	; 171
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	80 81       	ld	r24, Z
    30b2:	91 81       	ldd	r25, Z+1	; 0x01
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	f1 f7       	brne	.-4      	; 0x30b4 <Finger_Print_Enroll+0x566>
    30b8:	fe 01       	movw	r30, r28
    30ba:	eb 5a       	subi	r30, 0xAB	; 171
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	80 83       	st	Z, r24
					_delay_ms(1000);

					Flush_Buffer();
    30c2:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
					Gen_Img_Flag=1;
    30c6:	81 e0       	ldi	r24, 0x01	; 1
    30c8:	80 93 cd 05 	sts	0x05CD, r24
					IMG_2TZ_Counter++;
    30cc:	de 01       	movw	r26, r28
    30ce:	a1 58       	subi	r26, 0x81	; 129
    30d0:	bf 4f       	sbci	r27, 0xFF	; 255
    30d2:	fe 01       	movw	r30, r28
    30d4:	e1 58       	subi	r30, 0x81	; 129
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	80 81       	ld	r24, Z
    30da:	8f 5f       	subi	r24, 0xFF	; 255
    30dc:	8c 93       	st	X, r24
    30de:	fe 01       	movw	r30, r28
    30e0:	ef 5a       	subi	r30, 0xAF	; 175
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	aa ef       	ldi	r26, 0xFA	; 250
    30ea:	b3 e4       	ldi	r27, 0x43	; 67
    30ec:	80 83       	st	Z, r24
    30ee:	91 83       	std	Z+1, r25	; 0x01
    30f0:	a2 83       	std	Z+2, r26	; 0x02
    30f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f4:	8e 01       	movw	r16, r28
    30f6:	03 5b       	subi	r16, 0xB3	; 179
    30f8:	1f 4f       	sbci	r17, 0xFF	; 255
    30fa:	fe 01       	movw	r30, r28
    30fc:	ef 5a       	subi	r30, 0xAF	; 175
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	60 81       	ld	r22, Z
    3102:	71 81       	ldd	r23, Z+1	; 0x01
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	93 81       	ldd	r25, Z+3	; 0x03
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	4a e7       	ldi	r20, 0x7A	; 122
    310e:	55 e4       	ldi	r21, 0x45	; 69
    3110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	f8 01       	movw	r30, r16
    311a:	80 83       	st	Z, r24
    311c:	91 83       	std	Z+1, r25	; 0x01
    311e:	a2 83       	std	Z+2, r26	; 0x02
    3120:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3122:	fe 01       	movw	r30, r28
    3124:	e3 5b       	subi	r30, 0xB3	; 179
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	60 81       	ld	r22, Z
    312a:	71 81       	ldd	r23, Z+1	; 0x01
    312c:	82 81       	ldd	r24, Z+2	; 0x02
    312e:	93 81       	ldd	r25, Z+3	; 0x03
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e8       	ldi	r20, 0x80	; 128
    3136:	5f e3       	ldi	r21, 0x3F	; 63
    3138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    313c:	88 23       	and	r24, r24
    313e:	44 f4       	brge	.+16     	; 0x3150 <Finger_Print_Enroll+0x602>
		__ticks = 1;
    3140:	fe 01       	movw	r30, r28
    3142:	e5 5b       	subi	r30, 0xB5	; 181
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	91 83       	std	Z+1, r25	; 0x01
    314c:	80 83       	st	Z, r24
    314e:	64 c0       	rjmp	.+200    	; 0x3218 <Finger_Print_Enroll+0x6ca>
	else if (__tmp > 65535)
    3150:	fe 01       	movw	r30, r28
    3152:	e3 5b       	subi	r30, 0xB3	; 179
    3154:	ff 4f       	sbci	r31, 0xFF	; 255
    3156:	60 81       	ld	r22, Z
    3158:	71 81       	ldd	r23, Z+1	; 0x01
    315a:	82 81       	ldd	r24, Z+2	; 0x02
    315c:	93 81       	ldd	r25, Z+3	; 0x03
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	3f ef       	ldi	r19, 0xFF	; 255
    3162:	4f e7       	ldi	r20, 0x7F	; 127
    3164:	57 e4       	ldi	r21, 0x47	; 71
    3166:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    316a:	18 16       	cp	r1, r24
    316c:	0c f0       	brlt	.+2      	; 0x3170 <Finger_Print_Enroll+0x622>
    316e:	43 c0       	rjmp	.+134    	; 0x31f6 <Finger_Print_Enroll+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3170:	fe 01       	movw	r30, r28
    3172:	ef 5a       	subi	r30, 0xAF	; 175
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	60 81       	ld	r22, Z
    3178:	71 81       	ldd	r23, Z+1	; 0x01
    317a:	82 81       	ldd	r24, Z+2	; 0x02
    317c:	93 81       	ldd	r25, Z+3	; 0x03
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	40 e2       	ldi	r20, 0x20	; 32
    3184:	51 e4       	ldi	r21, 0x41	; 65
    3186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	8e 01       	movw	r16, r28
    3190:	05 5b       	subi	r16, 0xB5	; 181
    3192:	1f 4f       	sbci	r17, 0xFF	; 255
    3194:	bc 01       	movw	r22, r24
    3196:	cd 01       	movw	r24, r26
    3198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	f8 01       	movw	r30, r16
    31a2:	91 83       	std	Z+1, r25	; 0x01
    31a4:	80 83       	st	Z, r24
    31a6:	1f c0       	rjmp	.+62     	; 0x31e6 <Finger_Print_Enroll+0x698>
    31a8:	fe 01       	movw	r30, r28
    31aa:	e7 5b       	subi	r30, 0xB7	; 183
    31ac:	ff 4f       	sbci	r31, 0xFF	; 255
    31ae:	80 e9       	ldi	r24, 0x90	; 144
    31b0:	91 e0       	ldi	r25, 0x01	; 1
    31b2:	91 83       	std	Z+1, r25	; 0x01
    31b4:	80 83       	st	Z, r24
    31b6:	fe 01       	movw	r30, r28
    31b8:	e7 5b       	subi	r30, 0xB7	; 183
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 81       	ld	r24, Z
    31be:	91 81       	ldd	r25, Z+1	; 0x01
    31c0:	01 97       	sbiw	r24, 0x01	; 1
    31c2:	f1 f7       	brne	.-4      	; 0x31c0 <Finger_Print_Enroll+0x672>
    31c4:	fe 01       	movw	r30, r28
    31c6:	e7 5b       	subi	r30, 0xB7	; 183
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	91 83       	std	Z+1, r25	; 0x01
    31cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ce:	de 01       	movw	r26, r28
    31d0:	a5 5b       	subi	r26, 0xB5	; 181
    31d2:	bf 4f       	sbci	r27, 0xFF	; 255
    31d4:	fe 01       	movw	r30, r28
    31d6:	e5 5b       	subi	r30, 0xB5	; 181
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	80 81       	ld	r24, Z
    31dc:	91 81       	ldd	r25, Z+1	; 0x01
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	11 96       	adiw	r26, 0x01	; 1
    31e2:	9c 93       	st	X, r25
    31e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e6:	fe 01       	movw	r30, r28
    31e8:	e5 5b       	subi	r30, 0xB5	; 181
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	80 81       	ld	r24, Z
    31ee:	91 81       	ldd	r25, Z+1	; 0x01
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	d1 f6       	brne	.-76     	; 0x31a8 <Finger_Print_Enroll+0x65a>
    31f4:	28 c0       	rjmp	.+80     	; 0x3246 <Finger_Print_Enroll+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31f6:	8e 01       	movw	r16, r28
    31f8:	05 5b       	subi	r16, 0xB5	; 181
    31fa:	1f 4f       	sbci	r17, 0xFF	; 255
    31fc:	fe 01       	movw	r30, r28
    31fe:	e3 5b       	subi	r30, 0xB3	; 179
    3200:	ff 4f       	sbci	r31, 0xFF	; 255
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	82 81       	ldd	r24, Z+2	; 0x02
    3208:	93 81       	ldd	r25, Z+3	; 0x03
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	f8 01       	movw	r30, r16
    3214:	91 83       	std	Z+1, r25	; 0x01
    3216:	80 83       	st	Z, r24
    3218:	de 01       	movw	r26, r28
    321a:	a9 5b       	subi	r26, 0xB9	; 185
    321c:	bf 4f       	sbci	r27, 0xFF	; 255
    321e:	fe 01       	movw	r30, r28
    3220:	e5 5b       	subi	r30, 0xB5	; 181
    3222:	ff 4f       	sbci	r31, 0xFF	; 255
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	11 96       	adiw	r26, 0x01	; 1
    322a:	9c 93       	st	X, r25
    322c:	8e 93       	st	-X, r24
    322e:	fe 01       	movw	r30, r28
    3230:	e9 5b       	subi	r30, 0xB9	; 185
    3232:	ff 4f       	sbci	r31, 0xFF	; 255
    3234:	80 81       	ld	r24, Z
    3236:	91 81       	ldd	r25, Z+1	; 0x01
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	f1 f7       	brne	.-4      	; 0x3238 <Finger_Print_Enroll+0x6ea>
    323c:	fe 01       	movw	r30, r28
    323e:	e9 5b       	subi	r30, 0xB9	; 185
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	91 83       	std	Z+1, r25	; 0x01
    3244:	80 83       	st	Z, r24
					_delay_ms(500);
					Img_2_TZ_Flag=0;
    3246:	10 92 cf 05 	sts	0x05CF, r1
    324a:	23 c2       	rjmp	.+1094   	; 0x3692 <Finger_Print_Enroll+0xb44>
					break;
				}
				else
				{
					Flush_Buffer();
    324c:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    3250:	fe 01       	movw	r30, r28
    3252:	ed 5b       	subi	r30, 0xBD	; 189
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	aa e7       	ldi	r26, 0x7A	; 122
    325c:	b3 e4       	ldi	r27, 0x43	; 67
    325e:	80 83       	st	Z, r24
    3260:	91 83       	std	Z+1, r25	; 0x01
    3262:	a2 83       	std	Z+2, r26	; 0x02
    3264:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3266:	8e 01       	movw	r16, r28
    3268:	01 5c       	subi	r16, 0xC1	; 193
    326a:	1f 4f       	sbci	r17, 0xFF	; 255
    326c:	fe 01       	movw	r30, r28
    326e:	ed 5b       	subi	r30, 0xBD	; 189
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	60 81       	ld	r22, Z
    3274:	71 81       	ldd	r23, Z+1	; 0x01
    3276:	82 81       	ldd	r24, Z+2	; 0x02
    3278:	93 81       	ldd	r25, Z+3	; 0x03
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	4a e7       	ldi	r20, 0x7A	; 122
    3280:	55 e4       	ldi	r21, 0x45	; 69
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	f8 01       	movw	r30, r16
    328c:	80 83       	st	Z, r24
    328e:	91 83       	std	Z+1, r25	; 0x01
    3290:	a2 83       	std	Z+2, r26	; 0x02
    3292:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3294:	fe 01       	movw	r30, r28
    3296:	ff 96       	adiw	r30, 0x3f	; 63
    3298:	60 81       	ld	r22, Z
    329a:	71 81       	ldd	r23, Z+1	; 0x01
    329c:	82 81       	ldd	r24, Z+2	; 0x02
    329e:	93 81       	ldd	r25, Z+3	; 0x03
    32a0:	20 e0       	ldi	r18, 0x00	; 0
    32a2:	30 e0       	ldi	r19, 0x00	; 0
    32a4:	40 e8       	ldi	r20, 0x80	; 128
    32a6:	5f e3       	ldi	r21, 0x3F	; 63
    32a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32ac:	88 23       	and	r24, r24
    32ae:	2c f4       	brge	.+10     	; 0x32ba <Finger_Print_Enroll+0x76c>
		__ticks = 1;
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	9e af       	std	Y+62, r25	; 0x3e
    32b6:	8d af       	std	Y+61, r24	; 0x3d
    32b8:	46 c0       	rjmp	.+140    	; 0x3346 <Finger_Print_Enroll+0x7f8>
	else if (__tmp > 65535)
    32ba:	fe 01       	movw	r30, r28
    32bc:	ff 96       	adiw	r30, 0x3f	; 63
    32be:	60 81       	ld	r22, Z
    32c0:	71 81       	ldd	r23, Z+1	; 0x01
    32c2:	82 81       	ldd	r24, Z+2	; 0x02
    32c4:	93 81       	ldd	r25, Z+3	; 0x03
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	3f ef       	ldi	r19, 0xFF	; 255
    32ca:	4f e7       	ldi	r20, 0x7F	; 127
    32cc:	57 e4       	ldi	r21, 0x47	; 71
    32ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d2:	18 16       	cp	r1, r24
    32d4:	64 f5       	brge	.+88     	; 0x332e <Finger_Print_Enroll+0x7e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32d6:	fe 01       	movw	r30, r28
    32d8:	ed 5b       	subi	r30, 0xBD	; 189
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	60 81       	ld	r22, Z
    32de:	71 81       	ldd	r23, Z+1	; 0x01
    32e0:	82 81       	ldd	r24, Z+2	; 0x02
    32e2:	93 81       	ldd	r25, Z+3	; 0x03
    32e4:	20 e0       	ldi	r18, 0x00	; 0
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	40 e2       	ldi	r20, 0x20	; 32
    32ea:	51 e4       	ldi	r21, 0x41	; 65
    32ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	bc 01       	movw	r22, r24
    32f6:	cd 01       	movw	r24, r26
    32f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32fc:	dc 01       	movw	r26, r24
    32fe:	cb 01       	movw	r24, r22
    3300:	9e af       	std	Y+62, r25	; 0x3e
    3302:	8d af       	std	Y+61, r24	; 0x3d
    3304:	0f c0       	rjmp	.+30     	; 0x3324 <Finger_Print_Enroll+0x7d6>
    3306:	80 e9       	ldi	r24, 0x90	; 144
    3308:	91 e0       	ldi	r25, 0x01	; 1
    330a:	9c af       	std	Y+60, r25	; 0x3c
    330c:	8b af       	std	Y+59, r24	; 0x3b
    330e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3310:	9c ad       	ldd	r25, Y+60	; 0x3c
    3312:	01 97       	sbiw	r24, 0x01	; 1
    3314:	f1 f7       	brne	.-4      	; 0x3312 <Finger_Print_Enroll+0x7c4>
    3316:	9c af       	std	Y+60, r25	; 0x3c
    3318:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    331a:	8d ad       	ldd	r24, Y+61	; 0x3d
    331c:	9e ad       	ldd	r25, Y+62	; 0x3e
    331e:	01 97       	sbiw	r24, 0x01	; 1
    3320:	9e af       	std	Y+62, r25	; 0x3e
    3322:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3324:	8d ad       	ldd	r24, Y+61	; 0x3d
    3326:	9e ad       	ldd	r25, Y+62	; 0x3e
    3328:	00 97       	sbiw	r24, 0x00	; 0
    332a:	69 f7       	brne	.-38     	; 0x3306 <Finger_Print_Enroll+0x7b8>
    332c:	20 c1       	rjmp	.+576    	; 0x356e <Finger_Print_Enroll+0xa20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    332e:	fe 01       	movw	r30, r28
    3330:	ff 96       	adiw	r30, 0x3f	; 63
    3332:	60 81       	ld	r22, Z
    3334:	71 81       	ldd	r23, Z+1	; 0x01
    3336:	82 81       	ldd	r24, Z+2	; 0x02
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	9e af       	std	Y+62, r25	; 0x3e
    3344:	8d af       	std	Y+61, r24	; 0x3d
    3346:	8d ad       	ldd	r24, Y+61	; 0x3d
    3348:	9e ad       	ldd	r25, Y+62	; 0x3e
    334a:	9a af       	std	Y+58, r25	; 0x3a
    334c:	89 af       	std	Y+57, r24	; 0x39
    334e:	89 ad       	ldd	r24, Y+57	; 0x39
    3350:	9a ad       	ldd	r25, Y+58	; 0x3a
    3352:	01 97       	sbiw	r24, 0x01	; 1
    3354:	f1 f7       	brne	.-4      	; 0x3352 <Finger_Print_Enroll+0x804>
    3356:	9a af       	std	Y+58, r25	; 0x3a
    3358:	89 af       	std	Y+57, r24	; 0x39
    335a:	09 c1       	rjmp	.+530    	; 0x356e <Finger_Print_Enroll+0xa20>
					_delay_ms(250);
				}
		}
			else if(IMG_2TZ_Counter==1)
    335c:	fe 01       	movw	r30, r28
    335e:	e1 58       	subi	r30, 0x81	; 129
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	80 81       	ld	r24, Z
    3364:	81 30       	cpi	r24, 0x01	; 1
    3366:	09 f0       	breq	.+2      	; 0x336a <Finger_Print_Enroll+0x81c>
    3368:	02 c1       	rjmp	.+516    	; 0x356e <Finger_Print_Enroll+0xa20>
			{
				Finger_Print_Send_Command(Img2TZ_2,IMAGE_2TZ_2_LENGTH);
    336a:	85 e9       	ldi	r24, 0x95	; 149
    336c:	94 e0       	ldi	r25, 0x04	; 4
    336e:	6d e0       	ldi	r22, 0x0D	; 13
    3370:	0e 94 99 14 	call	0x2932	; 0x2932 <Finger_Print_Send_Command>
				if(Buffer[Confirmation_Code]==Generate_character_file_complete)
    3374:	80 91 ef 05 	lds	r24, 0x05EF
    3378:	88 23       	and	r24, r24
    337a:	09 f0       	breq	.+2      	; 0x337e <Finger_Print_Enroll+0x830>
    337c:	f6 c0       	rjmp	.+492    	; 0x356a <Finger_Print_Enroll+0xa1c>
				{
					H_LCD_void_ClearDisplay();
    337e:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
					H_LCD_void_sendString("Buffer2 done");
    3382:	88 eb       	ldi	r24, 0xB8	; 184
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	90 e0       	ldi	r25, 0x00	; 0
    338e:	aa e7       	ldi	r26, 0x7A	; 122
    3390:	b4 e4       	ldi	r27, 0x44	; 68
    3392:	8d ab       	std	Y+53, r24	; 0x35
    3394:	9e ab       	std	Y+54, r25	; 0x36
    3396:	af ab       	std	Y+55, r26	; 0x37
    3398:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    339a:	6d a9       	ldd	r22, Y+53	; 0x35
    339c:	7e a9       	ldd	r23, Y+54	; 0x36
    339e:	8f a9       	ldd	r24, Y+55	; 0x37
    33a0:	98 ad       	ldd	r25, Y+56	; 0x38
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	4a e7       	ldi	r20, 0x7A	; 122
    33a8:	55 e4       	ldi	r21, 0x45	; 69
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	89 ab       	std	Y+49, r24	; 0x31
    33b4:	9a ab       	std	Y+50, r25	; 0x32
    33b6:	ab ab       	std	Y+51, r26	; 0x33
    33b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    33ba:	69 a9       	ldd	r22, Y+49	; 0x31
    33bc:	7a a9       	ldd	r23, Y+50	; 0x32
    33be:	8b a9       	ldd	r24, Y+51	; 0x33
    33c0:	9c a9       	ldd	r25, Y+52	; 0x34
    33c2:	20 e0       	ldi	r18, 0x00	; 0
    33c4:	30 e0       	ldi	r19, 0x00	; 0
    33c6:	40 e8       	ldi	r20, 0x80	; 128
    33c8:	5f e3       	ldi	r21, 0x3F	; 63
    33ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ce:	88 23       	and	r24, r24
    33d0:	2c f4       	brge	.+10     	; 0x33dc <Finger_Print_Enroll+0x88e>
		__ticks = 1;
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	98 ab       	std	Y+48, r25	; 0x30
    33d8:	8f a7       	std	Y+47, r24	; 0x2f
    33da:	3f c0       	rjmp	.+126    	; 0x345a <Finger_Print_Enroll+0x90c>
	else if (__tmp > 65535)
    33dc:	69 a9       	ldd	r22, Y+49	; 0x31
    33de:	7a a9       	ldd	r23, Y+50	; 0x32
    33e0:	8b a9       	ldd	r24, Y+51	; 0x33
    33e2:	9c a9       	ldd	r25, Y+52	; 0x34
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	3f ef       	ldi	r19, 0xFF	; 255
    33e8:	4f e7       	ldi	r20, 0x7F	; 127
    33ea:	57 e4       	ldi	r21, 0x47	; 71
    33ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33f0:	18 16       	cp	r1, r24
    33f2:	4c f5       	brge	.+82     	; 0x3446 <Finger_Print_Enroll+0x8f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33f4:	6d a9       	ldd	r22, Y+53	; 0x35
    33f6:	7e a9       	ldd	r23, Y+54	; 0x36
    33f8:	8f a9       	ldd	r24, Y+55	; 0x37
    33fa:	98 ad       	ldd	r25, Y+56	; 0x38
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e2       	ldi	r20, 0x20	; 32
    3402:	51 e4       	ldi	r21, 0x41	; 65
    3404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	bc 01       	movw	r22, r24
    340e:	cd 01       	movw	r24, r26
    3410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	98 ab       	std	Y+48, r25	; 0x30
    341a:	8f a7       	std	Y+47, r24	; 0x2f
    341c:	0f c0       	rjmp	.+30     	; 0x343c <Finger_Print_Enroll+0x8ee>
    341e:	80 e9       	ldi	r24, 0x90	; 144
    3420:	91 e0       	ldi	r25, 0x01	; 1
    3422:	9e a7       	std	Y+46, r25	; 0x2e
    3424:	8d a7       	std	Y+45, r24	; 0x2d
    3426:	8d a5       	ldd	r24, Y+45	; 0x2d
    3428:	9e a5       	ldd	r25, Y+46	; 0x2e
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	f1 f7       	brne	.-4      	; 0x342a <Finger_Print_Enroll+0x8dc>
    342e:	9e a7       	std	Y+46, r25	; 0x2e
    3430:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3432:	8f a5       	ldd	r24, Y+47	; 0x2f
    3434:	98 a9       	ldd	r25, Y+48	; 0x30
    3436:	01 97       	sbiw	r24, 0x01	; 1
    3438:	98 ab       	std	Y+48, r25	; 0x30
    343a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    343c:	8f a5       	ldd	r24, Y+47	; 0x2f
    343e:	98 a9       	ldd	r25, Y+48	; 0x30
    3440:	00 97       	sbiw	r24, 0x00	; 0
    3442:	69 f7       	brne	.-38     	; 0x341e <Finger_Print_Enroll+0x8d0>
    3444:	14 c0       	rjmp	.+40     	; 0x346e <Finger_Print_Enroll+0x920>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3446:	69 a9       	ldd	r22, Y+49	; 0x31
    3448:	7a a9       	ldd	r23, Y+50	; 0x32
    344a:	8b a9       	ldd	r24, Y+51	; 0x33
    344c:	9c a9       	ldd	r25, Y+52	; 0x34
    344e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	98 ab       	std	Y+48, r25	; 0x30
    3458:	8f a7       	std	Y+47, r24	; 0x2f
    345a:	8f a5       	ldd	r24, Y+47	; 0x2f
    345c:	98 a9       	ldd	r25, Y+48	; 0x30
    345e:	9c a7       	std	Y+44, r25	; 0x2c
    3460:	8b a7       	std	Y+43, r24	; 0x2b
    3462:	8b a5       	ldd	r24, Y+43	; 0x2b
    3464:	9c a5       	ldd	r25, Y+44	; 0x2c
    3466:	01 97       	sbiw	r24, 0x01	; 1
    3468:	f1 f7       	brne	.-4      	; 0x3466 <Finger_Print_Enroll+0x918>
    346a:	9c a7       	std	Y+44, r25	; 0x2c
    346c:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);

					Flush_Buffer();
    346e:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
					Reg_Model_Flag=1;
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	80 93 d1 05 	sts	0x05D1, r24
					IMG_2TZ_Counter=0;
    3478:	fe 01       	movw	r30, r28
    347a:	e1 58       	subi	r30, 0x81	; 129
    347c:	ff 4f       	sbci	r31, 0xFF	; 255
    347e:	10 82       	st	Z, r1
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	aa ef       	ldi	r26, 0xFA	; 250
    3486:	b3 e4       	ldi	r27, 0x43	; 67
    3488:	8f a3       	std	Y+39, r24	; 0x27
    348a:	98 a7       	std	Y+40, r25	; 0x28
    348c:	a9 a7       	std	Y+41, r26	; 0x29
    348e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3490:	6f a1       	ldd	r22, Y+39	; 0x27
    3492:	78 a5       	ldd	r23, Y+40	; 0x28
    3494:	89 a5       	ldd	r24, Y+41	; 0x29
    3496:	9a a5       	ldd	r25, Y+42	; 0x2a
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	4a e7       	ldi	r20, 0x7A	; 122
    349e:	55 e4       	ldi	r21, 0x45	; 69
    34a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	8b a3       	std	Y+35, r24	; 0x23
    34aa:	9c a3       	std	Y+36, r25	; 0x24
    34ac:	ad a3       	std	Y+37, r26	; 0x25
    34ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    34b0:	6b a1       	ldd	r22, Y+35	; 0x23
    34b2:	7c a1       	ldd	r23, Y+36	; 0x24
    34b4:	8d a1       	ldd	r24, Y+37	; 0x25
    34b6:	9e a1       	ldd	r25, Y+38	; 0x26
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e8       	ldi	r20, 0x80	; 128
    34be:	5f e3       	ldi	r21, 0x3F	; 63
    34c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34c4:	88 23       	and	r24, r24
    34c6:	2c f4       	brge	.+10     	; 0x34d2 <Finger_Print_Enroll+0x984>
		__ticks = 1;
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	9a a3       	std	Y+34, r25	; 0x22
    34ce:	89 a3       	std	Y+33, r24	; 0x21
    34d0:	3f c0       	rjmp	.+126    	; 0x3550 <Finger_Print_Enroll+0xa02>
	else if (__tmp > 65535)
    34d2:	6b a1       	ldd	r22, Y+35	; 0x23
    34d4:	7c a1       	ldd	r23, Y+36	; 0x24
    34d6:	8d a1       	ldd	r24, Y+37	; 0x25
    34d8:	9e a1       	ldd	r25, Y+38	; 0x26
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	3f ef       	ldi	r19, 0xFF	; 255
    34de:	4f e7       	ldi	r20, 0x7F	; 127
    34e0:	57 e4       	ldi	r21, 0x47	; 71
    34e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34e6:	18 16       	cp	r1, r24
    34e8:	4c f5       	brge	.+82     	; 0x353c <Finger_Print_Enroll+0x9ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ea:	6f a1       	ldd	r22, Y+39	; 0x27
    34ec:	78 a5       	ldd	r23, Y+40	; 0x28
    34ee:	89 a5       	ldd	r24, Y+41	; 0x29
    34f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e2       	ldi	r20, 0x20	; 32
    34f8:	51 e4       	ldi	r21, 0x41	; 65
    34fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	bc 01       	movw	r22, r24
    3504:	cd 01       	movw	r24, r26
    3506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	9a a3       	std	Y+34, r25	; 0x22
    3510:	89 a3       	std	Y+33, r24	; 0x21
    3512:	0f c0       	rjmp	.+30     	; 0x3532 <Finger_Print_Enroll+0x9e4>
    3514:	80 e9       	ldi	r24, 0x90	; 144
    3516:	91 e0       	ldi	r25, 0x01	; 1
    3518:	98 a3       	std	Y+32, r25	; 0x20
    351a:	8f 8f       	std	Y+31, r24	; 0x1f
    351c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    351e:	98 a1       	ldd	r25, Y+32	; 0x20
    3520:	01 97       	sbiw	r24, 0x01	; 1
    3522:	f1 f7       	brne	.-4      	; 0x3520 <Finger_Print_Enroll+0x9d2>
    3524:	98 a3       	std	Y+32, r25	; 0x20
    3526:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3528:	89 a1       	ldd	r24, Y+33	; 0x21
    352a:	9a a1       	ldd	r25, Y+34	; 0x22
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	9a a3       	std	Y+34, r25	; 0x22
    3530:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3532:	89 a1       	ldd	r24, Y+33	; 0x21
    3534:	9a a1       	ldd	r25, Y+34	; 0x22
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	69 f7       	brne	.-38     	; 0x3514 <Finger_Print_Enroll+0x9c6>
    353a:	14 c0       	rjmp	.+40     	; 0x3564 <Finger_Print_Enroll+0xa16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    353c:	6b a1       	ldd	r22, Y+35	; 0x23
    353e:	7c a1       	ldd	r23, Y+36	; 0x24
    3540:	8d a1       	ldd	r24, Y+37	; 0x25
    3542:	9e a1       	ldd	r25, Y+38	; 0x26
    3544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	9a a3       	std	Y+34, r25	; 0x22
    354e:	89 a3       	std	Y+33, r24	; 0x21
    3550:	89 a1       	ldd	r24, Y+33	; 0x21
    3552:	9a a1       	ldd	r25, Y+34	; 0x22
    3554:	9e 8f       	std	Y+30, r25	; 0x1e
    3556:	8d 8f       	std	Y+29, r24	; 0x1d
    3558:	8d 8d       	ldd	r24, Y+29	; 0x1d
    355a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <Finger_Print_Enroll+0xa0e>
    3560:	9e 8f       	std	Y+30, r25	; 0x1e
    3562:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(500);
					Img_2_TZ_Flag=0;
    3564:	10 92 cf 05 	sts	0x05CF, r1
    3568:	94 c0       	rjmp	.+296    	; 0x3692 <Finger_Print_Enroll+0xb44>
					break;
				}
				else
				{
					Flush_Buffer();
    356a:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
				Flush_Buffer();
			}
		}


		while(Img_2_TZ_Flag)
    356e:	80 91 cf 05 	lds	r24, 0x05CF
    3572:	88 23       	and	r24, r24
    3574:	09 f0       	breq	.+2      	; 0x3578 <Finger_Print_Enroll+0xa2a>
    3576:	db cc       	rjmp	.-1610   	; 0x2f2e <Finger_Print_Enroll+0x3e0>
    3578:	8c c0       	rjmp	.+280    	; 0x3692 <Finger_Print_Enroll+0xb44>
	}


		while(Reg_Model_Flag)
		{
			Finger_Print_Send_Command(Reg_Model,REG_MODEL_LENGTH);
    357a:	82 ea       	ldi	r24, 0xA2	; 162
    357c:	94 e0       	ldi	r25, 0x04	; 4
    357e:	6c e0       	ldi	r22, 0x0C	; 12
    3580:	0e 94 99 14 	call	0x2932	; 0x2932 <Finger_Print_Send_Command>
			if(Buffer[Confirmation_Code]==Operation_Sucess)
    3584:	80 91 ef 05 	lds	r24, 0x05EF
    3588:	88 23       	and	r24, r24
    358a:	09 f0       	breq	.+2      	; 0x358e <Finger_Print_Enroll+0xa40>
    358c:	80 c0       	rjmp	.+256    	; 0x368e <Finger_Print_Enroll+0xb40>
			{
				H_LCD_void_ClearDisplay();
    358e:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("Register Model done");
    3592:	85 ec       	ldi	r24, 0xC5	; 197
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    359a:	80 e0       	ldi	r24, 0x00	; 0
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	aa e7       	ldi	r26, 0x7A	; 122
    35a0:	b4 e4       	ldi	r27, 0x44	; 68
    35a2:	89 8f       	std	Y+25, r24	; 0x19
    35a4:	9a 8f       	std	Y+26, r25	; 0x1a
    35a6:	ab 8f       	std	Y+27, r26	; 0x1b
    35a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35aa:	69 8d       	ldd	r22, Y+25	; 0x19
    35ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	4a e7       	ldi	r20, 0x7A	; 122
    35b8:	55 e4       	ldi	r21, 0x45	; 69
    35ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35be:	dc 01       	movw	r26, r24
    35c0:	cb 01       	movw	r24, r22
    35c2:	8d 8b       	std	Y+21, r24	; 0x15
    35c4:	9e 8b       	std	Y+22, r25	; 0x16
    35c6:	af 8b       	std	Y+23, r26	; 0x17
    35c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35ca:	6d 89       	ldd	r22, Y+21	; 0x15
    35cc:	7e 89       	ldd	r23, Y+22	; 0x16
    35ce:	8f 89       	ldd	r24, Y+23	; 0x17
    35d0:	98 8d       	ldd	r25, Y+24	; 0x18
    35d2:	20 e0       	ldi	r18, 0x00	; 0
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	40 e8       	ldi	r20, 0x80	; 128
    35d8:	5f e3       	ldi	r21, 0x3F	; 63
    35da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35de:	88 23       	and	r24, r24
    35e0:	2c f4       	brge	.+10     	; 0x35ec <Finger_Print_Enroll+0xa9e>
		__ticks = 1;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	9c 8b       	std	Y+20, r25	; 0x14
    35e8:	8b 8b       	std	Y+19, r24	; 0x13
    35ea:	3f c0       	rjmp	.+126    	; 0x366a <Finger_Print_Enroll+0xb1c>
	else if (__tmp > 65535)
    35ec:	6d 89       	ldd	r22, Y+21	; 0x15
    35ee:	7e 89       	ldd	r23, Y+22	; 0x16
    35f0:	8f 89       	ldd	r24, Y+23	; 0x17
    35f2:	98 8d       	ldd	r25, Y+24	; 0x18
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	3f ef       	ldi	r19, 0xFF	; 255
    35f8:	4f e7       	ldi	r20, 0x7F	; 127
    35fa:	57 e4       	ldi	r21, 0x47	; 71
    35fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3600:	18 16       	cp	r1, r24
    3602:	4c f5       	brge	.+82     	; 0x3656 <Finger_Print_Enroll+0xb08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3604:	69 8d       	ldd	r22, Y+25	; 0x19
    3606:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3608:	8b 8d       	ldd	r24, Y+27	; 0x1b
    360a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	40 e2       	ldi	r20, 0x20	; 32
    3612:	51 e4       	ldi	r21, 0x41	; 65
    3614:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	bc 01       	movw	r22, r24
    361e:	cd 01       	movw	r24, r26
    3620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	9c 8b       	std	Y+20, r25	; 0x14
    362a:	8b 8b       	std	Y+19, r24	; 0x13
    362c:	0f c0       	rjmp	.+30     	; 0x364c <Finger_Print_Enroll+0xafe>
    362e:	80 e9       	ldi	r24, 0x90	; 144
    3630:	91 e0       	ldi	r25, 0x01	; 1
    3632:	9a 8b       	std	Y+18, r25	; 0x12
    3634:	89 8b       	std	Y+17, r24	; 0x11
    3636:	89 89       	ldd	r24, Y+17	; 0x11
    3638:	9a 89       	ldd	r25, Y+18	; 0x12
    363a:	01 97       	sbiw	r24, 0x01	; 1
    363c:	f1 f7       	brne	.-4      	; 0x363a <Finger_Print_Enroll+0xaec>
    363e:	9a 8b       	std	Y+18, r25	; 0x12
    3640:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3642:	8b 89       	ldd	r24, Y+19	; 0x13
    3644:	9c 89       	ldd	r25, Y+20	; 0x14
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	9c 8b       	std	Y+20, r25	; 0x14
    364a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    364c:	8b 89       	ldd	r24, Y+19	; 0x13
    364e:	9c 89       	ldd	r25, Y+20	; 0x14
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	69 f7       	brne	.-38     	; 0x362e <Finger_Print_Enroll+0xae0>
    3654:	14 c0       	rjmp	.+40     	; 0x367e <Finger_Print_Enroll+0xb30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3656:	6d 89       	ldd	r22, Y+21	; 0x15
    3658:	7e 89       	ldd	r23, Y+22	; 0x16
    365a:	8f 89       	ldd	r24, Y+23	; 0x17
    365c:	98 8d       	ldd	r25, Y+24	; 0x18
    365e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	9c 8b       	std	Y+20, r25	; 0x14
    3668:	8b 8b       	std	Y+19, r24	; 0x13
    366a:	8b 89       	ldd	r24, Y+19	; 0x13
    366c:	9c 89       	ldd	r25, Y+20	; 0x14
    366e:	98 8b       	std	Y+16, r25	; 0x10
    3670:	8f 87       	std	Y+15, r24	; 0x0f
    3672:	8f 85       	ldd	r24, Y+15	; 0x0f
    3674:	98 89       	ldd	r25, Y+16	; 0x10
    3676:	01 97       	sbiw	r24, 0x01	; 1
    3678:	f1 f7       	brne	.-4      	; 0x3676 <Finger_Print_Enroll+0xb28>
    367a:	98 8b       	std	Y+16, r25	; 0x10
    367c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);

				Flush_Buffer();
    367e:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
				Store_Flag=1;
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	80 93 d2 05 	sts	0x05D2, r24
				Reg_Model_Flag=0;
    3688:	10 92 d1 05 	sts	0x05D1, r1
    368c:	99 c0       	rjmp	.+306    	; 0x37c0 <Finger_Print_Enroll+0xc72>
				break;
			}
			else
			{
				Flush_Buffer();
    368e:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
				}
			}
	}


		while(Reg_Model_Flag)
    3692:	80 91 d1 05 	lds	r24, 0x05D1
    3696:	88 23       	and	r24, r24
    3698:	09 f0       	breq	.+2      	; 0x369c <Finger_Print_Enroll+0xb4e>
    369a:	6f cf       	rjmp	.-290    	; 0x357a <Finger_Print_Enroll+0xa2c>
    369c:	91 c0       	rjmp	.+290    	; 0x37c0 <Finger_Print_Enroll+0xc72>
		}


		while(Store_Flag)
		{
			Check_Sum(FB_ID);
    369e:	fe 01       	movw	r30, r28
    36a0:	ee 57       	subi	r30, 0x7E	; 126
    36a2:	ff 4f       	sbci	r31, 0xFF	; 255
    36a4:	80 81       	ld	r24, Z
    36a6:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <Check_Sum>
			//Store[PAGE_ID]=FB_ID;
			Finger_Print_Send_Command(Store,STORE_LENGTH);
    36aa:	80 ee       	ldi	r24, 0xE0	; 224
    36ac:	94 e0       	ldi	r25, 0x04	; 4
    36ae:	6f e0       	ldi	r22, 0x0F	; 15
    36b0:	0e 94 99 14 	call	0x2932	; 0x2932 <Finger_Print_Send_Command>
			if(Buffer[Confirmation_Code]==Storage_Success)
    36b4:	80 91 ef 05 	lds	r24, 0x05EF
    36b8:	88 23       	and	r24, r24
    36ba:	09 f0       	breq	.+2      	; 0x36be <Finger_Print_Enroll+0xb70>
    36bc:	7f c0       	rjmp	.+254    	; 0x37bc <Finger_Print_Enroll+0xc6e>
			{
				H_LCD_void_ClearDisplay();
    36be:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("Storing done");
    36c2:	89 ed       	ldi	r24, 0xD9	; 217
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	aa e7       	ldi	r26, 0x7A	; 122
    36d0:	b4 e4       	ldi	r27, 0x44	; 68
    36d2:	8b 87       	std	Y+11, r24	; 0x0b
    36d4:	9c 87       	std	Y+12, r25	; 0x0c
    36d6:	ad 87       	std	Y+13, r26	; 0x0d
    36d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36da:	6b 85       	ldd	r22, Y+11	; 0x0b
    36dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36de:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	4a e7       	ldi	r20, 0x7A	; 122
    36e8:	55 e4       	ldi	r21, 0x45	; 69
    36ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	8f 83       	std	Y+7, r24	; 0x07
    36f4:	98 87       	std	Y+8, r25	; 0x08
    36f6:	a9 87       	std	Y+9, r26	; 0x09
    36f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36fa:	6f 81       	ldd	r22, Y+7	; 0x07
    36fc:	78 85       	ldd	r23, Y+8	; 0x08
    36fe:	89 85       	ldd	r24, Y+9	; 0x09
    3700:	9a 85       	ldd	r25, Y+10	; 0x0a
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 e8       	ldi	r20, 0x80	; 128
    3708:	5f e3       	ldi	r21, 0x3F	; 63
    370a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    370e:	88 23       	and	r24, r24
    3710:	2c f4       	brge	.+10     	; 0x371c <Finger_Print_Enroll+0xbce>
		__ticks = 1;
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	9e 83       	std	Y+6, r25	; 0x06
    3718:	8d 83       	std	Y+5, r24	; 0x05
    371a:	3f c0       	rjmp	.+126    	; 0x379a <Finger_Print_Enroll+0xc4c>
	else if (__tmp > 65535)
    371c:	6f 81       	ldd	r22, Y+7	; 0x07
    371e:	78 85       	ldd	r23, Y+8	; 0x08
    3720:	89 85       	ldd	r24, Y+9	; 0x09
    3722:	9a 85       	ldd	r25, Y+10	; 0x0a
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	3f ef       	ldi	r19, 0xFF	; 255
    3728:	4f e7       	ldi	r20, 0x7F	; 127
    372a:	57 e4       	ldi	r21, 0x47	; 71
    372c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3730:	18 16       	cp	r1, r24
    3732:	4c f5       	brge	.+82     	; 0x3786 <Finger_Print_Enroll+0xc38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3734:	6b 85       	ldd	r22, Y+11	; 0x0b
    3736:	7c 85       	ldd	r23, Y+12	; 0x0c
    3738:	8d 85       	ldd	r24, Y+13	; 0x0d
    373a:	9e 85       	ldd	r25, Y+14	; 0x0e
    373c:	20 e0       	ldi	r18, 0x00	; 0
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	40 e2       	ldi	r20, 0x20	; 32
    3742:	51 e4       	ldi	r21, 0x41	; 65
    3744:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	bc 01       	movw	r22, r24
    374e:	cd 01       	movw	r24, r26
    3750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	9e 83       	std	Y+6, r25	; 0x06
    375a:	8d 83       	std	Y+5, r24	; 0x05
    375c:	0f c0       	rjmp	.+30     	; 0x377c <Finger_Print_Enroll+0xc2e>
    375e:	80 e9       	ldi	r24, 0x90	; 144
    3760:	91 e0       	ldi	r25, 0x01	; 1
    3762:	9c 83       	std	Y+4, r25	; 0x04
    3764:	8b 83       	std	Y+3, r24	; 0x03
    3766:	8b 81       	ldd	r24, Y+3	; 0x03
    3768:	9c 81       	ldd	r25, Y+4	; 0x04
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	f1 f7       	brne	.-4      	; 0x376a <Finger_Print_Enroll+0xc1c>
    376e:	9c 83       	std	Y+4, r25	; 0x04
    3770:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3772:	8d 81       	ldd	r24, Y+5	; 0x05
    3774:	9e 81       	ldd	r25, Y+6	; 0x06
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	9e 83       	std	Y+6, r25	; 0x06
    377a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377c:	8d 81       	ldd	r24, Y+5	; 0x05
    377e:	9e 81       	ldd	r25, Y+6	; 0x06
    3780:	00 97       	sbiw	r24, 0x00	; 0
    3782:	69 f7       	brne	.-38     	; 0x375e <Finger_Print_Enroll+0xc10>
    3784:	14 c0       	rjmp	.+40     	; 0x37ae <Finger_Print_Enroll+0xc60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3786:	6f 81       	ldd	r22, Y+7	; 0x07
    3788:	78 85       	ldd	r23, Y+8	; 0x08
    378a:	89 85       	ldd	r24, Y+9	; 0x09
    378c:	9a 85       	ldd	r25, Y+10	; 0x0a
    378e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	9e 83       	std	Y+6, r25	; 0x06
    3798:	8d 83       	std	Y+5, r24	; 0x05
    379a:	8d 81       	ldd	r24, Y+5	; 0x05
    379c:	9e 81       	ldd	r25, Y+6	; 0x06
    379e:	9a 83       	std	Y+2, r25	; 0x02
    37a0:	89 83       	std	Y+1, r24	; 0x01
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	9a 81       	ldd	r25, Y+2	; 0x02
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <Finger_Print_Enroll+0xc58>
    37aa:	9a 83       	std	Y+2, r25	; 0x02
    37ac:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				Flush_Buffer();
    37ae:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
				Enrollement_flag=0;
    37b2:	10 92 cb 05 	sts	0x05CB, r1
				Store_Flag=0;
    37b6:	10 92 d2 05 	sts	0x05D2, r1
    37ba:	07 c0       	rjmp	.+14     	; 0x37ca <Finger_Print_Enroll+0xc7c>
				break;
			}
			else
			{
				Flush_Buffer();
    37bc:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
				//_delay_ms(1000);
			}
		}


		while(Store_Flag)
    37c0:	80 91 d2 05 	lds	r24, 0x05D2
    37c4:	88 23       	and	r24, r24
    37c6:	09 f0       	breq	.+2      	; 0x37ca <Finger_Print_Enroll+0xc7c>
    37c8:	6a cf       	rjmp	.-300    	; 0x369e <Finger_Print_Enroll+0xb50>
	H_LCD_void_ClearDisplay();
	H_LCD_void_sendString("Enroll New User");
	_delay_ms(3000);
	Store_Flag=0;
	Enrollement_flag=1;
	while(Enrollement_flag)
    37ca:	80 91 cb 05 	lds	r24, 0x05CB
    37ce:	88 23       	and	r24, r24
    37d0:	09 f0       	breq	.+2      	; 0x37d4 <Finger_Print_Enroll+0xc86>
    37d2:	96 ca       	rjmp	.-2772   	; 0x2d00 <Finger_Print_Enroll+0x1b2>
				//_delay_ms(1000);
			}
		}
	}

	Error_Status=No_Error;
    37d4:	fe 01       	movw	r30, r28
    37d6:	ef 57       	subi	r30, 0x7F	; 127
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	10 82       	st	Z, r1


	return Error_Status;
    37dc:	fe 01       	movw	r30, r28
    37de:	ef 57       	subi	r30, 0x7F	; 127
    37e0:	ff 4f       	sbci	r31, 0xFF	; 255
    37e2:	80 81       	ld	r24, Z
}
    37e4:	ce 57       	subi	r28, 0x7E	; 126
    37e6:	df 4f       	sbci	r29, 0xFF	; 255
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	f8 94       	cli
    37ec:	de bf       	out	0x3e, r29	; 62
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	cd bf       	out	0x3d, r28	; 61
    37f2:	cf 91       	pop	r28
    37f4:	df 91       	pop	r29
    37f6:	1f 91       	pop	r17
    37f8:	0f 91       	pop	r16
    37fa:	08 95       	ret

000037fc <Finger_Print_Match>:
u8 Finger_Print_Match(void)
{
    37fc:	0f 93       	push	r16
    37fe:	1f 93       	push	r17
    3800:	df 93       	push	r29
    3802:	cf 93       	push	r28
    3804:	cd b7       	in	r28, 0x3d	; 61
    3806:	de b7       	in	r29, 0x3e	; 62
    3808:	ce 58       	subi	r28, 0x8E	; 142
    380a:	d0 40       	sbci	r29, 0x00	; 0
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
	u8 User_ID;
	Search_Flag=0;
    3816:	10 92 d3 05 	sts	0x05D3, r1
	Match_flag=1;
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	80 93 cc 05 	sts	0x05CC, r24
	H_LCD_void_ClearDisplay();
    3820:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
	H_LCD_void_sendString("Check for match?");
    3824:	86 ee       	ldi	r24, 0xE6	; 230
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    382c:	fe 01       	movw	r30, r28
    382e:	e7 57       	subi	r30, 0x77	; 119
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	90 e8       	ldi	r25, 0x80	; 128
    3836:	ab e3       	ldi	r26, 0x3B	; 59
    3838:	b5 e4       	ldi	r27, 0x45	; 69
    383a:	80 83       	st	Z, r24
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	a2 83       	std	Z+2, r26	; 0x02
    3840:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3842:	8e 01       	movw	r16, r28
    3844:	0b 57       	subi	r16, 0x7B	; 123
    3846:	1f 4f       	sbci	r17, 0xFF	; 255
    3848:	fe 01       	movw	r30, r28
    384a:	e7 57       	subi	r30, 0x77	; 119
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	60 81       	ld	r22, Z
    3850:	71 81       	ldd	r23, Z+1	; 0x01
    3852:	82 81       	ldd	r24, Z+2	; 0x02
    3854:	93 81       	ldd	r25, Z+3	; 0x03
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	4a e7       	ldi	r20, 0x7A	; 122
    385c:	55 e4       	ldi	r21, 0x45	; 69
    385e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	f8 01       	movw	r30, r16
    3868:	80 83       	st	Z, r24
    386a:	91 83       	std	Z+1, r25	; 0x01
    386c:	a2 83       	std	Z+2, r26	; 0x02
    386e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3870:	fe 01       	movw	r30, r28
    3872:	eb 57       	subi	r30, 0x7B	; 123
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	60 81       	ld	r22, Z
    3878:	71 81       	ldd	r23, Z+1	; 0x01
    387a:	82 81       	ldd	r24, Z+2	; 0x02
    387c:	93 81       	ldd	r25, Z+3	; 0x03
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	40 e8       	ldi	r20, 0x80	; 128
    3884:	5f e3       	ldi	r21, 0x3F	; 63
    3886:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    388a:	88 23       	and	r24, r24
    388c:	44 f4       	brge	.+16     	; 0x389e <Finger_Print_Match+0xa2>
		__ticks = 1;
    388e:	fe 01       	movw	r30, r28
    3890:	ed 57       	subi	r30, 0x7D	; 125
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	91 83       	std	Z+1, r25	; 0x01
    389a:	80 83       	st	Z, r24
    389c:	64 c0       	rjmp	.+200    	; 0x3966 <Finger_Print_Match+0x16a>
	else if (__tmp > 65535)
    389e:	fe 01       	movw	r30, r28
    38a0:	eb 57       	subi	r30, 0x7B	; 123
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	60 81       	ld	r22, Z
    38a6:	71 81       	ldd	r23, Z+1	; 0x01
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	93 81       	ldd	r25, Z+3	; 0x03
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	3f ef       	ldi	r19, 0xFF	; 255
    38b0:	4f e7       	ldi	r20, 0x7F	; 127
    38b2:	57 e4       	ldi	r21, 0x47	; 71
    38b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38b8:	18 16       	cp	r1, r24
    38ba:	0c f0       	brlt	.+2      	; 0x38be <Finger_Print_Match+0xc2>
    38bc:	43 c0       	rjmp	.+134    	; 0x3944 <Finger_Print_Match+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38be:	fe 01       	movw	r30, r28
    38c0:	e7 57       	subi	r30, 0x77	; 119
    38c2:	ff 4f       	sbci	r31, 0xFF	; 255
    38c4:	60 81       	ld	r22, Z
    38c6:	71 81       	ldd	r23, Z+1	; 0x01
    38c8:	82 81       	ldd	r24, Z+2	; 0x02
    38ca:	93 81       	ldd	r25, Z+3	; 0x03
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e2       	ldi	r20, 0x20	; 32
    38d2:	51 e4       	ldi	r21, 0x41	; 65
    38d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	8e 01       	movw	r16, r28
    38de:	0d 57       	subi	r16, 0x7D	; 125
    38e0:	1f 4f       	sbci	r17, 0xFF	; 255
    38e2:	bc 01       	movw	r22, r24
    38e4:	cd 01       	movw	r24, r26
    38e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	f8 01       	movw	r30, r16
    38f0:	91 83       	std	Z+1, r25	; 0x01
    38f2:	80 83       	st	Z, r24
    38f4:	1f c0       	rjmp	.+62     	; 0x3934 <Finger_Print_Match+0x138>
    38f6:	fe 01       	movw	r30, r28
    38f8:	ef 57       	subi	r30, 0x7F	; 127
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	80 e9       	ldi	r24, 0x90	; 144
    38fe:	91 e0       	ldi	r25, 0x01	; 1
    3900:	91 83       	std	Z+1, r25	; 0x01
    3902:	80 83       	st	Z, r24
    3904:	fe 01       	movw	r30, r28
    3906:	ef 57       	subi	r30, 0x7F	; 127
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	80 81       	ld	r24, Z
    390c:	91 81       	ldd	r25, Z+1	; 0x01
    390e:	01 97       	sbiw	r24, 0x01	; 1
    3910:	f1 f7       	brne	.-4      	; 0x390e <Finger_Print_Match+0x112>
    3912:	fe 01       	movw	r30, r28
    3914:	ef 57       	subi	r30, 0x7F	; 127
    3916:	ff 4f       	sbci	r31, 0xFF	; 255
    3918:	91 83       	std	Z+1, r25	; 0x01
    391a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    391c:	de 01       	movw	r26, r28
    391e:	ad 57       	subi	r26, 0x7D	; 125
    3920:	bf 4f       	sbci	r27, 0xFF	; 255
    3922:	fe 01       	movw	r30, r28
    3924:	ed 57       	subi	r30, 0x7D	; 125
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	80 81       	ld	r24, Z
    392a:	91 81       	ldd	r25, Z+1	; 0x01
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	11 96       	adiw	r26, 0x01	; 1
    3930:	9c 93       	st	X, r25
    3932:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3934:	fe 01       	movw	r30, r28
    3936:	ed 57       	subi	r30, 0x7D	; 125
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	80 81       	ld	r24, Z
    393c:	91 81       	ldd	r25, Z+1	; 0x01
    393e:	00 97       	sbiw	r24, 0x00	; 0
    3940:	d1 f6       	brne	.-76     	; 0x38f6 <Finger_Print_Match+0xfa>
    3942:	8b c6       	rjmp	.+3350   	; 0x465a <Finger_Print_Match+0xe5e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3944:	8e 01       	movw	r16, r28
    3946:	0d 57       	subi	r16, 0x7D	; 125
    3948:	1f 4f       	sbci	r17, 0xFF	; 255
    394a:	fe 01       	movw	r30, r28
    394c:	eb 57       	subi	r30, 0x7B	; 123
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	60 81       	ld	r22, Z
    3952:	71 81       	ldd	r23, Z+1	; 0x01
    3954:	82 81       	ldd	r24, Z+2	; 0x02
    3956:	93 81       	ldd	r25, Z+3	; 0x03
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	f8 01       	movw	r30, r16
    3962:	91 83       	std	Z+1, r25	; 0x01
    3964:	80 83       	st	Z, r24
    3966:	de 01       	movw	r26, r28
    3968:	a1 58       	subi	r26, 0x81	; 129
    396a:	bf 4f       	sbci	r27, 0xFF	; 255
    396c:	fe 01       	movw	r30, r28
    396e:	ed 57       	subi	r30, 0x7D	; 125
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	80 81       	ld	r24, Z
    3974:	91 81       	ldd	r25, Z+1	; 0x01
    3976:	11 96       	adiw	r26, 0x01	; 1
    3978:	9c 93       	st	X, r25
    397a:	8e 93       	st	-X, r24
    397c:	fe 01       	movw	r30, r28
    397e:	e1 58       	subi	r30, 0x81	; 129
    3980:	ff 4f       	sbci	r31, 0xFF	; 255
    3982:	80 81       	ld	r24, Z
    3984:	91 81       	ldd	r25, Z+1	; 0x01
    3986:	01 97       	sbiw	r24, 0x01	; 1
    3988:	f1 f7       	brne	.-4      	; 0x3986 <Finger_Print_Match+0x18a>
    398a:	fe 01       	movw	r30, r28
    398c:	e1 58       	subi	r30, 0x81	; 129
    398e:	ff 4f       	sbci	r31, 0xFF	; 255
    3990:	91 83       	std	Z+1, r25	; 0x01
    3992:	80 83       	st	Z, r24
    3994:	62 c6       	rjmp	.+3268   	; 0x465a <Finger_Print_Match+0xe5e>
	_delay_ms(3000);
	while(Match_flag)
	{
		Gen_Img_Flag_Match=1;
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	80 93 ce 05 	sts	0x05CE, r24
    399c:	9b c1       	rjmp	.+822    	; 0x3cd4 <Finger_Print_Match+0x4d8>

		while(Gen_Img_Flag_Match)
		{
			H_LCD_void_ClearDisplay();
    399e:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("Check Finger!");
    39a2:	80 e7       	ldi	r24, 0x70	; 112
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    39aa:	fe 01       	movw	r30, r28
    39ac:	e5 58       	subi	r30, 0x85	; 133
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	aa ef       	ldi	r26, 0xFA	; 250
    39b6:	b4 e4       	ldi	r27, 0x44	; 68
    39b8:	80 83       	st	Z, r24
    39ba:	91 83       	std	Z+1, r25	; 0x01
    39bc:	a2 83       	std	Z+2, r26	; 0x02
    39be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39c0:	8e 01       	movw	r16, r28
    39c2:	09 58       	subi	r16, 0x89	; 137
    39c4:	1f 4f       	sbci	r17, 0xFF	; 255
    39c6:	fe 01       	movw	r30, r28
    39c8:	e5 58       	subi	r30, 0x85	; 133
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	60 81       	ld	r22, Z
    39ce:	71 81       	ldd	r23, Z+1	; 0x01
    39d0:	82 81       	ldd	r24, Z+2	; 0x02
    39d2:	93 81       	ldd	r25, Z+3	; 0x03
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	4a e7       	ldi	r20, 0x7A	; 122
    39da:	55 e4       	ldi	r21, 0x45	; 69
    39dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	f8 01       	movw	r30, r16
    39e6:	80 83       	st	Z, r24
    39e8:	91 83       	std	Z+1, r25	; 0x01
    39ea:	a2 83       	std	Z+2, r26	; 0x02
    39ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39ee:	fe 01       	movw	r30, r28
    39f0:	e9 58       	subi	r30, 0x89	; 137
    39f2:	ff 4f       	sbci	r31, 0xFF	; 255
    39f4:	60 81       	ld	r22, Z
    39f6:	71 81       	ldd	r23, Z+1	; 0x01
    39f8:	82 81       	ldd	r24, Z+2	; 0x02
    39fa:	93 81       	ldd	r25, Z+3	; 0x03
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	40 e8       	ldi	r20, 0x80	; 128
    3a02:	5f e3       	ldi	r21, 0x3F	; 63
    3a04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a08:	88 23       	and	r24, r24
    3a0a:	44 f4       	brge	.+16     	; 0x3a1c <Finger_Print_Match+0x220>
		__ticks = 1;
    3a0c:	fe 01       	movw	r30, r28
    3a0e:	eb 58       	subi	r30, 0x8B	; 139
    3a10:	ff 4f       	sbci	r31, 0xFF	; 255
    3a12:	81 e0       	ldi	r24, 0x01	; 1
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	91 83       	std	Z+1, r25	; 0x01
    3a18:	80 83       	st	Z, r24
    3a1a:	64 c0       	rjmp	.+200    	; 0x3ae4 <Finger_Print_Match+0x2e8>
	else if (__tmp > 65535)
    3a1c:	fe 01       	movw	r30, r28
    3a1e:	e9 58       	subi	r30, 0x89	; 137
    3a20:	ff 4f       	sbci	r31, 0xFF	; 255
    3a22:	60 81       	ld	r22, Z
    3a24:	71 81       	ldd	r23, Z+1	; 0x01
    3a26:	82 81       	ldd	r24, Z+2	; 0x02
    3a28:	93 81       	ldd	r25, Z+3	; 0x03
    3a2a:	20 e0       	ldi	r18, 0x00	; 0
    3a2c:	3f ef       	ldi	r19, 0xFF	; 255
    3a2e:	4f e7       	ldi	r20, 0x7F	; 127
    3a30:	57 e4       	ldi	r21, 0x47	; 71
    3a32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a36:	18 16       	cp	r1, r24
    3a38:	0c f0       	brlt	.+2      	; 0x3a3c <Finger_Print_Match+0x240>
    3a3a:	43 c0       	rjmp	.+134    	; 0x3ac2 <Finger_Print_Match+0x2c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3c:	fe 01       	movw	r30, r28
    3a3e:	e5 58       	subi	r30, 0x85	; 133
    3a40:	ff 4f       	sbci	r31, 0xFF	; 255
    3a42:	60 81       	ld	r22, Z
    3a44:	71 81       	ldd	r23, Z+1	; 0x01
    3a46:	82 81       	ldd	r24, Z+2	; 0x02
    3a48:	93 81       	ldd	r25, Z+3	; 0x03
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e2       	ldi	r20, 0x20	; 32
    3a50:	51 e4       	ldi	r21, 0x41	; 65
    3a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	8e 01       	movw	r16, r28
    3a5c:	0b 58       	subi	r16, 0x8B	; 139
    3a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3a60:	bc 01       	movw	r22, r24
    3a62:	cd 01       	movw	r24, r26
    3a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	f8 01       	movw	r30, r16
    3a6e:	91 83       	std	Z+1, r25	; 0x01
    3a70:	80 83       	st	Z, r24
    3a72:	1f c0       	rjmp	.+62     	; 0x3ab2 <Finger_Print_Match+0x2b6>
    3a74:	fe 01       	movw	r30, r28
    3a76:	ed 58       	subi	r30, 0x8D	; 141
    3a78:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7a:	80 e9       	ldi	r24, 0x90	; 144
    3a7c:	91 e0       	ldi	r25, 0x01	; 1
    3a7e:	91 83       	std	Z+1, r25	; 0x01
    3a80:	80 83       	st	Z, r24
    3a82:	fe 01       	movw	r30, r28
    3a84:	ed 58       	subi	r30, 0x8D	; 141
    3a86:	ff 4f       	sbci	r31, 0xFF	; 255
    3a88:	80 81       	ld	r24, Z
    3a8a:	91 81       	ldd	r25, Z+1	; 0x01
    3a8c:	01 97       	sbiw	r24, 0x01	; 1
    3a8e:	f1 f7       	brne	.-4      	; 0x3a8c <Finger_Print_Match+0x290>
    3a90:	fe 01       	movw	r30, r28
    3a92:	ed 58       	subi	r30, 0x8D	; 141
    3a94:	ff 4f       	sbci	r31, 0xFF	; 255
    3a96:	91 83       	std	Z+1, r25	; 0x01
    3a98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9a:	de 01       	movw	r26, r28
    3a9c:	ab 58       	subi	r26, 0x8B	; 139
    3a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	eb 58       	subi	r30, 0x8B	; 139
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	80 81       	ld	r24, Z
    3aa8:	91 81       	ldd	r25, Z+1	; 0x01
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	11 96       	adiw	r26, 0x01	; 1
    3aae:	9c 93       	st	X, r25
    3ab0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ab2:	fe 01       	movw	r30, r28
    3ab4:	eb 58       	subi	r30, 0x8B	; 139
    3ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab8:	80 81       	ld	r24, Z
    3aba:	91 81       	ldd	r25, Z+1	; 0x01
    3abc:	00 97       	sbiw	r24, 0x00	; 0
    3abe:	d1 f6       	brne	.-76     	; 0x3a74 <Finger_Print_Match+0x278>
    3ac0:	27 c0       	rjmp	.+78     	; 0x3b10 <Finger_Print_Match+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac2:	8e 01       	movw	r16, r28
    3ac4:	0b 58       	subi	r16, 0x8B	; 139
    3ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac8:	fe 01       	movw	r30, r28
    3aca:	e9 58       	subi	r30, 0x89	; 137
    3acc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ace:	60 81       	ld	r22, Z
    3ad0:	71 81       	ldd	r23, Z+1	; 0x01
    3ad2:	82 81       	ldd	r24, Z+2	; 0x02
    3ad4:	93 81       	ldd	r25, Z+3	; 0x03
    3ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ada:	dc 01       	movw	r26, r24
    3adc:	cb 01       	movw	r24, r22
    3ade:	f8 01       	movw	r30, r16
    3ae0:	91 83       	std	Z+1, r25	; 0x01
    3ae2:	80 83       	st	Z, r24
    3ae4:	de 01       	movw	r26, r28
    3ae6:	af 58       	subi	r26, 0x8F	; 143
    3ae8:	bf 4f       	sbci	r27, 0xFF	; 255
    3aea:	fe 01       	movw	r30, r28
    3aec:	eb 58       	subi	r30, 0x8B	; 139
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	80 81       	ld	r24, Z
    3af2:	91 81       	ldd	r25, Z+1	; 0x01
    3af4:	8d 93       	st	X+, r24
    3af6:	9c 93       	st	X, r25
    3af8:	fe 01       	movw	r30, r28
    3afa:	ef 58       	subi	r30, 0x8F	; 143
    3afc:	ff 4f       	sbci	r31, 0xFF	; 255
    3afe:	80 81       	ld	r24, Z
    3b00:	91 81       	ldd	r25, Z+1	; 0x01
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	f1 f7       	brne	.-4      	; 0x3b02 <Finger_Print_Match+0x306>
    3b06:	fe 01       	movw	r30, r28
    3b08:	ef 58       	subi	r30, 0x8F	; 143
    3b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b0c:	91 83       	std	Z+1, r25	; 0x01
    3b0e:	80 83       	st	Z, r24
			_delay_ms(2000);
			Finger_Print_Send_Command(GetImage,GEN_IMAGE_LENGTH);
    3b10:	8c e7       	ldi	r24, 0x7C	; 124
    3b12:	94 e0       	ldi	r25, 0x04	; 4
    3b14:	6c e0       	ldi	r22, 0x0C	; 12
    3b16:	0e 94 99 14 	call	0x2932	; 0x2932 <Finger_Print_Send_Command>
			if(Buffer[Confirmation_Code]==Finger_Collection_Success)
    3b1a:	80 91 ef 05 	lds	r24, 0x05EF
    3b1e:	88 23       	and	r24, r24
    3b20:	09 f0       	breq	.+2      	; 0x3b24 <Finger_Print_Match+0x328>
    3b22:	c2 c0       	rjmp	.+388    	; 0x3ca8 <Finger_Print_Match+0x4ac>
			{

				H_LCD_void_ClearDisplay();
    3b24:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("Check  done");
    3b28:	87 ef       	ldi	r24, 0xF7	; 247
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>

				Flush_Buffer();
    3b30:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
				Img_2_TZ_Flag_Match=1;
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	80 93 d0 05 	sts	0x05D0, r24
    3b3a:	fe 01       	movw	r30, r28
    3b3c:	e3 59       	subi	r30, 0x93	; 147
    3b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b40:	80 e0       	ldi	r24, 0x00	; 0
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	aa e7       	ldi	r26, 0x7A	; 122
    3b46:	b4 e4       	ldi	r27, 0x44	; 68
    3b48:	80 83       	st	Z, r24
    3b4a:	91 83       	std	Z+1, r25	; 0x01
    3b4c:	a2 83       	std	Z+2, r26	; 0x02
    3b4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b50:	8e 01       	movw	r16, r28
    3b52:	07 59       	subi	r16, 0x97	; 151
    3b54:	1f 4f       	sbci	r17, 0xFF	; 255
    3b56:	fe 01       	movw	r30, r28
    3b58:	e3 59       	subi	r30, 0x93	; 147
    3b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5c:	60 81       	ld	r22, Z
    3b5e:	71 81       	ldd	r23, Z+1	; 0x01
    3b60:	82 81       	ldd	r24, Z+2	; 0x02
    3b62:	93 81       	ldd	r25, Z+3	; 0x03
    3b64:	20 e0       	ldi	r18, 0x00	; 0
    3b66:	30 e0       	ldi	r19, 0x00	; 0
    3b68:	4a e7       	ldi	r20, 0x7A	; 122
    3b6a:	55 e4       	ldi	r21, 0x45	; 69
    3b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b70:	dc 01       	movw	r26, r24
    3b72:	cb 01       	movw	r24, r22
    3b74:	f8 01       	movw	r30, r16
    3b76:	80 83       	st	Z, r24
    3b78:	91 83       	std	Z+1, r25	; 0x01
    3b7a:	a2 83       	std	Z+2, r26	; 0x02
    3b7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b7e:	fe 01       	movw	r30, r28
    3b80:	e7 59       	subi	r30, 0x97	; 151
    3b82:	ff 4f       	sbci	r31, 0xFF	; 255
    3b84:	60 81       	ld	r22, Z
    3b86:	71 81       	ldd	r23, Z+1	; 0x01
    3b88:	82 81       	ldd	r24, Z+2	; 0x02
    3b8a:	93 81       	ldd	r25, Z+3	; 0x03
    3b8c:	20 e0       	ldi	r18, 0x00	; 0
    3b8e:	30 e0       	ldi	r19, 0x00	; 0
    3b90:	40 e8       	ldi	r20, 0x80	; 128
    3b92:	5f e3       	ldi	r21, 0x3F	; 63
    3b94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b98:	88 23       	and	r24, r24
    3b9a:	44 f4       	brge	.+16     	; 0x3bac <Finger_Print_Match+0x3b0>
		__ticks = 1;
    3b9c:	fe 01       	movw	r30, r28
    3b9e:	e9 59       	subi	r30, 0x99	; 153
    3ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	91 83       	std	Z+1, r25	; 0x01
    3ba8:	80 83       	st	Z, r24
    3baa:	64 c0       	rjmp	.+200    	; 0x3c74 <Finger_Print_Match+0x478>
	else if (__tmp > 65535)
    3bac:	fe 01       	movw	r30, r28
    3bae:	e7 59       	subi	r30, 0x97	; 151
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	60 81       	ld	r22, Z
    3bb4:	71 81       	ldd	r23, Z+1	; 0x01
    3bb6:	82 81       	ldd	r24, Z+2	; 0x02
    3bb8:	93 81       	ldd	r25, Z+3	; 0x03
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	3f ef       	ldi	r19, 0xFF	; 255
    3bbe:	4f e7       	ldi	r20, 0x7F	; 127
    3bc0:	57 e4       	ldi	r21, 0x47	; 71
    3bc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bc6:	18 16       	cp	r1, r24
    3bc8:	0c f0       	brlt	.+2      	; 0x3bcc <Finger_Print_Match+0x3d0>
    3bca:	43 c0       	rjmp	.+134    	; 0x3c52 <Finger_Print_Match+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e3 59       	subi	r30, 0x93	; 147
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	60 81       	ld	r22, Z
    3bd4:	71 81       	ldd	r23, Z+1	; 0x01
    3bd6:	82 81       	ldd	r24, Z+2	; 0x02
    3bd8:	93 81       	ldd	r25, Z+3	; 0x03
    3bda:	20 e0       	ldi	r18, 0x00	; 0
    3bdc:	30 e0       	ldi	r19, 0x00	; 0
    3bde:	40 e2       	ldi	r20, 0x20	; 32
    3be0:	51 e4       	ldi	r21, 0x41	; 65
    3be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be6:	dc 01       	movw	r26, r24
    3be8:	cb 01       	movw	r24, r22
    3bea:	8e 01       	movw	r16, r28
    3bec:	09 59       	subi	r16, 0x99	; 153
    3bee:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf0:	bc 01       	movw	r22, r24
    3bf2:	cd 01       	movw	r24, r26
    3bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	f8 01       	movw	r30, r16
    3bfe:	91 83       	std	Z+1, r25	; 0x01
    3c00:	80 83       	st	Z, r24
    3c02:	1f c0       	rjmp	.+62     	; 0x3c42 <Finger_Print_Match+0x446>
    3c04:	fe 01       	movw	r30, r28
    3c06:	eb 59       	subi	r30, 0x9B	; 155
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	80 e9       	ldi	r24, 0x90	; 144
    3c0c:	91 e0       	ldi	r25, 0x01	; 1
    3c0e:	91 83       	std	Z+1, r25	; 0x01
    3c10:	80 83       	st	Z, r24
    3c12:	fe 01       	movw	r30, r28
    3c14:	eb 59       	subi	r30, 0x9B	; 155
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	80 81       	ld	r24, Z
    3c1a:	91 81       	ldd	r25, Z+1	; 0x01
    3c1c:	01 97       	sbiw	r24, 0x01	; 1
    3c1e:	f1 f7       	brne	.-4      	; 0x3c1c <Finger_Print_Match+0x420>
    3c20:	fe 01       	movw	r30, r28
    3c22:	eb 59       	subi	r30, 0x9B	; 155
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	91 83       	std	Z+1, r25	; 0x01
    3c28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2a:	de 01       	movw	r26, r28
    3c2c:	a9 59       	subi	r26, 0x99	; 153
    3c2e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c30:	fe 01       	movw	r30, r28
    3c32:	e9 59       	subi	r30, 0x99	; 153
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	80 81       	ld	r24, Z
    3c38:	91 81       	ldd	r25, Z+1	; 0x01
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	11 96       	adiw	r26, 0x01	; 1
    3c3e:	9c 93       	st	X, r25
    3c40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c42:	fe 01       	movw	r30, r28
    3c44:	e9 59       	subi	r30, 0x99	; 153
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	80 81       	ld	r24, Z
    3c4a:	91 81       	ldd	r25, Z+1	; 0x01
    3c4c:	00 97       	sbiw	r24, 0x00	; 0
    3c4e:	d1 f6       	brne	.-76     	; 0x3c04 <Finger_Print_Match+0x408>
    3c50:	28 c0       	rjmp	.+80     	; 0x3ca2 <Finger_Print_Match+0x4a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c52:	8e 01       	movw	r16, r28
    3c54:	09 59       	subi	r16, 0x99	; 153
    3c56:	1f 4f       	sbci	r17, 0xFF	; 255
    3c58:	fe 01       	movw	r30, r28
    3c5a:	e7 59       	subi	r30, 0x97	; 151
    3c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5e:	60 81       	ld	r22, Z
    3c60:	71 81       	ldd	r23, Z+1	; 0x01
    3c62:	82 81       	ldd	r24, Z+2	; 0x02
    3c64:	93 81       	ldd	r25, Z+3	; 0x03
    3c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	f8 01       	movw	r30, r16
    3c70:	91 83       	std	Z+1, r25	; 0x01
    3c72:	80 83       	st	Z, r24
    3c74:	de 01       	movw	r26, r28
    3c76:	ad 59       	subi	r26, 0x9D	; 157
    3c78:	bf 4f       	sbci	r27, 0xFF	; 255
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	e9 59       	subi	r30, 0x99	; 153
    3c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c80:	80 81       	ld	r24, Z
    3c82:	91 81       	ldd	r25, Z+1	; 0x01
    3c84:	11 96       	adiw	r26, 0x01	; 1
    3c86:	9c 93       	st	X, r25
    3c88:	8e 93       	st	-X, r24
    3c8a:	fe 01       	movw	r30, r28
    3c8c:	ed 59       	subi	r30, 0x9D	; 157
    3c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c90:	80 81       	ld	r24, Z
    3c92:	91 81       	ldd	r25, Z+1	; 0x01
    3c94:	01 97       	sbiw	r24, 0x01	; 1
    3c96:	f1 f7       	brne	.-4      	; 0x3c94 <Finger_Print_Match+0x498>
    3c98:	fe 01       	movw	r30, r28
    3c9a:	ed 59       	subi	r30, 0x9D	; 157
    3c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9e:	91 83       	std	Z+1, r25	; 0x01
    3ca0:	80 83       	st	Z, r24
				_delay_ms(1000);
				Gen_Img_Flag_Match=0;
    3ca2:	10 92 ce 05 	sts	0x05CE, r1
    3ca6:	a6 c1       	rjmp	.+844    	; 0x3ff4 <Finger_Print_Match+0x7f8>
				break;
			}
			else if(Buffer[Confirmation_Code]==Error_When_Receiving_Package_Gen)
    3ca8:	80 91 ef 05 	lds	r24, 0x05EF
    3cac:	81 30       	cpi	r24, 0x01	; 1
    3cae:	19 f4       	brne	.+6      	; 0x3cb6 <Finger_Print_Match+0x4ba>
			{
				Flush_Buffer();
    3cb0:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    3cb4:	0f c0       	rjmp	.+30     	; 0x3cd4 <Finger_Print_Match+0x4d8>
			}
			else if(Buffer[Confirmation_Code]==Can_not_detect_finger)
    3cb6:	80 91 ef 05 	lds	r24, 0x05EF
    3cba:	82 30       	cpi	r24, 0x02	; 2
    3cbc:	49 f4       	brne	.+18     	; 0x3cd0 <Finger_Print_Match+0x4d4>
			{
				H_LCD_void_ClearDisplay();
    3cbe:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("Check Finger again");
    3cc2:	88 e9       	ldi	r24, 0x98	; 152
    3cc4:	90 e0       	ldi	r25, 0x00	; 0
    3cc6:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
				Flush_Buffer();
    3cca:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    3cce:	02 c0       	rjmp	.+4      	; 0x3cd4 <Finger_Print_Match+0x4d8>
			}
			else
			{
				Flush_Buffer();
    3cd0:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
	_delay_ms(3000);
	while(Match_flag)
	{
		Gen_Img_Flag_Match=1;

		while(Gen_Img_Flag_Match)
    3cd4:	80 91 ce 05 	lds	r24, 0x05CE
    3cd8:	88 23       	and	r24, r24
    3cda:	09 f0       	breq	.+2      	; 0x3cde <Finger_Print_Match+0x4e2>
    3cdc:	60 ce       	rjmp	.-832    	; 0x399e <Finger_Print_Match+0x1a2>
    3cde:	8a c1       	rjmp	.+788    	; 0x3ff4 <Finger_Print_Match+0x7f8>


		while(Img_2_TZ_Flag_Match)
		{

			Finger_Print_Send_Command(Img2TZ_1,IMAGE_2TZ_1_LENGTH);
    3ce0:	88 e8       	ldi	r24, 0x88	; 136
    3ce2:	94 e0       	ldi	r25, 0x04	; 4
    3ce4:	6d e0       	ldi	r22, 0x0D	; 13
    3ce6:	0e 94 99 14 	call	0x2932	; 0x2932 <Finger_Print_Send_Command>
			if(Buffer[Confirmation_Code]==Generate_character_file_complete)
    3cea:	80 91 ef 05 	lds	r24, 0x05EF
    3cee:	88 23       	and	r24, r24
    3cf0:	09 f0       	breq	.+2      	; 0x3cf4 <Finger_Print_Match+0x4f8>
    3cf2:	ca c0       	rjmp	.+404    	; 0x3e88 <Finger_Print_Match+0x68c>
			{
				//H_LCD_void_ClearDisplay();
				//H_LCD_void_sendString("Check 1 done");
				Flush_Buffer();
    3cf4:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
				Search_Flag=1;
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	80 93 d3 05 	sts	0x05D3, r24
				H_LCD_void_ClearDisplay();
    3cfe:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("Check done");
    3d02:	83 e0       	ldi	r24, 0x03	; 3
    3d04:	91 e0       	ldi	r25, 0x01	; 1
    3d06:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
				H_LCD_void_gotoXY(2,0);
    3d0a:	82 e0       	ldi	r24, 0x02	; 2
    3d0c:	60 e0       	ldi	r22, 0x00	; 0
    3d0e:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
				H_LCD_void_sendString("Searching");
    3d12:	8e e0       	ldi	r24, 0x0E	; 14
    3d14:	91 e0       	ldi	r25, 0x01	; 1
    3d16:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	e1 5a       	subi	r30, 0xA1	; 161
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	80 e0       	ldi	r24, 0x00	; 0
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	aa e7       	ldi	r26, 0x7A	; 122
    3d26:	b4 e4       	ldi	r27, 0x44	; 68
    3d28:	80 83       	st	Z, r24
    3d2a:	91 83       	std	Z+1, r25	; 0x01
    3d2c:	a2 83       	std	Z+2, r26	; 0x02
    3d2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d30:	8e 01       	movw	r16, r28
    3d32:	05 5a       	subi	r16, 0xA5	; 165
    3d34:	1f 4f       	sbci	r17, 0xFF	; 255
    3d36:	fe 01       	movw	r30, r28
    3d38:	e1 5a       	subi	r30, 0xA1	; 161
    3d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d3c:	60 81       	ld	r22, Z
    3d3e:	71 81       	ldd	r23, Z+1	; 0x01
    3d40:	82 81       	ldd	r24, Z+2	; 0x02
    3d42:	93 81       	ldd	r25, Z+3	; 0x03
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	4a e7       	ldi	r20, 0x7A	; 122
    3d4a:	55 e4       	ldi	r21, 0x45	; 69
    3d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	f8 01       	movw	r30, r16
    3d56:	80 83       	st	Z, r24
    3d58:	91 83       	std	Z+1, r25	; 0x01
    3d5a:	a2 83       	std	Z+2, r26	; 0x02
    3d5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d5e:	fe 01       	movw	r30, r28
    3d60:	e5 5a       	subi	r30, 0xA5	; 165
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	60 81       	ld	r22, Z
    3d66:	71 81       	ldd	r23, Z+1	; 0x01
    3d68:	82 81       	ldd	r24, Z+2	; 0x02
    3d6a:	93 81       	ldd	r25, Z+3	; 0x03
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e8       	ldi	r20, 0x80	; 128
    3d72:	5f e3       	ldi	r21, 0x3F	; 63
    3d74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d78:	88 23       	and	r24, r24
    3d7a:	44 f4       	brge	.+16     	; 0x3d8c <Finger_Print_Match+0x590>
		__ticks = 1;
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e7 5a       	subi	r30, 0xA7	; 167
    3d80:	ff 4f       	sbci	r31, 0xFF	; 255
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	91 83       	std	Z+1, r25	; 0x01
    3d88:	80 83       	st	Z, r24
    3d8a:	64 c0       	rjmp	.+200    	; 0x3e54 <Finger_Print_Match+0x658>
	else if (__tmp > 65535)
    3d8c:	fe 01       	movw	r30, r28
    3d8e:	e5 5a       	subi	r30, 0xA5	; 165
    3d90:	ff 4f       	sbci	r31, 0xFF	; 255
    3d92:	60 81       	ld	r22, Z
    3d94:	71 81       	ldd	r23, Z+1	; 0x01
    3d96:	82 81       	ldd	r24, Z+2	; 0x02
    3d98:	93 81       	ldd	r25, Z+3	; 0x03
    3d9a:	20 e0       	ldi	r18, 0x00	; 0
    3d9c:	3f ef       	ldi	r19, 0xFF	; 255
    3d9e:	4f e7       	ldi	r20, 0x7F	; 127
    3da0:	57 e4       	ldi	r21, 0x47	; 71
    3da2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3da6:	18 16       	cp	r1, r24
    3da8:	0c f0       	brlt	.+2      	; 0x3dac <Finger_Print_Match+0x5b0>
    3daa:	43 c0       	rjmp	.+134    	; 0x3e32 <Finger_Print_Match+0x636>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dac:	fe 01       	movw	r30, r28
    3dae:	e1 5a       	subi	r30, 0xA1	; 161
    3db0:	ff 4f       	sbci	r31, 0xFF	; 255
    3db2:	60 81       	ld	r22, Z
    3db4:	71 81       	ldd	r23, Z+1	; 0x01
    3db6:	82 81       	ldd	r24, Z+2	; 0x02
    3db8:	93 81       	ldd	r25, Z+3	; 0x03
    3dba:	20 e0       	ldi	r18, 0x00	; 0
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	40 e2       	ldi	r20, 0x20	; 32
    3dc0:	51 e4       	ldi	r21, 0x41	; 65
    3dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	8e 01       	movw	r16, r28
    3dcc:	07 5a       	subi	r16, 0xA7	; 167
    3dce:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd0:	bc 01       	movw	r22, r24
    3dd2:	cd 01       	movw	r24, r26
    3dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	f8 01       	movw	r30, r16
    3dde:	91 83       	std	Z+1, r25	; 0x01
    3de0:	80 83       	st	Z, r24
    3de2:	1f c0       	rjmp	.+62     	; 0x3e22 <Finger_Print_Match+0x626>
    3de4:	fe 01       	movw	r30, r28
    3de6:	e9 5a       	subi	r30, 0xA9	; 169
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	80 e9       	ldi	r24, 0x90	; 144
    3dec:	91 e0       	ldi	r25, 0x01	; 1
    3dee:	91 83       	std	Z+1, r25	; 0x01
    3df0:	80 83       	st	Z, r24
    3df2:	fe 01       	movw	r30, r28
    3df4:	e9 5a       	subi	r30, 0xA9	; 169
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	f1 f7       	brne	.-4      	; 0x3dfc <Finger_Print_Match+0x600>
    3e00:	fe 01       	movw	r30, r28
    3e02:	e9 5a       	subi	r30, 0xA9	; 169
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	91 83       	std	Z+1, r25	; 0x01
    3e08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e0a:	de 01       	movw	r26, r28
    3e0c:	a7 5a       	subi	r26, 0xA7	; 167
    3e0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3e10:	fe 01       	movw	r30, r28
    3e12:	e7 5a       	subi	r30, 0xA7	; 167
    3e14:	ff 4f       	sbci	r31, 0xFF	; 255
    3e16:	80 81       	ld	r24, Z
    3e18:	91 81       	ldd	r25, Z+1	; 0x01
    3e1a:	01 97       	sbiw	r24, 0x01	; 1
    3e1c:	11 96       	adiw	r26, 0x01	; 1
    3e1e:	9c 93       	st	X, r25
    3e20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e22:	fe 01       	movw	r30, r28
    3e24:	e7 5a       	subi	r30, 0xA7	; 167
    3e26:	ff 4f       	sbci	r31, 0xFF	; 255
    3e28:	80 81       	ld	r24, Z
    3e2a:	91 81       	ldd	r25, Z+1	; 0x01
    3e2c:	00 97       	sbiw	r24, 0x00	; 0
    3e2e:	d1 f6       	brne	.-76     	; 0x3de4 <Finger_Print_Match+0x5e8>
    3e30:	28 c0       	rjmp	.+80     	; 0x3e82 <Finger_Print_Match+0x686>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e32:	8e 01       	movw	r16, r28
    3e34:	07 5a       	subi	r16, 0xA7	; 167
    3e36:	1f 4f       	sbci	r17, 0xFF	; 255
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e5 5a       	subi	r30, 0xA5	; 165
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	60 81       	ld	r22, Z
    3e40:	71 81       	ldd	r23, Z+1	; 0x01
    3e42:	82 81       	ldd	r24, Z+2	; 0x02
    3e44:	93 81       	ldd	r25, Z+3	; 0x03
    3e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	f8 01       	movw	r30, r16
    3e50:	91 83       	std	Z+1, r25	; 0x01
    3e52:	80 83       	st	Z, r24
    3e54:	de 01       	movw	r26, r28
    3e56:	ab 5a       	subi	r26, 0xAB	; 171
    3e58:	bf 4f       	sbci	r27, 0xFF	; 255
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	e7 5a       	subi	r30, 0xA7	; 167
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	80 81       	ld	r24, Z
    3e62:	91 81       	ldd	r25, Z+1	; 0x01
    3e64:	11 96       	adiw	r26, 0x01	; 1
    3e66:	9c 93       	st	X, r25
    3e68:	8e 93       	st	-X, r24
    3e6a:	fe 01       	movw	r30, r28
    3e6c:	eb 5a       	subi	r30, 0xAB	; 171
    3e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e70:	80 81       	ld	r24, Z
    3e72:	91 81       	ldd	r25, Z+1	; 0x01
    3e74:	01 97       	sbiw	r24, 0x01	; 1
    3e76:	f1 f7       	brne	.-4      	; 0x3e74 <Finger_Print_Match+0x678>
    3e78:	fe 01       	movw	r30, r28
    3e7a:	eb 5a       	subi	r30, 0xAB	; 171
    3e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7e:	91 83       	std	Z+1, r25	; 0x01
    3e80:	80 83       	st	Z, r24
				_delay_ms(1000);
				Img_2_TZ_Flag_Match=0;
    3e82:	10 92 d0 05 	sts	0x05D0, r1
    3e86:	e4 c3       	rjmp	.+1992   	; 0x4650 <Finger_Print_Match+0xe54>
				break;
			}
			else
			{
				Flush_Buffer();
    3e88:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	ef 5a       	subi	r30, 0xAF	; 175
    3e90:	ff 4f       	sbci	r31, 0xFF	; 255
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	aa e7       	ldi	r26, 0x7A	; 122
    3e98:	b4 e4       	ldi	r27, 0x44	; 68
    3e9a:	80 83       	st	Z, r24
    3e9c:	91 83       	std	Z+1, r25	; 0x01
    3e9e:	a2 83       	std	Z+2, r26	; 0x02
    3ea0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ea2:	8e 01       	movw	r16, r28
    3ea4:	03 5b       	subi	r16, 0xB3	; 179
    3ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea8:	fe 01       	movw	r30, r28
    3eaa:	ef 5a       	subi	r30, 0xAF	; 175
    3eac:	ff 4f       	sbci	r31, 0xFF	; 255
    3eae:	60 81       	ld	r22, Z
    3eb0:	71 81       	ldd	r23, Z+1	; 0x01
    3eb2:	82 81       	ldd	r24, Z+2	; 0x02
    3eb4:	93 81       	ldd	r25, Z+3	; 0x03
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	4a e7       	ldi	r20, 0x7A	; 122
    3ebc:	55 e4       	ldi	r21, 0x45	; 69
    3ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec2:	dc 01       	movw	r26, r24
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	f8 01       	movw	r30, r16
    3ec8:	80 83       	st	Z, r24
    3eca:	91 83       	std	Z+1, r25	; 0x01
    3ecc:	a2 83       	std	Z+2, r26	; 0x02
    3ece:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ed0:	fe 01       	movw	r30, r28
    3ed2:	e3 5b       	subi	r30, 0xB3	; 179
    3ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed6:	60 81       	ld	r22, Z
    3ed8:	71 81       	ldd	r23, Z+1	; 0x01
    3eda:	82 81       	ldd	r24, Z+2	; 0x02
    3edc:	93 81       	ldd	r25, Z+3	; 0x03
    3ede:	20 e0       	ldi	r18, 0x00	; 0
    3ee0:	30 e0       	ldi	r19, 0x00	; 0
    3ee2:	40 e8       	ldi	r20, 0x80	; 128
    3ee4:	5f e3       	ldi	r21, 0x3F	; 63
    3ee6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eea:	88 23       	and	r24, r24
    3eec:	44 f4       	brge	.+16     	; 0x3efe <Finger_Print_Match+0x702>
		__ticks = 1;
    3eee:	fe 01       	movw	r30, r28
    3ef0:	e5 5b       	subi	r30, 0xB5	; 181
    3ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef4:	81 e0       	ldi	r24, 0x01	; 1
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	91 83       	std	Z+1, r25	; 0x01
    3efa:	80 83       	st	Z, r24
    3efc:	64 c0       	rjmp	.+200    	; 0x3fc6 <Finger_Print_Match+0x7ca>
	else if (__tmp > 65535)
    3efe:	fe 01       	movw	r30, r28
    3f00:	e3 5b       	subi	r30, 0xB3	; 179
    3f02:	ff 4f       	sbci	r31, 0xFF	; 255
    3f04:	60 81       	ld	r22, Z
    3f06:	71 81       	ldd	r23, Z+1	; 0x01
    3f08:	82 81       	ldd	r24, Z+2	; 0x02
    3f0a:	93 81       	ldd	r25, Z+3	; 0x03
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	3f ef       	ldi	r19, 0xFF	; 255
    3f10:	4f e7       	ldi	r20, 0x7F	; 127
    3f12:	57 e4       	ldi	r21, 0x47	; 71
    3f14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f18:	18 16       	cp	r1, r24
    3f1a:	0c f0       	brlt	.+2      	; 0x3f1e <Finger_Print_Match+0x722>
    3f1c:	43 c0       	rjmp	.+134    	; 0x3fa4 <Finger_Print_Match+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1e:	fe 01       	movw	r30, r28
    3f20:	ef 5a       	subi	r30, 0xAF	; 175
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	60 81       	ld	r22, Z
    3f26:	71 81       	ldd	r23, Z+1	; 0x01
    3f28:	82 81       	ldd	r24, Z+2	; 0x02
    3f2a:	93 81       	ldd	r25, Z+3	; 0x03
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	40 e2       	ldi	r20, 0x20	; 32
    3f32:	51 e4       	ldi	r21, 0x41	; 65
    3f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f38:	dc 01       	movw	r26, r24
    3f3a:	cb 01       	movw	r24, r22
    3f3c:	8e 01       	movw	r16, r28
    3f3e:	05 5b       	subi	r16, 0xB5	; 181
    3f40:	1f 4f       	sbci	r17, 0xFF	; 255
    3f42:	bc 01       	movw	r22, r24
    3f44:	cd 01       	movw	r24, r26
    3f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	f8 01       	movw	r30, r16
    3f50:	91 83       	std	Z+1, r25	; 0x01
    3f52:	80 83       	st	Z, r24
    3f54:	1f c0       	rjmp	.+62     	; 0x3f94 <Finger_Print_Match+0x798>
    3f56:	fe 01       	movw	r30, r28
    3f58:	e7 5b       	subi	r30, 0xB7	; 183
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	80 e9       	ldi	r24, 0x90	; 144
    3f5e:	91 e0       	ldi	r25, 0x01	; 1
    3f60:	91 83       	std	Z+1, r25	; 0x01
    3f62:	80 83       	st	Z, r24
    3f64:	fe 01       	movw	r30, r28
    3f66:	e7 5b       	subi	r30, 0xB7	; 183
    3f68:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6a:	80 81       	ld	r24, Z
    3f6c:	91 81       	ldd	r25, Z+1	; 0x01
    3f6e:	01 97       	sbiw	r24, 0x01	; 1
    3f70:	f1 f7       	brne	.-4      	; 0x3f6e <Finger_Print_Match+0x772>
    3f72:	fe 01       	movw	r30, r28
    3f74:	e7 5b       	subi	r30, 0xB7	; 183
    3f76:	ff 4f       	sbci	r31, 0xFF	; 255
    3f78:	91 83       	std	Z+1, r25	; 0x01
    3f7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f7c:	de 01       	movw	r26, r28
    3f7e:	a5 5b       	subi	r26, 0xB5	; 181
    3f80:	bf 4f       	sbci	r27, 0xFF	; 255
    3f82:	fe 01       	movw	r30, r28
    3f84:	e5 5b       	subi	r30, 0xB5	; 181
    3f86:	ff 4f       	sbci	r31, 0xFF	; 255
    3f88:	80 81       	ld	r24, Z
    3f8a:	91 81       	ldd	r25, Z+1	; 0x01
    3f8c:	01 97       	sbiw	r24, 0x01	; 1
    3f8e:	11 96       	adiw	r26, 0x01	; 1
    3f90:	9c 93       	st	X, r25
    3f92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f94:	fe 01       	movw	r30, r28
    3f96:	e5 5b       	subi	r30, 0xB5	; 181
    3f98:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9a:	80 81       	ld	r24, Z
    3f9c:	91 81       	ldd	r25, Z+1	; 0x01
    3f9e:	00 97       	sbiw	r24, 0x00	; 0
    3fa0:	d1 f6       	brne	.-76     	; 0x3f56 <Finger_Print_Match+0x75a>
    3fa2:	28 c0       	rjmp	.+80     	; 0x3ff4 <Finger_Print_Match+0x7f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fa4:	8e 01       	movw	r16, r28
    3fa6:	05 5b       	subi	r16, 0xB5	; 181
    3fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3faa:	fe 01       	movw	r30, r28
    3fac:	e3 5b       	subi	r30, 0xB3	; 179
    3fae:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb0:	60 81       	ld	r22, Z
    3fb2:	71 81       	ldd	r23, Z+1	; 0x01
    3fb4:	82 81       	ldd	r24, Z+2	; 0x02
    3fb6:	93 81       	ldd	r25, Z+3	; 0x03
    3fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fbc:	dc 01       	movw	r26, r24
    3fbe:	cb 01       	movw	r24, r22
    3fc0:	f8 01       	movw	r30, r16
    3fc2:	91 83       	std	Z+1, r25	; 0x01
    3fc4:	80 83       	st	Z, r24
    3fc6:	de 01       	movw	r26, r28
    3fc8:	a9 5b       	subi	r26, 0xB9	; 185
    3fca:	bf 4f       	sbci	r27, 0xFF	; 255
    3fcc:	fe 01       	movw	r30, r28
    3fce:	e5 5b       	subi	r30, 0xB5	; 181
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	80 81       	ld	r24, Z
    3fd4:	91 81       	ldd	r25, Z+1	; 0x01
    3fd6:	11 96       	adiw	r26, 0x01	; 1
    3fd8:	9c 93       	st	X, r25
    3fda:	8e 93       	st	-X, r24
    3fdc:	fe 01       	movw	r30, r28
    3fde:	e9 5b       	subi	r30, 0xB9	; 185
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	80 81       	ld	r24, Z
    3fe4:	91 81       	ldd	r25, Z+1	; 0x01
    3fe6:	01 97       	sbiw	r24, 0x01	; 1
    3fe8:	f1 f7       	brne	.-4      	; 0x3fe6 <Finger_Print_Match+0x7ea>
    3fea:	fe 01       	movw	r30, r28
    3fec:	e9 5b       	subi	r30, 0xB9	; 185
    3fee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff0:	91 83       	std	Z+1, r25	; 0x01
    3ff2:	80 83       	st	Z, r24
				Flush_Buffer();
			}
		}


		while(Img_2_TZ_Flag_Match)
    3ff4:	80 91 d0 05 	lds	r24, 0x05D0
    3ff8:	88 23       	and	r24, r24
    3ffa:	09 f0       	breq	.+2      	; 0x3ffe <Finger_Print_Match+0x802>
    3ffc:	71 ce       	rjmp	.-798    	; 0x3ce0 <Finger_Print_Match+0x4e4>
    3ffe:	28 c3       	rjmp	.+1616   	; 0x4650 <Finger_Print_Match+0xe54>
			}

		}
		while(Search_Flag)
		{
			Finger_Print_Send_Command(Search,SEARCH_LENGTH);
    4000:	8e ea       	ldi	r24, 0xAE	; 174
    4002:	94 e0       	ldi	r25, 0x04	; 4
    4004:	61 e1       	ldi	r22, 0x11	; 17
    4006:	0e 94 99 14 	call	0x2932	; 0x2932 <Finger_Print_Send_Command>
			if(Buffer[Confirmation_Code]==Found_matching_finger)
    400a:	80 91 ef 05 	lds	r24, 0x05EF
    400e:	88 23       	and	r24, r24
    4010:	09 f0       	breq	.+2      	; 0x4014 <Finger_Print_Match+0x818>
    4012:	94 c2       	rjmp	.+1320   	; 0x453c <Finger_Print_Match+0xd40>
			{
				for(u8 i=0;i<16;i++)
    4014:	fe 01       	movw	r30, r28
    4016:	e3 57       	subi	r30, 0x73	; 115
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	10 82       	st	Z, r1
    401c:	1d c0       	rjmp	.+58     	; 0x4058 <Finger_Print_Match+0x85c>
				{
					Search_Buffer[i]=Buffer[i];
    401e:	fe 01       	movw	r30, r28
    4020:	e3 57       	subi	r30, 0x73	; 115
    4022:	ff 4f       	sbci	r31, 0xFF	; 255
    4024:	80 81       	ld	r24, Z
    4026:	28 2f       	mov	r18, r24
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	fe 01       	movw	r30, r28
    402c:	e3 57       	subi	r30, 0x73	; 115
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	80 81       	ld	r24, Z
    4032:	88 2f       	mov	r24, r24
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	fc 01       	movw	r30, r24
    4038:	ea 51       	subi	r30, 0x1A	; 26
    403a:	fa 4f       	sbci	r31, 0xFA	; 250
    403c:	80 81       	ld	r24, Z
    403e:	f9 01       	movw	r30, r18
    4040:	ea 52       	subi	r30, 0x2A	; 42
    4042:	fa 4f       	sbci	r31, 0xFA	; 250
    4044:	80 83       	st	Z, r24
		while(Search_Flag)
		{
			Finger_Print_Send_Command(Search,SEARCH_LENGTH);
			if(Buffer[Confirmation_Code]==Found_matching_finger)
			{
				for(u8 i=0;i<16;i++)
    4046:	de 01       	movw	r26, r28
    4048:	a3 57       	subi	r26, 0x73	; 115
    404a:	bf 4f       	sbci	r27, 0xFF	; 255
    404c:	fe 01       	movw	r30, r28
    404e:	e3 57       	subi	r30, 0x73	; 115
    4050:	ff 4f       	sbci	r31, 0xFF	; 255
    4052:	80 81       	ld	r24, Z
    4054:	8f 5f       	subi	r24, 0xFF	; 255
    4056:	8c 93       	st	X, r24
    4058:	fe 01       	movw	r30, r28
    405a:	e3 57       	subi	r30, 0x73	; 115
    405c:	ff 4f       	sbci	r31, 0xFF	; 255
    405e:	80 81       	ld	r24, Z
    4060:	80 31       	cpi	r24, 0x10	; 16
    4062:	e8 f2       	brcs	.-70     	; 0x401e <Finger_Print_Match+0x822>
				{
					Search_Buffer[i]=Buffer[i];
				}
				H_LCD_void_ClearDisplay();
    4064:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("FingerPrint Found");
    4068:	88 e1       	ldi	r24, 0x18	; 24
    406a:	91 e0       	ldi	r25, 0x01	; 1
    406c:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    4070:	fe 01       	movw	r30, r28
    4072:	ed 5b       	subi	r30, 0xBD	; 189
    4074:	ff 4f       	sbci	r31, 0xFF	; 255
    4076:	80 e0       	ldi	r24, 0x00	; 0
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	aa ef       	ldi	r26, 0xFA	; 250
    407c:	b4 e4       	ldi	r27, 0x44	; 68
    407e:	80 83       	st	Z, r24
    4080:	91 83       	std	Z+1, r25	; 0x01
    4082:	a2 83       	std	Z+2, r26	; 0x02
    4084:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4086:	8e 01       	movw	r16, r28
    4088:	01 5c       	subi	r16, 0xC1	; 193
    408a:	1f 4f       	sbci	r17, 0xFF	; 255
    408c:	fe 01       	movw	r30, r28
    408e:	ed 5b       	subi	r30, 0xBD	; 189
    4090:	ff 4f       	sbci	r31, 0xFF	; 255
    4092:	60 81       	ld	r22, Z
    4094:	71 81       	ldd	r23, Z+1	; 0x01
    4096:	82 81       	ldd	r24, Z+2	; 0x02
    4098:	93 81       	ldd	r25, Z+3	; 0x03
    409a:	20 e0       	ldi	r18, 0x00	; 0
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	4a e7       	ldi	r20, 0x7A	; 122
    40a0:	55 e4       	ldi	r21, 0x45	; 69
    40a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40a6:	dc 01       	movw	r26, r24
    40a8:	cb 01       	movw	r24, r22
    40aa:	f8 01       	movw	r30, r16
    40ac:	80 83       	st	Z, r24
    40ae:	91 83       	std	Z+1, r25	; 0x01
    40b0:	a2 83       	std	Z+2, r26	; 0x02
    40b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40b4:	fe 01       	movw	r30, r28
    40b6:	ff 96       	adiw	r30, 0x3f	; 63
    40b8:	60 81       	ld	r22, Z
    40ba:	71 81       	ldd	r23, Z+1	; 0x01
    40bc:	82 81       	ldd	r24, Z+2	; 0x02
    40be:	93 81       	ldd	r25, Z+3	; 0x03
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	40 e8       	ldi	r20, 0x80	; 128
    40c6:	5f e3       	ldi	r21, 0x3F	; 63
    40c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40cc:	88 23       	and	r24, r24
    40ce:	2c f4       	brge	.+10     	; 0x40da <Finger_Print_Match+0x8de>
		__ticks = 1;
    40d0:	81 e0       	ldi	r24, 0x01	; 1
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	9e af       	std	Y+62, r25	; 0x3e
    40d6:	8d af       	std	Y+61, r24	; 0x3d
    40d8:	46 c0       	rjmp	.+140    	; 0x4166 <Finger_Print_Match+0x96a>
	else if (__tmp > 65535)
    40da:	fe 01       	movw	r30, r28
    40dc:	ff 96       	adiw	r30, 0x3f	; 63
    40de:	60 81       	ld	r22, Z
    40e0:	71 81       	ldd	r23, Z+1	; 0x01
    40e2:	82 81       	ldd	r24, Z+2	; 0x02
    40e4:	93 81       	ldd	r25, Z+3	; 0x03
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	3f ef       	ldi	r19, 0xFF	; 255
    40ea:	4f e7       	ldi	r20, 0x7F	; 127
    40ec:	57 e4       	ldi	r21, 0x47	; 71
    40ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40f2:	18 16       	cp	r1, r24
    40f4:	64 f5       	brge	.+88     	; 0x414e <Finger_Print_Match+0x952>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40f6:	fe 01       	movw	r30, r28
    40f8:	ed 5b       	subi	r30, 0xBD	; 189
    40fa:	ff 4f       	sbci	r31, 0xFF	; 255
    40fc:	60 81       	ld	r22, Z
    40fe:	71 81       	ldd	r23, Z+1	; 0x01
    4100:	82 81       	ldd	r24, Z+2	; 0x02
    4102:	93 81       	ldd	r25, Z+3	; 0x03
    4104:	20 e0       	ldi	r18, 0x00	; 0
    4106:	30 e0       	ldi	r19, 0x00	; 0
    4108:	40 e2       	ldi	r20, 0x20	; 32
    410a:	51 e4       	ldi	r21, 0x41	; 65
    410c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	bc 01       	movw	r22, r24
    4116:	cd 01       	movw	r24, r26
    4118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    411c:	dc 01       	movw	r26, r24
    411e:	cb 01       	movw	r24, r22
    4120:	9e af       	std	Y+62, r25	; 0x3e
    4122:	8d af       	std	Y+61, r24	; 0x3d
    4124:	0f c0       	rjmp	.+30     	; 0x4144 <Finger_Print_Match+0x948>
    4126:	80 e9       	ldi	r24, 0x90	; 144
    4128:	91 e0       	ldi	r25, 0x01	; 1
    412a:	9c af       	std	Y+60, r25	; 0x3c
    412c:	8b af       	std	Y+59, r24	; 0x3b
    412e:	8b ad       	ldd	r24, Y+59	; 0x3b
    4130:	9c ad       	ldd	r25, Y+60	; 0x3c
    4132:	01 97       	sbiw	r24, 0x01	; 1
    4134:	f1 f7       	brne	.-4      	; 0x4132 <Finger_Print_Match+0x936>
    4136:	9c af       	std	Y+60, r25	; 0x3c
    4138:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    413a:	8d ad       	ldd	r24, Y+61	; 0x3d
    413c:	9e ad       	ldd	r25, Y+62	; 0x3e
    413e:	01 97       	sbiw	r24, 0x01	; 1
    4140:	9e af       	std	Y+62, r25	; 0x3e
    4142:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4144:	8d ad       	ldd	r24, Y+61	; 0x3d
    4146:	9e ad       	ldd	r25, Y+62	; 0x3e
    4148:	00 97       	sbiw	r24, 0x00	; 0
    414a:	69 f7       	brne	.-38     	; 0x4126 <Finger_Print_Match+0x92a>
    414c:	16 c0       	rjmp	.+44     	; 0x417a <Finger_Print_Match+0x97e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    414e:	fe 01       	movw	r30, r28
    4150:	ff 96       	adiw	r30, 0x3f	; 63
    4152:	60 81       	ld	r22, Z
    4154:	71 81       	ldd	r23, Z+1	; 0x01
    4156:	82 81       	ldd	r24, Z+2	; 0x02
    4158:	93 81       	ldd	r25, Z+3	; 0x03
    415a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    415e:	dc 01       	movw	r26, r24
    4160:	cb 01       	movw	r24, r22
    4162:	9e af       	std	Y+62, r25	; 0x3e
    4164:	8d af       	std	Y+61, r24	; 0x3d
    4166:	8d ad       	ldd	r24, Y+61	; 0x3d
    4168:	9e ad       	ldd	r25, Y+62	; 0x3e
    416a:	9a af       	std	Y+58, r25	; 0x3a
    416c:	89 af       	std	Y+57, r24	; 0x39
    416e:	89 ad       	ldd	r24, Y+57	; 0x39
    4170:	9a ad       	ldd	r25, Y+58	; 0x3a
    4172:	01 97       	sbiw	r24, 0x01	; 1
    4174:	f1 f7       	brne	.-4      	; 0x4172 <Finger_Print_Match+0x976>
    4176:	9a af       	std	Y+58, r25	; 0x3a
    4178:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(2000);
				H_LCD_void_ClearDisplay();
    417a:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>

				H_LCD_void_sendIntNum(Search_Buffer[11]);
    417e:	80 91 e1 05 	lds	r24, 0x05E1
    4182:	88 2f       	mov	r24, r24
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	a0 e0       	ldi	r26, 0x00	; 0
    4188:	b0 e0       	ldi	r27, 0x00	; 0
    418a:	bc 01       	movw	r22, r24
    418c:	cd 01       	movw	r24, r26
    418e:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>
    4192:	80 e0       	ldi	r24, 0x00	; 0
    4194:	90 e4       	ldi	r25, 0x40	; 64
    4196:	ac e9       	ldi	r26, 0x9C	; 156
    4198:	b5 e4       	ldi	r27, 0x45	; 69
    419a:	8d ab       	std	Y+53, r24	; 0x35
    419c:	9e ab       	std	Y+54, r25	; 0x36
    419e:	af ab       	std	Y+55, r26	; 0x37
    41a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a2:	6d a9       	ldd	r22, Y+53	; 0x35
    41a4:	7e a9       	ldd	r23, Y+54	; 0x36
    41a6:	8f a9       	ldd	r24, Y+55	; 0x37
    41a8:	98 ad       	ldd	r25, Y+56	; 0x38
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	4a e7       	ldi	r20, 0x7A	; 122
    41b0:	55 e4       	ldi	r21, 0x45	; 69
    41b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b6:	dc 01       	movw	r26, r24
    41b8:	cb 01       	movw	r24, r22
    41ba:	89 ab       	std	Y+49, r24	; 0x31
    41bc:	9a ab       	std	Y+50, r25	; 0x32
    41be:	ab ab       	std	Y+51, r26	; 0x33
    41c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    41c2:	69 a9       	ldd	r22, Y+49	; 0x31
    41c4:	7a a9       	ldd	r23, Y+50	; 0x32
    41c6:	8b a9       	ldd	r24, Y+51	; 0x33
    41c8:	9c a9       	ldd	r25, Y+52	; 0x34
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	40 e8       	ldi	r20, 0x80	; 128
    41d0:	5f e3       	ldi	r21, 0x3F	; 63
    41d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41d6:	88 23       	and	r24, r24
    41d8:	2c f4       	brge	.+10     	; 0x41e4 <Finger_Print_Match+0x9e8>
		__ticks = 1;
    41da:	81 e0       	ldi	r24, 0x01	; 1
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	98 ab       	std	Y+48, r25	; 0x30
    41e0:	8f a7       	std	Y+47, r24	; 0x2f
    41e2:	3f c0       	rjmp	.+126    	; 0x4262 <Finger_Print_Match+0xa66>
	else if (__tmp > 65535)
    41e4:	69 a9       	ldd	r22, Y+49	; 0x31
    41e6:	7a a9       	ldd	r23, Y+50	; 0x32
    41e8:	8b a9       	ldd	r24, Y+51	; 0x33
    41ea:	9c a9       	ldd	r25, Y+52	; 0x34
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	3f ef       	ldi	r19, 0xFF	; 255
    41f0:	4f e7       	ldi	r20, 0x7F	; 127
    41f2:	57 e4       	ldi	r21, 0x47	; 71
    41f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41f8:	18 16       	cp	r1, r24
    41fa:	4c f5       	brge	.+82     	; 0x424e <Finger_Print_Match+0xa52>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41fc:	6d a9       	ldd	r22, Y+53	; 0x35
    41fe:	7e a9       	ldd	r23, Y+54	; 0x36
    4200:	8f a9       	ldd	r24, Y+55	; 0x37
    4202:	98 ad       	ldd	r25, Y+56	; 0x38
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	40 e2       	ldi	r20, 0x20	; 32
    420a:	51 e4       	ldi	r21, 0x41	; 65
    420c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4210:	dc 01       	movw	r26, r24
    4212:	cb 01       	movw	r24, r22
    4214:	bc 01       	movw	r22, r24
    4216:	cd 01       	movw	r24, r26
    4218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421c:	dc 01       	movw	r26, r24
    421e:	cb 01       	movw	r24, r22
    4220:	98 ab       	std	Y+48, r25	; 0x30
    4222:	8f a7       	std	Y+47, r24	; 0x2f
    4224:	0f c0       	rjmp	.+30     	; 0x4244 <Finger_Print_Match+0xa48>
    4226:	80 e9       	ldi	r24, 0x90	; 144
    4228:	91 e0       	ldi	r25, 0x01	; 1
    422a:	9e a7       	std	Y+46, r25	; 0x2e
    422c:	8d a7       	std	Y+45, r24	; 0x2d
    422e:	8d a5       	ldd	r24, Y+45	; 0x2d
    4230:	9e a5       	ldd	r25, Y+46	; 0x2e
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	f1 f7       	brne	.-4      	; 0x4232 <Finger_Print_Match+0xa36>
    4236:	9e a7       	std	Y+46, r25	; 0x2e
    4238:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    423a:	8f a5       	ldd	r24, Y+47	; 0x2f
    423c:	98 a9       	ldd	r25, Y+48	; 0x30
    423e:	01 97       	sbiw	r24, 0x01	; 1
    4240:	98 ab       	std	Y+48, r25	; 0x30
    4242:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4244:	8f a5       	ldd	r24, Y+47	; 0x2f
    4246:	98 a9       	ldd	r25, Y+48	; 0x30
    4248:	00 97       	sbiw	r24, 0x00	; 0
    424a:	69 f7       	brne	.-38     	; 0x4226 <Finger_Print_Match+0xa2a>
    424c:	14 c0       	rjmp	.+40     	; 0x4276 <Finger_Print_Match+0xa7a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424e:	69 a9       	ldd	r22, Y+49	; 0x31
    4250:	7a a9       	ldd	r23, Y+50	; 0x32
    4252:	8b a9       	ldd	r24, Y+51	; 0x33
    4254:	9c a9       	ldd	r25, Y+52	; 0x34
    4256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425a:	dc 01       	movw	r26, r24
    425c:	cb 01       	movw	r24, r22
    425e:	98 ab       	std	Y+48, r25	; 0x30
    4260:	8f a7       	std	Y+47, r24	; 0x2f
    4262:	8f a5       	ldd	r24, Y+47	; 0x2f
    4264:	98 a9       	ldd	r25, Y+48	; 0x30
    4266:	9c a7       	std	Y+44, r25	; 0x2c
    4268:	8b a7       	std	Y+43, r24	; 0x2b
    426a:	8b a5       	ldd	r24, Y+43	; 0x2b
    426c:	9c a5       	ldd	r25, Y+44	; 0x2c
    426e:	01 97       	sbiw	r24, 0x01	; 1
    4270:	f1 f7       	brne	.-4      	; 0x426e <Finger_Print_Match+0xa72>
    4272:	9c a7       	std	Y+44, r25	; 0x2c
    4274:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(5000);
				if(Search_Buffer[PAGE_ID]==Nour_Template)
    4276:	80 91 e1 05 	lds	r24, 0x05E1
    427a:	81 30       	cpi	r24, 0x01	; 1
    427c:	09 f0       	breq	.+2      	; 0x4280 <Finger_Print_Match+0xa84>
    427e:	80 c0       	rjmp	.+256    	; 0x4380 <Finger_Print_Match+0xb84>
				{
					H_LCD_void_ClearDisplay();
    4280:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
					H_LCD_void_sendString("Welcome Nour");
    4284:	8a e2       	ldi	r24, 0x2A	; 42
    4286:	91 e0       	ldi	r25, 0x01	; 1
    4288:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
					User_ID=PAGE_ID;
    428c:	fe 01       	movw	r30, r28
    428e:	e2 57       	subi	r30, 0x72	; 114
    4290:	ff 4f       	sbci	r31, 0xFF	; 255
    4292:	8b e0       	ldi	r24, 0x0B	; 11
    4294:	80 83       	st	Z, r24
					Flush_Buffer();
    4296:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    429a:	80 e0       	ldi	r24, 0x00	; 0
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	aa ef       	ldi	r26, 0xFA	; 250
    42a0:	b4 e4       	ldi	r27, 0x44	; 68
    42a2:	8f a3       	std	Y+39, r24	; 0x27
    42a4:	98 a7       	std	Y+40, r25	; 0x28
    42a6:	a9 a7       	std	Y+41, r26	; 0x29
    42a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42aa:	6f a1       	ldd	r22, Y+39	; 0x27
    42ac:	78 a5       	ldd	r23, Y+40	; 0x28
    42ae:	89 a5       	ldd	r24, Y+41	; 0x29
    42b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    42b2:	20 e0       	ldi	r18, 0x00	; 0
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	4a e7       	ldi	r20, 0x7A	; 122
    42b8:	55 e4       	ldi	r21, 0x45	; 69
    42ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42be:	dc 01       	movw	r26, r24
    42c0:	cb 01       	movw	r24, r22
    42c2:	8b a3       	std	Y+35, r24	; 0x23
    42c4:	9c a3       	std	Y+36, r25	; 0x24
    42c6:	ad a3       	std	Y+37, r26	; 0x25
    42c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    42ca:	6b a1       	ldd	r22, Y+35	; 0x23
    42cc:	7c a1       	ldd	r23, Y+36	; 0x24
    42ce:	8d a1       	ldd	r24, Y+37	; 0x25
    42d0:	9e a1       	ldd	r25, Y+38	; 0x26
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	40 e8       	ldi	r20, 0x80	; 128
    42d8:	5f e3       	ldi	r21, 0x3F	; 63
    42da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42de:	88 23       	and	r24, r24
    42e0:	2c f4       	brge	.+10     	; 0x42ec <Finger_Print_Match+0xaf0>
		__ticks = 1;
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	9a a3       	std	Y+34, r25	; 0x22
    42e8:	89 a3       	std	Y+33, r24	; 0x21
    42ea:	3f c0       	rjmp	.+126    	; 0x436a <Finger_Print_Match+0xb6e>
	else if (__tmp > 65535)
    42ec:	6b a1       	ldd	r22, Y+35	; 0x23
    42ee:	7c a1       	ldd	r23, Y+36	; 0x24
    42f0:	8d a1       	ldd	r24, Y+37	; 0x25
    42f2:	9e a1       	ldd	r25, Y+38	; 0x26
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	3f ef       	ldi	r19, 0xFF	; 255
    42f8:	4f e7       	ldi	r20, 0x7F	; 127
    42fa:	57 e4       	ldi	r21, 0x47	; 71
    42fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4300:	18 16       	cp	r1, r24
    4302:	4c f5       	brge	.+82     	; 0x4356 <Finger_Print_Match+0xb5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4304:	6f a1       	ldd	r22, Y+39	; 0x27
    4306:	78 a5       	ldd	r23, Y+40	; 0x28
    4308:	89 a5       	ldd	r24, Y+41	; 0x29
    430a:	9a a5       	ldd	r25, Y+42	; 0x2a
    430c:	20 e0       	ldi	r18, 0x00	; 0
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	40 e2       	ldi	r20, 0x20	; 32
    4312:	51 e4       	ldi	r21, 0x41	; 65
    4314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	bc 01       	movw	r22, r24
    431e:	cd 01       	movw	r24, r26
    4320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4324:	dc 01       	movw	r26, r24
    4326:	cb 01       	movw	r24, r22
    4328:	9a a3       	std	Y+34, r25	; 0x22
    432a:	89 a3       	std	Y+33, r24	; 0x21
    432c:	0f c0       	rjmp	.+30     	; 0x434c <Finger_Print_Match+0xb50>
    432e:	80 e9       	ldi	r24, 0x90	; 144
    4330:	91 e0       	ldi	r25, 0x01	; 1
    4332:	98 a3       	std	Y+32, r25	; 0x20
    4334:	8f 8f       	std	Y+31, r24	; 0x1f
    4336:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4338:	98 a1       	ldd	r25, Y+32	; 0x20
    433a:	01 97       	sbiw	r24, 0x01	; 1
    433c:	f1 f7       	brne	.-4      	; 0x433a <Finger_Print_Match+0xb3e>
    433e:	98 a3       	std	Y+32, r25	; 0x20
    4340:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4342:	89 a1       	ldd	r24, Y+33	; 0x21
    4344:	9a a1       	ldd	r25, Y+34	; 0x22
    4346:	01 97       	sbiw	r24, 0x01	; 1
    4348:	9a a3       	std	Y+34, r25	; 0x22
    434a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434c:	89 a1       	ldd	r24, Y+33	; 0x21
    434e:	9a a1       	ldd	r25, Y+34	; 0x22
    4350:	00 97       	sbiw	r24, 0x00	; 0
    4352:	69 f7       	brne	.-38     	; 0x432e <Finger_Print_Match+0xb32>
    4354:	7c c0       	rjmp	.+248    	; 0x444e <Finger_Print_Match+0xc52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4356:	6b a1       	ldd	r22, Y+35	; 0x23
    4358:	7c a1       	ldd	r23, Y+36	; 0x24
    435a:	8d a1       	ldd	r24, Y+37	; 0x25
    435c:	9e a1       	ldd	r25, Y+38	; 0x26
    435e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4362:	dc 01       	movw	r26, r24
    4364:	cb 01       	movw	r24, r22
    4366:	9a a3       	std	Y+34, r25	; 0x22
    4368:	89 a3       	std	Y+33, r24	; 0x21
    436a:	89 a1       	ldd	r24, Y+33	; 0x21
    436c:	9a a1       	ldd	r25, Y+34	; 0x22
    436e:	9e 8f       	std	Y+30, r25	; 0x1e
    4370:	8d 8f       	std	Y+29, r24	; 0x1d
    4372:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4374:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4376:	01 97       	sbiw	r24, 0x01	; 1
    4378:	f1 f7       	brne	.-4      	; 0x4376 <Finger_Print_Match+0xb7a>
    437a:	9e 8f       	std	Y+30, r25	; 0x1e
    437c:	8d 8f       	std	Y+29, r24	; 0x1d
    437e:	67 c0       	rjmp	.+206    	; 0x444e <Finger_Print_Match+0xc52>
					_delay_ms(2000);
				}
				else if(Search_Buffer[PAGE_ID]==Zedan_Template)
    4380:	80 91 e1 05 	lds	r24, 0x05E1
    4384:	82 30       	cpi	r24, 0x02	; 2
    4386:	71 f4       	brne	.+28     	; 0x43a4 <Finger_Print_Match+0xba8>
				{
					H_LCD_void_ClearDisplay();
    4388:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
					H_LCD_void_sendString("Welcome Zedan");
    438c:	87 e3       	ldi	r24, 0x37	; 55
    438e:	91 e0       	ldi	r25, 0x01	; 1
    4390:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
					User_ID=PAGE_ID;
    4394:	fe 01       	movw	r30, r28
    4396:	e2 57       	subi	r30, 0x72	; 114
    4398:	ff 4f       	sbci	r31, 0xFF	; 255
    439a:	8b e0       	ldi	r24, 0x0B	; 11
    439c:	80 83       	st	Z, r24
					Flush_Buffer();
    439e:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    43a2:	55 c0       	rjmp	.+170    	; 0x444e <Finger_Print_Match+0xc52>
				}
				else if(Search_Buffer[PAGE_ID]==Abo_7med_Template)
    43a4:	80 91 e1 05 	lds	r24, 0x05E1
    43a8:	84 30       	cpi	r24, 0x04	; 4
    43aa:	71 f4       	brne	.+28     	; 0x43c8 <Finger_Print_Match+0xbcc>
				{
					H_LCD_void_ClearDisplay();
    43ac:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
					H_LCD_void_sendString("Welcome Ahmed");
    43b0:	85 e4       	ldi	r24, 0x45	; 69
    43b2:	91 e0       	ldi	r25, 0x01	; 1
    43b4:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
					User_ID=PAGE_ID;
    43b8:	fe 01       	movw	r30, r28
    43ba:	e2 57       	subi	r30, 0x72	; 114
    43bc:	ff 4f       	sbci	r31, 0xFF	; 255
    43be:	8b e0       	ldi	r24, 0x0B	; 11
    43c0:	80 83       	st	Z, r24
					Flush_Buffer();
    43c2:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    43c6:	43 c0       	rjmp	.+134    	; 0x444e <Finger_Print_Match+0xc52>
				}
				else if(Search_Buffer[PAGE_ID]==Nomrosi_Template)
    43c8:	80 91 e1 05 	lds	r24, 0x05E1
    43cc:	83 30       	cpi	r24, 0x03	; 3
    43ce:	71 f4       	brne	.+28     	; 0x43ec <Finger_Print_Match+0xbf0>
				{
					H_LCD_void_ClearDisplay();
    43d0:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
					H_LCD_void_sendString("Welcome Nomrosi");
    43d4:	83 e5       	ldi	r24, 0x53	; 83
    43d6:	91 e0       	ldi	r25, 0x01	; 1
    43d8:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
					User_ID=PAGE_ID;
    43dc:	fe 01       	movw	r30, r28
    43de:	e2 57       	subi	r30, 0x72	; 114
    43e0:	ff 4f       	sbci	r31, 0xFF	; 255
    43e2:	8b e0       	ldi	r24, 0x0B	; 11
    43e4:	80 83       	st	Z, r24
					Flush_Buffer();
    43e6:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    43ea:	31 c0       	rjmp	.+98     	; 0x444e <Finger_Print_Match+0xc52>
				}
				else if(Search_Buffer[PAGE_ID]==Alaa_Template)
    43ec:	80 91 e1 05 	lds	r24, 0x05E1
    43f0:	85 30       	cpi	r24, 0x05	; 5
    43f2:	71 f4       	brne	.+28     	; 0x4410 <Finger_Print_Match+0xc14>
				{
					H_LCD_void_ClearDisplay();
    43f4:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
					H_LCD_void_sendString("Welcome Alaa");
    43f8:	83 e6       	ldi	r24, 0x63	; 99
    43fa:	91 e0       	ldi	r25, 0x01	; 1
    43fc:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
					User_ID=PAGE_ID;
    4400:	fe 01       	movw	r30, r28
    4402:	e2 57       	subi	r30, 0x72	; 114
    4404:	ff 4f       	sbci	r31, 0xFF	; 255
    4406:	8b e0       	ldi	r24, 0x0B	; 11
    4408:	80 83       	st	Z, r24
					Flush_Buffer();
    440a:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    440e:	1f c0       	rjmp	.+62     	; 0x444e <Finger_Print_Match+0xc52>
				}
				else if(Search_Buffer[PAGE_ID]==Aya_Template)
    4410:	80 91 e1 05 	lds	r24, 0x05E1
    4414:	86 30       	cpi	r24, 0x06	; 6
    4416:	71 f4       	brne	.+28     	; 0x4434 <Finger_Print_Match+0xc38>
				{
					H_LCD_void_ClearDisplay();
    4418:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
					H_LCD_void_sendString("Welcome Eng. Aya");
    441c:	80 e7       	ldi	r24, 0x70	; 112
    441e:	91 e0       	ldi	r25, 0x01	; 1
    4420:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
					User_ID=PAGE_ID;
    4424:	fe 01       	movw	r30, r28
    4426:	e2 57       	subi	r30, 0x72	; 114
    4428:	ff 4f       	sbci	r31, 0xFF	; 255
    442a:	8b e0       	ldi	r24, 0x0B	; 11
    442c:	80 83       	st	Z, r24
					Flush_Buffer();
    442e:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    4432:	0d c0       	rjmp	.+26     	; 0x444e <Finger_Print_Match+0xc52>
				}
				else
				{
					H_LCD_void_ClearDisplay();
    4434:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
					H_LCD_void_sendString("New User");
    4438:	81 e8       	ldi	r24, 0x81	; 129
    443a:	91 e0       	ldi	r25, 0x01	; 1
    443c:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
					User_ID=PAGE_ID;
    4440:	fe 01       	movw	r30, r28
    4442:	e2 57       	subi	r30, 0x72	; 114
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	8b e0       	ldi	r24, 0x0B	; 11
    4448:	80 83       	st	Z, r24
					Flush_Buffer();
    444a:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    444e:	80 e0       	ldi	r24, 0x00	; 0
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	aa e7       	ldi	r26, 0x7A	; 122
    4454:	b4 e4       	ldi	r27, 0x44	; 68
    4456:	89 8f       	std	Y+25, r24	; 0x19
    4458:	9a 8f       	std	Y+26, r25	; 0x1a
    445a:	ab 8f       	std	Y+27, r26	; 0x1b
    445c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    445e:	69 8d       	ldd	r22, Y+25	; 0x19
    4460:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4462:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4464:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4466:	20 e0       	ldi	r18, 0x00	; 0
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	4a e7       	ldi	r20, 0x7A	; 122
    446c:	55 e4       	ldi	r21, 0x45	; 69
    446e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4472:	dc 01       	movw	r26, r24
    4474:	cb 01       	movw	r24, r22
    4476:	8d 8b       	std	Y+21, r24	; 0x15
    4478:	9e 8b       	std	Y+22, r25	; 0x16
    447a:	af 8b       	std	Y+23, r26	; 0x17
    447c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    447e:	6d 89       	ldd	r22, Y+21	; 0x15
    4480:	7e 89       	ldd	r23, Y+22	; 0x16
    4482:	8f 89       	ldd	r24, Y+23	; 0x17
    4484:	98 8d       	ldd	r25, Y+24	; 0x18
    4486:	20 e0       	ldi	r18, 0x00	; 0
    4488:	30 e0       	ldi	r19, 0x00	; 0
    448a:	40 e8       	ldi	r20, 0x80	; 128
    448c:	5f e3       	ldi	r21, 0x3F	; 63
    448e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4492:	88 23       	and	r24, r24
    4494:	2c f4       	brge	.+10     	; 0x44a0 <Finger_Print_Match+0xca4>
		__ticks = 1;
    4496:	81 e0       	ldi	r24, 0x01	; 1
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	9c 8b       	std	Y+20, r25	; 0x14
    449c:	8b 8b       	std	Y+19, r24	; 0x13
    449e:	3f c0       	rjmp	.+126    	; 0x451e <Finger_Print_Match+0xd22>
	else if (__tmp > 65535)
    44a0:	6d 89       	ldd	r22, Y+21	; 0x15
    44a2:	7e 89       	ldd	r23, Y+22	; 0x16
    44a4:	8f 89       	ldd	r24, Y+23	; 0x17
    44a6:	98 8d       	ldd	r25, Y+24	; 0x18
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	3f ef       	ldi	r19, 0xFF	; 255
    44ac:	4f e7       	ldi	r20, 0x7F	; 127
    44ae:	57 e4       	ldi	r21, 0x47	; 71
    44b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44b4:	18 16       	cp	r1, r24
    44b6:	4c f5       	brge	.+82     	; 0x450a <Finger_Print_Match+0xd0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44b8:	69 8d       	ldd	r22, Y+25	; 0x19
    44ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44c0:	20 e0       	ldi	r18, 0x00	; 0
    44c2:	30 e0       	ldi	r19, 0x00	; 0
    44c4:	40 e2       	ldi	r20, 0x20	; 32
    44c6:	51 e4       	ldi	r21, 0x41	; 65
    44c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44cc:	dc 01       	movw	r26, r24
    44ce:	cb 01       	movw	r24, r22
    44d0:	bc 01       	movw	r22, r24
    44d2:	cd 01       	movw	r24, r26
    44d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	9c 8b       	std	Y+20, r25	; 0x14
    44de:	8b 8b       	std	Y+19, r24	; 0x13
    44e0:	0f c0       	rjmp	.+30     	; 0x4500 <Finger_Print_Match+0xd04>
    44e2:	80 e9       	ldi	r24, 0x90	; 144
    44e4:	91 e0       	ldi	r25, 0x01	; 1
    44e6:	9a 8b       	std	Y+18, r25	; 0x12
    44e8:	89 8b       	std	Y+17, r24	; 0x11
    44ea:	89 89       	ldd	r24, Y+17	; 0x11
    44ec:	9a 89       	ldd	r25, Y+18	; 0x12
    44ee:	01 97       	sbiw	r24, 0x01	; 1
    44f0:	f1 f7       	brne	.-4      	; 0x44ee <Finger_Print_Match+0xcf2>
    44f2:	9a 8b       	std	Y+18, r25	; 0x12
    44f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44f6:	8b 89       	ldd	r24, Y+19	; 0x13
    44f8:	9c 89       	ldd	r25, Y+20	; 0x14
    44fa:	01 97       	sbiw	r24, 0x01	; 1
    44fc:	9c 8b       	std	Y+20, r25	; 0x14
    44fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4500:	8b 89       	ldd	r24, Y+19	; 0x13
    4502:	9c 89       	ldd	r25, Y+20	; 0x14
    4504:	00 97       	sbiw	r24, 0x00	; 0
    4506:	69 f7       	brne	.-38     	; 0x44e2 <Finger_Print_Match+0xce6>
    4508:	14 c0       	rjmp	.+40     	; 0x4532 <Finger_Print_Match+0xd36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    450a:	6d 89       	ldd	r22, Y+21	; 0x15
    450c:	7e 89       	ldd	r23, Y+22	; 0x16
    450e:	8f 89       	ldd	r24, Y+23	; 0x17
    4510:	98 8d       	ldd	r25, Y+24	; 0x18
    4512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4516:	dc 01       	movw	r26, r24
    4518:	cb 01       	movw	r24, r22
    451a:	9c 8b       	std	Y+20, r25	; 0x14
    451c:	8b 8b       	std	Y+19, r24	; 0x13
    451e:	8b 89       	ldd	r24, Y+19	; 0x13
    4520:	9c 89       	ldd	r25, Y+20	; 0x14
    4522:	98 8b       	std	Y+16, r25	; 0x10
    4524:	8f 87       	std	Y+15, r24	; 0x0f
    4526:	8f 85       	ldd	r24, Y+15	; 0x0f
    4528:	98 89       	ldd	r25, Y+16	; 0x10
    452a:	01 97       	sbiw	r24, 0x01	; 1
    452c:	f1 f7       	brne	.-4      	; 0x452a <Finger_Print_Match+0xd2e>
    452e:	98 8b       	std	Y+16, r25	; 0x10
    4530:	8f 87       	std	Y+15, r24	; 0x0f
				}

				_delay_ms(1000);
				Match_flag=0;
    4532:	10 92 cc 05 	sts	0x05CC, r1
				Search_Flag=0;
    4536:	10 92 d3 05 	sts	0x05D3, r1
    453a:	8f c0       	rjmp	.+286    	; 0x465a <Finger_Print_Match+0xe5e>
				break;
			}
			else if(Buffer[Confirmation_Code]==No_matching_in_lib)
    453c:	80 91 ef 05 	lds	r24, 0x05EF
    4540:	89 30       	cpi	r24, 0x09	; 9
    4542:	09 f0       	breq	.+2      	; 0x4546 <Finger_Print_Match+0xd4a>
    4544:	85 c0       	rjmp	.+266    	; 0x4650 <Finger_Print_Match+0xe54>
			{
				H_LCD_void_ClearDisplay();
    4546:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
				H_LCD_void_sendString("No matching Found");
    454a:	8a e8       	ldi	r24, 0x8A	; 138
    454c:	91 e0       	ldi	r25, 0x01	; 1
    454e:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
				Flush_Buffer();
    4552:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    4556:	80 e0       	ldi	r24, 0x00	; 0
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	aa e7       	ldi	r26, 0x7A	; 122
    455c:	b4 e4       	ldi	r27, 0x44	; 68
    455e:	8b 87       	std	Y+11, r24	; 0x0b
    4560:	9c 87       	std	Y+12, r25	; 0x0c
    4562:	ad 87       	std	Y+13, r26	; 0x0d
    4564:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4566:	6b 85       	ldd	r22, Y+11	; 0x0b
    4568:	7c 85       	ldd	r23, Y+12	; 0x0c
    456a:	8d 85       	ldd	r24, Y+13	; 0x0d
    456c:	9e 85       	ldd	r25, Y+14	; 0x0e
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	4a e7       	ldi	r20, 0x7A	; 122
    4574:	55 e4       	ldi	r21, 0x45	; 69
    4576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    457a:	dc 01       	movw	r26, r24
    457c:	cb 01       	movw	r24, r22
    457e:	8f 83       	std	Y+7, r24	; 0x07
    4580:	98 87       	std	Y+8, r25	; 0x08
    4582:	a9 87       	std	Y+9, r26	; 0x09
    4584:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4586:	6f 81       	ldd	r22, Y+7	; 0x07
    4588:	78 85       	ldd	r23, Y+8	; 0x08
    458a:	89 85       	ldd	r24, Y+9	; 0x09
    458c:	9a 85       	ldd	r25, Y+10	; 0x0a
    458e:	20 e0       	ldi	r18, 0x00	; 0
    4590:	30 e0       	ldi	r19, 0x00	; 0
    4592:	40 e8       	ldi	r20, 0x80	; 128
    4594:	5f e3       	ldi	r21, 0x3F	; 63
    4596:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    459a:	88 23       	and	r24, r24
    459c:	2c f4       	brge	.+10     	; 0x45a8 <Finger_Print_Match+0xdac>
		__ticks = 1;
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	9e 83       	std	Y+6, r25	; 0x06
    45a4:	8d 83       	std	Y+5, r24	; 0x05
    45a6:	3f c0       	rjmp	.+126    	; 0x4626 <Finger_Print_Match+0xe2a>
	else if (__tmp > 65535)
    45a8:	6f 81       	ldd	r22, Y+7	; 0x07
    45aa:	78 85       	ldd	r23, Y+8	; 0x08
    45ac:	89 85       	ldd	r24, Y+9	; 0x09
    45ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    45b0:	20 e0       	ldi	r18, 0x00	; 0
    45b2:	3f ef       	ldi	r19, 0xFF	; 255
    45b4:	4f e7       	ldi	r20, 0x7F	; 127
    45b6:	57 e4       	ldi	r21, 0x47	; 71
    45b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45bc:	18 16       	cp	r1, r24
    45be:	4c f5       	brge	.+82     	; 0x4612 <Finger_Print_Match+0xe16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    45c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    45c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    45c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    45c8:	20 e0       	ldi	r18, 0x00	; 0
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	40 e2       	ldi	r20, 0x20	; 32
    45ce:	51 e4       	ldi	r21, 0x41	; 65
    45d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d4:	dc 01       	movw	r26, r24
    45d6:	cb 01       	movw	r24, r22
    45d8:	bc 01       	movw	r22, r24
    45da:	cd 01       	movw	r24, r26
    45dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	9e 83       	std	Y+6, r25	; 0x06
    45e6:	8d 83       	std	Y+5, r24	; 0x05
    45e8:	0f c0       	rjmp	.+30     	; 0x4608 <Finger_Print_Match+0xe0c>
    45ea:	80 e9       	ldi	r24, 0x90	; 144
    45ec:	91 e0       	ldi	r25, 0x01	; 1
    45ee:	9c 83       	std	Y+4, r25	; 0x04
    45f0:	8b 83       	std	Y+3, r24	; 0x03
    45f2:	8b 81       	ldd	r24, Y+3	; 0x03
    45f4:	9c 81       	ldd	r25, Y+4	; 0x04
    45f6:	01 97       	sbiw	r24, 0x01	; 1
    45f8:	f1 f7       	brne	.-4      	; 0x45f6 <Finger_Print_Match+0xdfa>
    45fa:	9c 83       	std	Y+4, r25	; 0x04
    45fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4600:	9e 81       	ldd	r25, Y+6	; 0x06
    4602:	01 97       	sbiw	r24, 0x01	; 1
    4604:	9e 83       	std	Y+6, r25	; 0x06
    4606:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4608:	8d 81       	ldd	r24, Y+5	; 0x05
    460a:	9e 81       	ldd	r25, Y+6	; 0x06
    460c:	00 97       	sbiw	r24, 0x00	; 0
    460e:	69 f7       	brne	.-38     	; 0x45ea <Finger_Print_Match+0xdee>
    4610:	14 c0       	rjmp	.+40     	; 0x463a <Finger_Print_Match+0xe3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4612:	6f 81       	ldd	r22, Y+7	; 0x07
    4614:	78 85       	ldd	r23, Y+8	; 0x08
    4616:	89 85       	ldd	r24, Y+9	; 0x09
    4618:	9a 85       	ldd	r25, Y+10	; 0x0a
    461a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    461e:	dc 01       	movw	r26, r24
    4620:	cb 01       	movw	r24, r22
    4622:	9e 83       	std	Y+6, r25	; 0x06
    4624:	8d 83       	std	Y+5, r24	; 0x05
    4626:	8d 81       	ldd	r24, Y+5	; 0x05
    4628:	9e 81       	ldd	r25, Y+6	; 0x06
    462a:	9a 83       	std	Y+2, r25	; 0x02
    462c:	89 83       	std	Y+1, r24	; 0x01
    462e:	89 81       	ldd	r24, Y+1	; 0x01
    4630:	9a 81       	ldd	r25, Y+2	; 0x02
    4632:	01 97       	sbiw	r24, 0x01	; 1
    4634:	f1 f7       	brne	.-4      	; 0x4632 <Finger_Print_Match+0xe36>
    4636:	9a 83       	std	Y+2, r25	; 0x02
    4638:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1000);
				Gen_Img_Flag_Match=1;
    463a:	81 e0       	ldi	r24, 0x01	; 1
    463c:	80 93 ce 05 	sts	0x05CE, r24
				Search_Flag=0;
    4640:	10 92 d3 05 	sts	0x05D3, r1
				User_ID=100;
    4644:	fe 01       	movw	r30, r28
    4646:	e2 57       	subi	r30, 0x72	; 114
    4648:	ff 4f       	sbci	r31, 0xFF	; 255
    464a:	84 e6       	ldi	r24, 0x64	; 100
    464c:	80 83       	st	Z, r24
    464e:	05 c0       	rjmp	.+10     	; 0x465a <Finger_Print_Match+0xe5e>
				Flush_Buffer();
				_delay_ms(1000);
			}

		}
		while(Search_Flag)
    4650:	80 91 d3 05 	lds	r24, 0x05D3
    4654:	88 23       	and	r24, r24
    4656:	09 f0       	breq	.+2      	; 0x465a <Finger_Print_Match+0xe5e>
    4658:	d3 cc       	rjmp	.-1626   	; 0x4000 <Finger_Print_Match+0x804>
	Search_Flag=0;
	Match_flag=1;
	H_LCD_void_ClearDisplay();
	H_LCD_void_sendString("Check for match?");
	_delay_ms(3000);
	while(Match_flag)
    465a:	80 91 cc 05 	lds	r24, 0x05CC
    465e:	88 23       	and	r24, r24
    4660:	09 f0       	breq	.+2      	; 0x4664 <Finger_Print_Match+0xe68>
    4662:	99 c9       	rjmp	.-3278   	; 0x3996 <Finger_Print_Match+0x19a>
				User_ID=100;
				break;
			}
		}
	}
		return User_ID;
    4664:	fe 01       	movw	r30, r28
    4666:	e2 57       	subi	r30, 0x72	; 114
    4668:	ff 4f       	sbci	r31, 0xFF	; 255
    466a:	80 81       	ld	r24, Z
}
    466c:	c2 57       	subi	r28, 0x72	; 114
    466e:	df 4f       	sbci	r29, 0xFF	; 255
    4670:	0f b6       	in	r0, 0x3f	; 63
    4672:	f8 94       	cli
    4674:	de bf       	out	0x3e, r29	; 62
    4676:	0f be       	out	0x3f, r0	; 63
    4678:	cd bf       	out	0x3d, r28	; 61
    467a:	cf 91       	pop	r28
    467c:	df 91       	pop	r29
    467e:	1f 91       	pop	r17
    4680:	0f 91       	pop	r16
    4682:	08 95       	ret

00004684 <Finger_Print_Delete_Template>:

void Finger_Print_Delete_Template(u8 FB_ID)
{
    4684:	df 93       	push	r29
    4686:	cf 93       	push	r28
    4688:	cd b7       	in	r28, 0x3d	; 61
    468a:	de b7       	in	r29, 0x3e	; 62
    468c:	6d 97       	sbiw	r28, 0x1d	; 29
    468e:	0f b6       	in	r0, 0x3f	; 63
    4690:	f8 94       	cli
    4692:	de bf       	out	0x3e, r29	; 62
    4694:	0f be       	out	0x3f, r0	; 63
    4696:	cd bf       	out	0x3d, r28	; 61
    4698:	8d 8f       	std	Y+29, r24	; 0x1d
	Delete_Flag=1;
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	80 93 d5 05 	sts	0x05D5, r24
    46a0:	fb c0       	rjmp	.+502    	; 0x4898 <Finger_Print_Delete_Template+0x214>
	while(Delete_Flag)
	{
		Finger_Print_Send_Command(Delete_Char,DELETE_CHAR_LENGTH);
    46a2:	8b ec       	ldi	r24, 0xCB	; 203
    46a4:	94 e0       	ldi	r25, 0x04	; 4
    46a6:	60 e1       	ldi	r22, 0x10	; 16
    46a8:	0e 94 99 14 	call	0x2932	; 0x2932 <Finger_Print_Send_Command>
		if(Buffer[Confirmation_Code]==Delete_Success)
    46ac:	80 91 ef 05 	lds	r24, 0x05EF
    46b0:	88 23       	and	r24, r24
    46b2:	09 f0       	breq	.+2      	; 0x46b6 <Finger_Print_Delete_Template+0x32>
    46b4:	7d c0       	rjmp	.+250    	; 0x47b0 <Finger_Print_Delete_Template+0x12c>
		{
			H_LCD_void_ClearDisplay();
    46b6:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("Template Deleted");
    46ba:	8c e9       	ldi	r24, 0x9C	; 156
    46bc:	91 e0       	ldi	r25, 0x01	; 1
    46be:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
			Flush_Buffer();
    46c2:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    46c6:	80 e0       	ldi	r24, 0x00	; 0
    46c8:	90 e0       	ldi	r25, 0x00	; 0
    46ca:	aa e7       	ldi	r26, 0x7A	; 122
    46cc:	b4 e4       	ldi	r27, 0x44	; 68
    46ce:	89 8f       	std	Y+25, r24	; 0x19
    46d0:	9a 8f       	std	Y+26, r25	; 0x1a
    46d2:	ab 8f       	std	Y+27, r26	; 0x1b
    46d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46d6:	69 8d       	ldd	r22, Y+25	; 0x19
    46d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46de:	20 e0       	ldi	r18, 0x00	; 0
    46e0:	30 e0       	ldi	r19, 0x00	; 0
    46e2:	4a e7       	ldi	r20, 0x7A	; 122
    46e4:	55 e4       	ldi	r21, 0x45	; 69
    46e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ea:	dc 01       	movw	r26, r24
    46ec:	cb 01       	movw	r24, r22
    46ee:	8d 8b       	std	Y+21, r24	; 0x15
    46f0:	9e 8b       	std	Y+22, r25	; 0x16
    46f2:	af 8b       	std	Y+23, r26	; 0x17
    46f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    46f6:	6d 89       	ldd	r22, Y+21	; 0x15
    46f8:	7e 89       	ldd	r23, Y+22	; 0x16
    46fa:	8f 89       	ldd	r24, Y+23	; 0x17
    46fc:	98 8d       	ldd	r25, Y+24	; 0x18
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	40 e8       	ldi	r20, 0x80	; 128
    4704:	5f e3       	ldi	r21, 0x3F	; 63
    4706:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    470a:	88 23       	and	r24, r24
    470c:	2c f4       	brge	.+10     	; 0x4718 <Finger_Print_Delete_Template+0x94>
		__ticks = 1;
    470e:	81 e0       	ldi	r24, 0x01	; 1
    4710:	90 e0       	ldi	r25, 0x00	; 0
    4712:	9c 8b       	std	Y+20, r25	; 0x14
    4714:	8b 8b       	std	Y+19, r24	; 0x13
    4716:	3f c0       	rjmp	.+126    	; 0x4796 <Finger_Print_Delete_Template+0x112>
	else if (__tmp > 65535)
    4718:	6d 89       	ldd	r22, Y+21	; 0x15
    471a:	7e 89       	ldd	r23, Y+22	; 0x16
    471c:	8f 89       	ldd	r24, Y+23	; 0x17
    471e:	98 8d       	ldd	r25, Y+24	; 0x18
    4720:	20 e0       	ldi	r18, 0x00	; 0
    4722:	3f ef       	ldi	r19, 0xFF	; 255
    4724:	4f e7       	ldi	r20, 0x7F	; 127
    4726:	57 e4       	ldi	r21, 0x47	; 71
    4728:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    472c:	18 16       	cp	r1, r24
    472e:	4c f5       	brge	.+82     	; 0x4782 <Finger_Print_Delete_Template+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4730:	69 8d       	ldd	r22, Y+25	; 0x19
    4732:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4734:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4736:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4738:	20 e0       	ldi	r18, 0x00	; 0
    473a:	30 e0       	ldi	r19, 0x00	; 0
    473c:	40 e2       	ldi	r20, 0x20	; 32
    473e:	51 e4       	ldi	r21, 0x41	; 65
    4740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4744:	dc 01       	movw	r26, r24
    4746:	cb 01       	movw	r24, r22
    4748:	bc 01       	movw	r22, r24
    474a:	cd 01       	movw	r24, r26
    474c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4750:	dc 01       	movw	r26, r24
    4752:	cb 01       	movw	r24, r22
    4754:	9c 8b       	std	Y+20, r25	; 0x14
    4756:	8b 8b       	std	Y+19, r24	; 0x13
    4758:	0f c0       	rjmp	.+30     	; 0x4778 <Finger_Print_Delete_Template+0xf4>
    475a:	80 e9       	ldi	r24, 0x90	; 144
    475c:	91 e0       	ldi	r25, 0x01	; 1
    475e:	9a 8b       	std	Y+18, r25	; 0x12
    4760:	89 8b       	std	Y+17, r24	; 0x11
    4762:	89 89       	ldd	r24, Y+17	; 0x11
    4764:	9a 89       	ldd	r25, Y+18	; 0x12
    4766:	01 97       	sbiw	r24, 0x01	; 1
    4768:	f1 f7       	brne	.-4      	; 0x4766 <Finger_Print_Delete_Template+0xe2>
    476a:	9a 8b       	std	Y+18, r25	; 0x12
    476c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    476e:	8b 89       	ldd	r24, Y+19	; 0x13
    4770:	9c 89       	ldd	r25, Y+20	; 0x14
    4772:	01 97       	sbiw	r24, 0x01	; 1
    4774:	9c 8b       	std	Y+20, r25	; 0x14
    4776:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4778:	8b 89       	ldd	r24, Y+19	; 0x13
    477a:	9c 89       	ldd	r25, Y+20	; 0x14
    477c:	00 97       	sbiw	r24, 0x00	; 0
    477e:	69 f7       	brne	.-38     	; 0x475a <Finger_Print_Delete_Template+0xd6>
    4780:	14 c0       	rjmp	.+40     	; 0x47aa <Finger_Print_Delete_Template+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4782:	6d 89       	ldd	r22, Y+21	; 0x15
    4784:	7e 89       	ldd	r23, Y+22	; 0x16
    4786:	8f 89       	ldd	r24, Y+23	; 0x17
    4788:	98 8d       	ldd	r25, Y+24	; 0x18
    478a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	9c 8b       	std	Y+20, r25	; 0x14
    4794:	8b 8b       	std	Y+19, r24	; 0x13
    4796:	8b 89       	ldd	r24, Y+19	; 0x13
    4798:	9c 89       	ldd	r25, Y+20	; 0x14
    479a:	98 8b       	std	Y+16, r25	; 0x10
    479c:	8f 87       	std	Y+15, r24	; 0x0f
    479e:	8f 85       	ldd	r24, Y+15	; 0x0f
    47a0:	98 89       	ldd	r25, Y+16	; 0x10
    47a2:	01 97       	sbiw	r24, 0x01	; 1
    47a4:	f1 f7       	brne	.-4      	; 0x47a2 <Finger_Print_Delete_Template+0x11e>
    47a6:	98 8b       	std	Y+16, r25	; 0x10
    47a8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			Delete_Flag=0;
    47aa:	10 92 d5 05 	sts	0x05D5, r1
    47ae:	74 c0       	rjmp	.+232    	; 0x4898 <Finger_Print_Delete_Template+0x214>
		}
		else
		{
			Flush_Buffer();
    47b0:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	aa ef       	ldi	r26, 0xFA	; 250
    47ba:	b3 e4       	ldi	r27, 0x43	; 67
    47bc:	8b 87       	std	Y+11, r24	; 0x0b
    47be:	9c 87       	std	Y+12, r25	; 0x0c
    47c0:	ad 87       	std	Y+13, r26	; 0x0d
    47c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    47c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    47c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    47ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    47cc:	20 e0       	ldi	r18, 0x00	; 0
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	4a e7       	ldi	r20, 0x7A	; 122
    47d2:	55 e4       	ldi	r21, 0x45	; 69
    47d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47d8:	dc 01       	movw	r26, r24
    47da:	cb 01       	movw	r24, r22
    47dc:	8f 83       	std	Y+7, r24	; 0x07
    47de:	98 87       	std	Y+8, r25	; 0x08
    47e0:	a9 87       	std	Y+9, r26	; 0x09
    47e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47e4:	6f 81       	ldd	r22, Y+7	; 0x07
    47e6:	78 85       	ldd	r23, Y+8	; 0x08
    47e8:	89 85       	ldd	r24, Y+9	; 0x09
    47ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	30 e0       	ldi	r19, 0x00	; 0
    47f0:	40 e8       	ldi	r20, 0x80	; 128
    47f2:	5f e3       	ldi	r21, 0x3F	; 63
    47f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47f8:	88 23       	and	r24, r24
    47fa:	2c f4       	brge	.+10     	; 0x4806 <Finger_Print_Delete_Template+0x182>
		__ticks = 1;
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	9e 83       	std	Y+6, r25	; 0x06
    4802:	8d 83       	std	Y+5, r24	; 0x05
    4804:	3f c0       	rjmp	.+126    	; 0x4884 <Finger_Print_Delete_Template+0x200>
	else if (__tmp > 65535)
    4806:	6f 81       	ldd	r22, Y+7	; 0x07
    4808:	78 85       	ldd	r23, Y+8	; 0x08
    480a:	89 85       	ldd	r24, Y+9	; 0x09
    480c:	9a 85       	ldd	r25, Y+10	; 0x0a
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	3f ef       	ldi	r19, 0xFF	; 255
    4812:	4f e7       	ldi	r20, 0x7F	; 127
    4814:	57 e4       	ldi	r21, 0x47	; 71
    4816:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    481a:	18 16       	cp	r1, r24
    481c:	4c f5       	brge	.+82     	; 0x4870 <Finger_Print_Delete_Template+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    481e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4820:	7c 85       	ldd	r23, Y+12	; 0x0c
    4822:	8d 85       	ldd	r24, Y+13	; 0x0d
    4824:	9e 85       	ldd	r25, Y+14	; 0x0e
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	40 e2       	ldi	r20, 0x20	; 32
    482c:	51 e4       	ldi	r21, 0x41	; 65
    482e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4832:	dc 01       	movw	r26, r24
    4834:	cb 01       	movw	r24, r22
    4836:	bc 01       	movw	r22, r24
    4838:	cd 01       	movw	r24, r26
    483a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    483e:	dc 01       	movw	r26, r24
    4840:	cb 01       	movw	r24, r22
    4842:	9e 83       	std	Y+6, r25	; 0x06
    4844:	8d 83       	std	Y+5, r24	; 0x05
    4846:	0f c0       	rjmp	.+30     	; 0x4866 <Finger_Print_Delete_Template+0x1e2>
    4848:	80 e9       	ldi	r24, 0x90	; 144
    484a:	91 e0       	ldi	r25, 0x01	; 1
    484c:	9c 83       	std	Y+4, r25	; 0x04
    484e:	8b 83       	std	Y+3, r24	; 0x03
    4850:	8b 81       	ldd	r24, Y+3	; 0x03
    4852:	9c 81       	ldd	r25, Y+4	; 0x04
    4854:	01 97       	sbiw	r24, 0x01	; 1
    4856:	f1 f7       	brne	.-4      	; 0x4854 <Finger_Print_Delete_Template+0x1d0>
    4858:	9c 83       	std	Y+4, r25	; 0x04
    485a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    485c:	8d 81       	ldd	r24, Y+5	; 0x05
    485e:	9e 81       	ldd	r25, Y+6	; 0x06
    4860:	01 97       	sbiw	r24, 0x01	; 1
    4862:	9e 83       	std	Y+6, r25	; 0x06
    4864:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4866:	8d 81       	ldd	r24, Y+5	; 0x05
    4868:	9e 81       	ldd	r25, Y+6	; 0x06
    486a:	00 97       	sbiw	r24, 0x00	; 0
    486c:	69 f7       	brne	.-38     	; 0x4848 <Finger_Print_Delete_Template+0x1c4>
    486e:	14 c0       	rjmp	.+40     	; 0x4898 <Finger_Print_Delete_Template+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4870:	6f 81       	ldd	r22, Y+7	; 0x07
    4872:	78 85       	ldd	r23, Y+8	; 0x08
    4874:	89 85       	ldd	r24, Y+9	; 0x09
    4876:	9a 85       	ldd	r25, Y+10	; 0x0a
    4878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	9e 83       	std	Y+6, r25	; 0x06
    4882:	8d 83       	std	Y+5, r24	; 0x05
    4884:	8d 81       	ldd	r24, Y+5	; 0x05
    4886:	9e 81       	ldd	r25, Y+6	; 0x06
    4888:	9a 83       	std	Y+2, r25	; 0x02
    488a:	89 83       	std	Y+1, r24	; 0x01
    488c:	89 81       	ldd	r24, Y+1	; 0x01
    488e:	9a 81       	ldd	r25, Y+2	; 0x02
    4890:	01 97       	sbiw	r24, 0x01	; 1
    4892:	f1 f7       	brne	.-4      	; 0x4890 <Finger_Print_Delete_Template+0x20c>
    4894:	9a 83       	std	Y+2, r25	; 0x02
    4896:	89 83       	std	Y+1, r24	; 0x01
}

void Finger_Print_Delete_Template(u8 FB_ID)
{
	Delete_Flag=1;
	while(Delete_Flag)
    4898:	80 91 d5 05 	lds	r24, 0x05D5
    489c:	88 23       	and	r24, r24
    489e:	09 f0       	breq	.+2      	; 0x48a2 <Finger_Print_Delete_Template+0x21e>
    48a0:	00 cf       	rjmp	.-512    	; 0x46a2 <Finger_Print_Delete_Template+0x1e>
		{
			Flush_Buffer();
			_delay_ms(500);
		}
	}
}
    48a2:	6d 96       	adiw	r28, 0x1d	; 29
    48a4:	0f b6       	in	r0, 0x3f	; 63
    48a6:	f8 94       	cli
    48a8:	de bf       	out	0x3e, r29	; 62
    48aa:	0f be       	out	0x3f, r0	; 63
    48ac:	cd bf       	out	0x3d, r28	; 61
    48ae:	cf 91       	pop	r28
    48b0:	df 91       	pop	r29
    48b2:	08 95       	ret

000048b4 <Finger_Print_Empty_Templates>:
void Finger_Print_Empty_Templates(void)
{
    48b4:	df 93       	push	r29
    48b6:	cf 93       	push	r28
    48b8:	cd b7       	in	r28, 0x3d	; 61
    48ba:	de b7       	in	r29, 0x3e	; 62
    48bc:	6c 97       	sbiw	r28, 0x1c	; 28
    48be:	0f b6       	in	r0, 0x3f	; 63
    48c0:	f8 94       	cli
    48c2:	de bf       	out	0x3e, r29	; 62
    48c4:	0f be       	out	0x3f, r0	; 63
    48c6:	cd bf       	out	0x3d, r28	; 61
	Empty_Flag=1;
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	80 93 d4 05 	sts	0x05D4, r24
    48ce:	fb c0       	rjmp	.+502    	; 0x4ac6 <Finger_Print_Empty_Templates+0x212>
	while(Empty_Flag)
	{
		Finger_Print_Send_Command(Empty_Library,EMPTY_LIBRARY_LENGTH);
    48d0:	8f eb       	ldi	r24, 0xBF	; 191
    48d2:	94 e0       	ldi	r25, 0x04	; 4
    48d4:	6c e0       	ldi	r22, 0x0C	; 12
    48d6:	0e 94 99 14 	call	0x2932	; 0x2932 <Finger_Print_Send_Command>
		if(Buffer[Confirmation_Code]==Empty_success)
    48da:	80 91 ef 05 	lds	r24, 0x05EF
    48de:	88 23       	and	r24, r24
    48e0:	09 f0       	breq	.+2      	; 0x48e4 <Finger_Print_Empty_Templates+0x30>
    48e2:	7d c0       	rjmp	.+250    	; 0x49de <Finger_Print_Empty_Templates+0x12a>
		{
			H_LCD_void_ClearDisplay();
    48e4:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
			H_LCD_void_sendString("Template list empty");
    48e8:	8d ea       	ldi	r24, 0xAD	; 173
    48ea:	91 e0       	ldi	r25, 0x01	; 1
    48ec:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
			Flush_Buffer();
    48f0:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    48f4:	80 e0       	ldi	r24, 0x00	; 0
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	aa e7       	ldi	r26, 0x7A	; 122
    48fa:	b4 e4       	ldi	r27, 0x44	; 68
    48fc:	89 8f       	std	Y+25, r24	; 0x19
    48fe:	9a 8f       	std	Y+26, r25	; 0x1a
    4900:	ab 8f       	std	Y+27, r26	; 0x1b
    4902:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4904:	69 8d       	ldd	r22, Y+25	; 0x19
    4906:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4908:	8b 8d       	ldd	r24, Y+27	; 0x1b
    490a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    490c:	20 e0       	ldi	r18, 0x00	; 0
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	4a e7       	ldi	r20, 0x7A	; 122
    4912:	55 e4       	ldi	r21, 0x45	; 69
    4914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4918:	dc 01       	movw	r26, r24
    491a:	cb 01       	movw	r24, r22
    491c:	8d 8b       	std	Y+21, r24	; 0x15
    491e:	9e 8b       	std	Y+22, r25	; 0x16
    4920:	af 8b       	std	Y+23, r26	; 0x17
    4922:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4924:	6d 89       	ldd	r22, Y+21	; 0x15
    4926:	7e 89       	ldd	r23, Y+22	; 0x16
    4928:	8f 89       	ldd	r24, Y+23	; 0x17
    492a:	98 8d       	ldd	r25, Y+24	; 0x18
    492c:	20 e0       	ldi	r18, 0x00	; 0
    492e:	30 e0       	ldi	r19, 0x00	; 0
    4930:	40 e8       	ldi	r20, 0x80	; 128
    4932:	5f e3       	ldi	r21, 0x3F	; 63
    4934:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4938:	88 23       	and	r24, r24
    493a:	2c f4       	brge	.+10     	; 0x4946 <Finger_Print_Empty_Templates+0x92>
		__ticks = 1;
    493c:	81 e0       	ldi	r24, 0x01	; 1
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	9c 8b       	std	Y+20, r25	; 0x14
    4942:	8b 8b       	std	Y+19, r24	; 0x13
    4944:	3f c0       	rjmp	.+126    	; 0x49c4 <Finger_Print_Empty_Templates+0x110>
	else if (__tmp > 65535)
    4946:	6d 89       	ldd	r22, Y+21	; 0x15
    4948:	7e 89       	ldd	r23, Y+22	; 0x16
    494a:	8f 89       	ldd	r24, Y+23	; 0x17
    494c:	98 8d       	ldd	r25, Y+24	; 0x18
    494e:	20 e0       	ldi	r18, 0x00	; 0
    4950:	3f ef       	ldi	r19, 0xFF	; 255
    4952:	4f e7       	ldi	r20, 0x7F	; 127
    4954:	57 e4       	ldi	r21, 0x47	; 71
    4956:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    495a:	18 16       	cp	r1, r24
    495c:	4c f5       	brge	.+82     	; 0x49b0 <Finger_Print_Empty_Templates+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    495e:	69 8d       	ldd	r22, Y+25	; 0x19
    4960:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4964:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4966:	20 e0       	ldi	r18, 0x00	; 0
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	40 e2       	ldi	r20, 0x20	; 32
    496c:	51 e4       	ldi	r21, 0x41	; 65
    496e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4972:	dc 01       	movw	r26, r24
    4974:	cb 01       	movw	r24, r22
    4976:	bc 01       	movw	r22, r24
    4978:	cd 01       	movw	r24, r26
    497a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    497e:	dc 01       	movw	r26, r24
    4980:	cb 01       	movw	r24, r22
    4982:	9c 8b       	std	Y+20, r25	; 0x14
    4984:	8b 8b       	std	Y+19, r24	; 0x13
    4986:	0f c0       	rjmp	.+30     	; 0x49a6 <Finger_Print_Empty_Templates+0xf2>
    4988:	80 e9       	ldi	r24, 0x90	; 144
    498a:	91 e0       	ldi	r25, 0x01	; 1
    498c:	9a 8b       	std	Y+18, r25	; 0x12
    498e:	89 8b       	std	Y+17, r24	; 0x11
    4990:	89 89       	ldd	r24, Y+17	; 0x11
    4992:	9a 89       	ldd	r25, Y+18	; 0x12
    4994:	01 97       	sbiw	r24, 0x01	; 1
    4996:	f1 f7       	brne	.-4      	; 0x4994 <Finger_Print_Empty_Templates+0xe0>
    4998:	9a 8b       	std	Y+18, r25	; 0x12
    499a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    499c:	8b 89       	ldd	r24, Y+19	; 0x13
    499e:	9c 89       	ldd	r25, Y+20	; 0x14
    49a0:	01 97       	sbiw	r24, 0x01	; 1
    49a2:	9c 8b       	std	Y+20, r25	; 0x14
    49a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49a6:	8b 89       	ldd	r24, Y+19	; 0x13
    49a8:	9c 89       	ldd	r25, Y+20	; 0x14
    49aa:	00 97       	sbiw	r24, 0x00	; 0
    49ac:	69 f7       	brne	.-38     	; 0x4988 <Finger_Print_Empty_Templates+0xd4>
    49ae:	14 c0       	rjmp	.+40     	; 0x49d8 <Finger_Print_Empty_Templates+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49b0:	6d 89       	ldd	r22, Y+21	; 0x15
    49b2:	7e 89       	ldd	r23, Y+22	; 0x16
    49b4:	8f 89       	ldd	r24, Y+23	; 0x17
    49b6:	98 8d       	ldd	r25, Y+24	; 0x18
    49b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49bc:	dc 01       	movw	r26, r24
    49be:	cb 01       	movw	r24, r22
    49c0:	9c 8b       	std	Y+20, r25	; 0x14
    49c2:	8b 8b       	std	Y+19, r24	; 0x13
    49c4:	8b 89       	ldd	r24, Y+19	; 0x13
    49c6:	9c 89       	ldd	r25, Y+20	; 0x14
    49c8:	98 8b       	std	Y+16, r25	; 0x10
    49ca:	8f 87       	std	Y+15, r24	; 0x0f
    49cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    49ce:	98 89       	ldd	r25, Y+16	; 0x10
    49d0:	01 97       	sbiw	r24, 0x01	; 1
    49d2:	f1 f7       	brne	.-4      	; 0x49d0 <Finger_Print_Empty_Templates+0x11c>
    49d4:	98 8b       	std	Y+16, r25	; 0x10
    49d6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			Empty_Flag=0;
    49d8:	10 92 d4 05 	sts	0x05D4, r1
    49dc:	74 c0       	rjmp	.+232    	; 0x4ac6 <Finger_Print_Empty_Templates+0x212>
		}
		else
		{
			Flush_Buffer();
    49de:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <Flush_Buffer>
    49e2:	80 e0       	ldi	r24, 0x00	; 0
    49e4:	90 e0       	ldi	r25, 0x00	; 0
    49e6:	aa ef       	ldi	r26, 0xFA	; 250
    49e8:	b3 e4       	ldi	r27, 0x43	; 67
    49ea:	8b 87       	std	Y+11, r24	; 0x0b
    49ec:	9c 87       	std	Y+12, r25	; 0x0c
    49ee:	ad 87       	std	Y+13, r26	; 0x0d
    49f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    49f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    49f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    49f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    49fa:	20 e0       	ldi	r18, 0x00	; 0
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	4a e7       	ldi	r20, 0x7A	; 122
    4a00:	55 e4       	ldi	r21, 0x45	; 69
    4a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a06:	dc 01       	movw	r26, r24
    4a08:	cb 01       	movw	r24, r22
    4a0a:	8f 83       	std	Y+7, r24	; 0x07
    4a0c:	98 87       	std	Y+8, r25	; 0x08
    4a0e:	a9 87       	std	Y+9, r26	; 0x09
    4a10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a12:	6f 81       	ldd	r22, Y+7	; 0x07
    4a14:	78 85       	ldd	r23, Y+8	; 0x08
    4a16:	89 85       	ldd	r24, Y+9	; 0x09
    4a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a1a:	20 e0       	ldi	r18, 0x00	; 0
    4a1c:	30 e0       	ldi	r19, 0x00	; 0
    4a1e:	40 e8       	ldi	r20, 0x80	; 128
    4a20:	5f e3       	ldi	r21, 0x3F	; 63
    4a22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a26:	88 23       	and	r24, r24
    4a28:	2c f4       	brge	.+10     	; 0x4a34 <Finger_Print_Empty_Templates+0x180>
		__ticks = 1;
    4a2a:	81 e0       	ldi	r24, 0x01	; 1
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	9e 83       	std	Y+6, r25	; 0x06
    4a30:	8d 83       	std	Y+5, r24	; 0x05
    4a32:	3f c0       	rjmp	.+126    	; 0x4ab2 <Finger_Print_Empty_Templates+0x1fe>
	else if (__tmp > 65535)
    4a34:	6f 81       	ldd	r22, Y+7	; 0x07
    4a36:	78 85       	ldd	r23, Y+8	; 0x08
    4a38:	89 85       	ldd	r24, Y+9	; 0x09
    4a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	3f ef       	ldi	r19, 0xFF	; 255
    4a40:	4f e7       	ldi	r20, 0x7F	; 127
    4a42:	57 e4       	ldi	r21, 0x47	; 71
    4a44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a48:	18 16       	cp	r1, r24
    4a4a:	4c f5       	brge	.+82     	; 0x4a9e <Finger_Print_Empty_Templates+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a50:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a52:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a54:	20 e0       	ldi	r18, 0x00	; 0
    4a56:	30 e0       	ldi	r19, 0x00	; 0
    4a58:	40 e2       	ldi	r20, 0x20	; 32
    4a5a:	51 e4       	ldi	r21, 0x41	; 65
    4a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a60:	dc 01       	movw	r26, r24
    4a62:	cb 01       	movw	r24, r22
    4a64:	bc 01       	movw	r22, r24
    4a66:	cd 01       	movw	r24, r26
    4a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a6c:	dc 01       	movw	r26, r24
    4a6e:	cb 01       	movw	r24, r22
    4a70:	9e 83       	std	Y+6, r25	; 0x06
    4a72:	8d 83       	std	Y+5, r24	; 0x05
    4a74:	0f c0       	rjmp	.+30     	; 0x4a94 <Finger_Print_Empty_Templates+0x1e0>
    4a76:	80 e9       	ldi	r24, 0x90	; 144
    4a78:	91 e0       	ldi	r25, 0x01	; 1
    4a7a:	9c 83       	std	Y+4, r25	; 0x04
    4a7c:	8b 83       	std	Y+3, r24	; 0x03
    4a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a80:	9c 81       	ldd	r25, Y+4	; 0x04
    4a82:	01 97       	sbiw	r24, 0x01	; 1
    4a84:	f1 f7       	brne	.-4      	; 0x4a82 <Finger_Print_Empty_Templates+0x1ce>
    4a86:	9c 83       	std	Y+4, r25	; 0x04
    4a88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a8e:	01 97       	sbiw	r24, 0x01	; 1
    4a90:	9e 83       	std	Y+6, r25	; 0x06
    4a92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a94:	8d 81       	ldd	r24, Y+5	; 0x05
    4a96:	9e 81       	ldd	r25, Y+6	; 0x06
    4a98:	00 97       	sbiw	r24, 0x00	; 0
    4a9a:	69 f7       	brne	.-38     	; 0x4a76 <Finger_Print_Empty_Templates+0x1c2>
    4a9c:	14 c0       	rjmp	.+40     	; 0x4ac6 <Finger_Print_Empty_Templates+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a9e:	6f 81       	ldd	r22, Y+7	; 0x07
    4aa0:	78 85       	ldd	r23, Y+8	; 0x08
    4aa2:	89 85       	ldd	r24, Y+9	; 0x09
    4aa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	9e 83       	std	Y+6, r25	; 0x06
    4ab0:	8d 83       	std	Y+5, r24	; 0x05
    4ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ab6:	9a 83       	std	Y+2, r25	; 0x02
    4ab8:	89 83       	std	Y+1, r24	; 0x01
    4aba:	89 81       	ldd	r24, Y+1	; 0x01
    4abc:	9a 81       	ldd	r25, Y+2	; 0x02
    4abe:	01 97       	sbiw	r24, 0x01	; 1
    4ac0:	f1 f7       	brne	.-4      	; 0x4abe <Finger_Print_Empty_Templates+0x20a>
    4ac2:	9a 83       	std	Y+2, r25	; 0x02
    4ac4:	89 83       	std	Y+1, r24	; 0x01
	}
}
void Finger_Print_Empty_Templates(void)
{
	Empty_Flag=1;
	while(Empty_Flag)
    4ac6:	80 91 d4 05 	lds	r24, 0x05D4
    4aca:	88 23       	and	r24, r24
    4acc:	09 f0       	breq	.+2      	; 0x4ad0 <Finger_Print_Empty_Templates+0x21c>
    4ace:	00 cf       	rjmp	.-512    	; 0x48d0 <Finger_Print_Empty_Templates+0x1c>
			Flush_Buffer();
			_delay_ms(500);
		}
	}

}
    4ad0:	6c 96       	adiw	r28, 0x1c	; 28
    4ad2:	0f b6       	in	r0, 0x3f	; 63
    4ad4:	f8 94       	cli
    4ad6:	de bf       	out	0x3e, r29	; 62
    4ad8:	0f be       	out	0x3f, r0	; 63
    4ada:	cd bf       	out	0x3d, r28	; 61
    4adc:	cf 91       	pop	r28
    4ade:	df 91       	pop	r29
    4ae0:	08 95       	ret

00004ae2 <Flush_Buffer>:
void Flush_Buffer(void)
{
    4ae2:	df 93       	push	r29
    4ae4:	cf 93       	push	r28
    4ae6:	0f 92       	push	r0
    4ae8:	cd b7       	in	r28, 0x3d	; 61
    4aea:	de b7       	in	r29, 0x3e	; 62
	Local_counter=0;
    4aec:	10 92 ca 05 	sts	0x05CA, r1
	for(u8 i=0;i<30;i++)
    4af0:	19 82       	std	Y+1, r1	; 0x01
    4af2:	0b c0       	rjmp	.+22     	; 0x4b0a <Flush_Buffer+0x28>
	{
		Buffer[i]=0xAA;
    4af4:	89 81       	ldd	r24, Y+1	; 0x01
    4af6:	88 2f       	mov	r24, r24
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	fc 01       	movw	r30, r24
    4afc:	ea 51       	subi	r30, 0x1A	; 26
    4afe:	fa 4f       	sbci	r31, 0xFA	; 250
    4b00:	8a ea       	ldi	r24, 0xAA	; 170
    4b02:	80 83       	st	Z, r24

}
void Flush_Buffer(void)
{
	Local_counter=0;
	for(u8 i=0;i<30;i++)
    4b04:	89 81       	ldd	r24, Y+1	; 0x01
    4b06:	8f 5f       	subi	r24, 0xFF	; 255
    4b08:	89 83       	std	Y+1, r24	; 0x01
    4b0a:	89 81       	ldd	r24, Y+1	; 0x01
    4b0c:	8e 31       	cpi	r24, 0x1E	; 30
    4b0e:	90 f3       	brcs	.-28     	; 0x4af4 <Flush_Buffer+0x12>
	{
		Buffer[i]=0xAA;
	}
}
    4b10:	0f 90       	pop	r0
    4b12:	cf 91       	pop	r28
    4b14:	df 91       	pop	r29
    4b16:	08 95       	ret

00004b18 <Check_Sum>:
void Check_Sum(u8 FB_ID)
{
    4b18:	df 93       	push	r29
    4b1a:	cf 93       	push	r28
    4b1c:	00 d0       	rcall	.+0      	; 0x4b1e <Check_Sum+0x6>
    4b1e:	0f 92       	push	r0
    4b20:	cd b7       	in	r28, 0x3d	; 61
    4b22:	de b7       	in	r29, 0x3e	; 62
    4b24:	8b 83       	std	Y+3, r24	; 0x03
	u8 Check_Sum_Value=0;
    4b26:	1a 82       	std	Y+2, r1	; 0x02
	u8 Counter=0;
    4b28:	19 82       	std	Y+1, r1	; 0x01
	Store[PAGE_ID]=FB_ID;
    4b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b2c:	80 93 eb 04 	sts	0x04EB, r24
	for(Counter=Package_Identifier;Counter<STORE_LENGTH-2;Counter++)
    4b30:	86 e0       	ldi	r24, 0x06	; 6
    4b32:	89 83       	std	Y+1, r24	; 0x01
    4b34:	0d c0       	rjmp	.+26     	; 0x4b50 <Check_Sum+0x38>
	{
		Check_Sum_Value+=Store[Counter];
    4b36:	89 81       	ldd	r24, Y+1	; 0x01
    4b38:	88 2f       	mov	r24, r24
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	fc 01       	movw	r30, r24
    4b3e:	e0 52       	subi	r30, 0x20	; 32
    4b40:	fb 4f       	sbci	r31, 0xFB	; 251
    4b42:	90 81       	ld	r25, Z
    4b44:	8a 81       	ldd	r24, Y+2	; 0x02
    4b46:	89 0f       	add	r24, r25
    4b48:	8a 83       	std	Y+2, r24	; 0x02
void Check_Sum(u8 FB_ID)
{
	u8 Check_Sum_Value=0;
	u8 Counter=0;
	Store[PAGE_ID]=FB_ID;
	for(Counter=Package_Identifier;Counter<STORE_LENGTH-2;Counter++)
    4b4a:	89 81       	ldd	r24, Y+1	; 0x01
    4b4c:	8f 5f       	subi	r24, 0xFF	; 255
    4b4e:	89 83       	std	Y+1, r24	; 0x01
    4b50:	89 81       	ldd	r24, Y+1	; 0x01
    4b52:	8d 30       	cpi	r24, 0x0D	; 13
    4b54:	80 f3       	brcs	.-32     	; 0x4b36 <Check_Sum+0x1e>
	{
		Check_Sum_Value+=Store[Counter];
	}
	Store[Check_Sum_byte]=Check_Sum_Value;
    4b56:	8a 81       	ldd	r24, Y+2	; 0x02
    4b58:	80 93 ee 04 	sts	0x04EE, r24
}
    4b5c:	0f 90       	pop	r0
    4b5e:	0f 90       	pop	r0
    4b60:	0f 90       	pop	r0
    4b62:	cf 91       	pop	r28
    4b64:	df 91       	pop	r29
    4b66:	08 95       	ret

00004b68 <Display_data>:

void Display_data(void)
{
    4b68:	0f 93       	push	r16
    4b6a:	1f 93       	push	r17
    4b6c:	df 93       	push	r29
    4b6e:	cf 93       	push	r28
    4b70:	cd b7       	in	r28, 0x3d	; 61
    4b72:	de b7       	in	r29, 0x3e	; 62
	Buffer[Local_counter]=UART_RecieveByteASynchCallback();
    4b74:	80 91 ca 05 	lds	r24, 0x05CA
    4b78:	08 2f       	mov	r16, r24
    4b7a:	10 e0       	ldi	r17, 0x00	; 0
    4b7c:	0e 94 81 08 	call	0x1102	; 0x1102 <UART_RecieveByteASynchCallback>
    4b80:	f8 01       	movw	r30, r16
    4b82:	ea 51       	subi	r30, 0x1A	; 26
    4b84:	fa 4f       	sbci	r31, 0xFA	; 250
    4b86:	80 83       	st	Z, r24
	//H_LCD_void_sendIntNum(Buffer[Local_counter]);
	Local_counter++;
    4b88:	80 91 ca 05 	lds	r24, 0x05CA
    4b8c:	8f 5f       	subi	r24, 0xFF	; 255
    4b8e:	80 93 ca 05 	sts	0x05CA, r24
}
    4b92:	cf 91       	pop	r28
    4b94:	df 91       	pop	r29
    4b96:	1f 91       	pop	r17
    4b98:	0f 91       	pop	r16
    4b9a:	08 95       	ret

00004b9c <H_EEPROM_Void_Init>:
#include "EEPROM_priv.h"
#include "EEPROM_init.h"
#include "TWI_init.h"

void H_EEPROM_Void_Init()
{
    4b9c:	df 93       	push	r29
    4b9e:	cf 93       	push	r28
    4ba0:	cd b7       	in	r28, 0x3d	; 61
    4ba2:	de b7       	in	r29, 0x3e	; 62
	M_TWI_Void_InitMaster(TWI_SCL_400KHZ);
    4ba4:	8c e0       	ldi	r24, 0x0C	; 12
    4ba6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <M_TWI_Void_InitMaster>
}
    4baa:	cf 91       	pop	r28
    4bac:	df 91       	pop	r29
    4bae:	08 95       	ret

00004bb0 <H_EEPROM_Void_WriteByte>:

ES_t H_EEPROM_Void_WriteByte(u16 Copy_ByteAddress, u8 Copy_DataByte)
{
    4bb0:	df 93       	push	r29
    4bb2:	cf 93       	push	r28
    4bb4:	00 d0       	rcall	.+0      	; 0x4bb6 <H_EEPROM_Void_WriteByte+0x6>
    4bb6:	00 d0       	rcall	.+0      	; 0x4bb8 <H_EEPROM_Void_WriteByte+0x8>
    4bb8:	cd b7       	in	r28, 0x3d	; 61
    4bba:	de b7       	in	r29, 0x3e	; 62
    4bbc:	9a 83       	std	Y+2, r25	; 0x02
    4bbe:	89 83       	std	Y+1, r24	; 0x01
    4bc0:	6b 83       	std	Y+3, r22	; 0x03
	/**
	 * Send START condition
	 **/
	M_TWI_Void_SendStartCondition();
    4bc2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <M_TWI_Void_SendStartCondition>
	if (M_TWI_U8_GetStatus() != TWI_STATUS_START )
    4bc6:	0e 94 87 09 	call	0x130e	; 0x130e <M_TWI_U8_GetStatus>
    4bca:	88 30       	cpi	r24, 0x08	; 8
    4bcc:	19 f0       	breq	.+6      	; 0x4bd4 <H_EEPROM_Void_WriteByte+0x24>
	{
		return EEPROM_NOT_OK;
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    4bd0:	8c 83       	std	Y+4, r24	; 0x04
    4bd2:	26 c0       	rjmp	.+76     	; 0x4c20 <H_EEPROM_Void_WriteByte+0x70>
		/**
		 * Send SLA+W :	1010 0000
		 * */

	/* Send EEPROM address*/
	M_TWI_Void_SendByte(((EEPROM_SLA_4MSB )| (Copy_ByteAddress>>8)) & (EEPROM_SLA_W ));
    4bd4:	89 81       	ldd	r24, Y+1	; 0x01
    4bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bd8:	89 2f       	mov	r24, r25
    4bda:	99 27       	eor	r25, r25
    4bdc:	8e 75       	andi	r24, 0x5E	; 94
    4bde:	80 6a       	ori	r24, 0xA0	; 160
    4be0:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	if((u16)M_TWI_U8_GetStatus()  != TWI_STATUS_SLA_ACK)
    4be4:	0e 94 87 09 	call	0x130e	; 0x130e <M_TWI_U8_GetStatus>
    4be8:	88 31       	cpi	r24, 0x18	; 24
    4bea:	19 f0       	breq	.+6      	; 0x4bf2 <H_EEPROM_Void_WriteByte+0x42>
	{
		return EEPROM_NOT_OK ;
    4bec:	81 e0       	ldi	r24, 0x01	; 1
    4bee:	8c 83       	std	Y+4, r24	; 0x04
    4bf0:	17 c0       	rjmp	.+46     	; 0x4c20 <H_EEPROM_Void_WriteByte+0x70>
	}

	/**
	 *  Send rest of the address:
	 * */
	M_TWI_Void_SendByte((u8)Copy_ByteAddress);
    4bf2:	89 81       	ldd	r24, Y+1	; 0x01
    4bf4:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	if((u16)M_TWI_U8_GetStatus() != TWI_STATUS_DATA_SENT_ACK)
    4bf8:	0e 94 87 09 	call	0x130e	; 0x130e <M_TWI_U8_GetStatus>
    4bfc:	88 32       	cpi	r24, 0x28	; 40
    4bfe:	19 f0       	breq	.+6      	; 0x4c06 <H_EEPROM_Void_WriteByte+0x56>
	{
		return EEPROM_NOT_OK ;
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	8c 83       	std	Y+4, r24	; 0x04
    4c04:	0d c0       	rjmp	.+26     	; 0x4c20 <H_EEPROM_Void_WriteByte+0x70>
	}

	/***
	 * Send The data
	 */
	M_TWI_Void_SendByte(Copy_DataByte);
    4c06:	8b 81       	ldd	r24, Y+3	; 0x03
    4c08:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	if((u16)M_TWI_U8_GetStatus() != TWI_STATUS_DATA_SENT_ACK)
    4c0c:	0e 94 87 09 	call	0x130e	; 0x130e <M_TWI_U8_GetStatus>
    4c10:	88 32       	cpi	r24, 0x28	; 40
    4c12:	19 f0       	breq	.+6      	; 0x4c1a <H_EEPROM_Void_WriteByte+0x6a>
	{
		return EEPROM_NOT_OK ;
    4c14:	81 e0       	ldi	r24, 0x01	; 1
    4c16:	8c 83       	std	Y+4, r24	; 0x04
    4c18:	03 c0       	rjmp	.+6      	; 0x4c20 <H_EEPROM_Void_WriteByte+0x70>

	/**
	 * STOP Condition
	 *
	 */
	M_TWI_Void_SendStopCondition();
    4c1a:	0e 94 92 09 	call	0x1324	; 0x1324 <M_TWI_Void_SendStopCondition>

	return EEPROM_OK ;
    4c1e:	1c 82       	std	Y+4, r1	; 0x04
    4c20:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4c22:	0f 90       	pop	r0
    4c24:	0f 90       	pop	r0
    4c26:	0f 90       	pop	r0
    4c28:	0f 90       	pop	r0
    4c2a:	cf 91       	pop	r28
    4c2c:	df 91       	pop	r29
    4c2e:	08 95       	ret

00004c30 <H_EEPROM_Void_ReadByte>:
 *
 * */


ES_t H_EEPROM_Void_ReadByte(u16 Copy_ByteAddress, u8 *PTR_Byte)
{
    4c30:	df 93       	push	r29
    4c32:	cf 93       	push	r28
    4c34:	00 d0       	rcall	.+0      	; 0x4c36 <H_EEPROM_Void_ReadByte+0x6>
    4c36:	00 d0       	rcall	.+0      	; 0x4c38 <H_EEPROM_Void_ReadByte+0x8>
    4c38:	0f 92       	push	r0
    4c3a:	cd b7       	in	r28, 0x3d	; 61
    4c3c:	de b7       	in	r29, 0x3e	; 62
    4c3e:	9a 83       	std	Y+2, r25	; 0x02
    4c40:	89 83       	std	Y+1, r24	; 0x01
    4c42:	7c 83       	std	Y+4, r23	; 0x04
    4c44:	6b 83       	std	Y+3, r22	; 0x03
	/**
	 * Send START condition
	 **/
	M_TWI_Void_SendStartCondition();
    4c46:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <M_TWI_Void_SendStartCondition>
	if (M_TWI_U8_GetStatus() != TWI_STATUS_START )
    4c4a:	0e 94 87 09 	call	0x130e	; 0x130e <M_TWI_U8_GetStatus>
    4c4e:	88 30       	cpi	r24, 0x08	; 8
    4c50:	19 f0       	breq	.+6      	; 0x4c58 <H_EEPROM_Void_ReadByte+0x28>
	{
		return EEPROM_NOT_OK;
    4c52:	81 e0       	ldi	r24, 0x01	; 1
    4c54:	8d 83       	std	Y+5, r24	; 0x05
    4c56:	37 c0       	rjmp	.+110    	; 0x4cc6 <H_EEPROM_Void_ReadByte+0x96>

		/**
		 * Send SLA+W :	1010 0000
		 * */
	/* Send EEPROM address*/
	M_TWI_Void_SendByte( ((EEPROM_SLA_4MSB )| (Copy_ByteAddress>>8)) & (EEPROM_SLA_W ));
    4c58:	89 81       	ldd	r24, Y+1	; 0x01
    4c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    4c5c:	89 2f       	mov	r24, r25
    4c5e:	99 27       	eor	r25, r25
    4c60:	8e 75       	andi	r24, 0x5E	; 94
    4c62:	80 6a       	ori	r24, 0xA0	; 160
    4c64:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	if(M_TWI_U8_GetStatus()  != TWI_STATUS_SLA_ACK)
    4c68:	0e 94 87 09 	call	0x130e	; 0x130e <M_TWI_U8_GetStatus>
    4c6c:	88 31       	cpi	r24, 0x18	; 24
    4c6e:	19 f0       	breq	.+6      	; 0x4c76 <H_EEPROM_Void_ReadByte+0x46>
	{
		return EEPROM_NOT_OK ;
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	8d 83       	std	Y+5, r24	; 0x05
    4c74:	28 c0       	rjmp	.+80     	; 0x4cc6 <H_EEPROM_Void_ReadByte+0x96>
	}

	/**
	 *  Send rest of the address:
	 * */
	M_TWI_Void_SendByte((u8)Copy_ByteAddress);
    4c76:	89 81       	ldd	r24, Y+1	; 0x01
    4c78:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	if(M_TWI_U8_GetStatus() != TWI_STATUS_DATA_SENT_ACK)
    4c7c:	0e 94 87 09 	call	0x130e	; 0x130e <M_TWI_U8_GetStatus>
    4c80:	88 32       	cpi	r24, 0x28	; 40
    4c82:	19 f0       	breq	.+6      	; 0x4c8a <H_EEPROM_Void_ReadByte+0x5a>
	{
		return EEPROM_NOT_OK ;
    4c84:	81 e0       	ldi	r24, 0x01	; 1
    4c86:	8d 83       	std	Y+5, r24	; 0x05
    4c88:	1e c0       	rjmp	.+60     	; 0x4cc6 <H_EEPROM_Void_ReadByte+0x96>
	}
	/**
	 * Send Repeated START condition
	 **/
	M_TWI_Void_SendStartCondition();
    4c8a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <M_TWI_Void_SendStartCondition>
	if (M_TWI_U8_GetStatus() != TWI_STATUS_REP_START )
    4c8e:	0e 94 87 09 	call	0x130e	; 0x130e <M_TWI_U8_GetStatus>
    4c92:	80 31       	cpi	r24, 0x10	; 16
    4c94:	19 f0       	breq	.+6      	; 0x4c9c <H_EEPROM_Void_ReadByte+0x6c>
	{
		return EEPROM_NOT_OK;
    4c96:	81 e0       	ldi	r24, 0x01	; 1
    4c98:	8d 83       	std	Y+5, r24	; 0x05
    4c9a:	15 c0       	rjmp	.+42     	; 0x4cc6 <H_EEPROM_Void_ReadByte+0x96>
	}
	/****
	 * Send EEPROM address
	 ****/
	M_TWI_Void_SendByte( ((EEPROM_SLA_4MSB )| (Copy_ByteAddress>>8)) | (EEPROM_SLA_R ));
    4c9c:	89 81       	ldd	r24, Y+1	; 0x01
    4c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca0:	89 2f       	mov	r24, r25
    4ca2:	99 27       	eor	r25, r25
    4ca4:	81 6a       	ori	r24, 0xA1	; 161
    4ca6:	0e 94 1b 09 	call	0x1236	; 0x1236 <M_TWI_Void_SendByte>
	if(M_TWI_U8_GetStatus()  != TWI_STATUS_SLA_ACK_R)
    4caa:	0e 94 87 09 	call	0x130e	; 0x130e <M_TWI_U8_GetStatus>
    4cae:	80 34       	cpi	r24, 0x40	; 64
    4cb0:	19 f0       	breq	.+6      	; 0x4cb8 <H_EEPROM_Void_ReadByte+0x88>
	{
		return EEPROM_NOT_OK ;
    4cb2:	81 e0       	ldi	r24, 0x01	; 1
    4cb4:	8d 83       	std	Y+5, r24	; 0x05
    4cb6:	07 c0       	rjmp	.+14     	; 0x4cc6 <H_EEPROM_Void_ReadByte+0x96>
	}

	M_TWI_Void_RecevieWitNACK(PTR_Byte);
    4cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cba:	9c 81       	ldd	r25, Y+4	; 0x04
    4cbc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <M_TWI_Void_RecevieWitNACK>

	M_TWI_Void_SendStopCondition();
    4cc0:	0e 94 92 09 	call	0x1324	; 0x1324 <M_TWI_Void_SendStopCondition>

	return EEPROM_OK ;
    4cc4:	1d 82       	std	Y+5, r1	; 0x05
    4cc6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4cc8:	0f 90       	pop	r0
    4cca:	0f 90       	pop	r0
    4ccc:	0f 90       	pop	r0
    4cce:	0f 90       	pop	r0
    4cd0:	0f 90       	pop	r0
    4cd2:	cf 91       	pop	r28
    4cd4:	df 91       	pop	r29
    4cd6:	08 95       	ret

00004cd8 <H_LCD_void_latchByte>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    4cd8:	df 93       	push	r29
    4cda:	cf 93       	push	r28
    4cdc:	cd b7       	in	r28, 0x3d	; 61
    4cde:	de b7       	in	r29, 0x3e	; 62
    4ce0:	ab 97       	sbiw	r28, 0x2b	; 43
    4ce2:	0f b6       	in	r0, 0x3f	; 63
    4ce4:	f8 94       	cli
    4ce6:	de bf       	out	0x3e, r29	; 62
    4ce8:	0f be       	out	0x3f, r0	; 63
    4cea:	cd bf       	out	0x3d, r28	; 61
    4cec:	8b a7       	std	Y+43, r24	; 0x2b
#if(LCD_MODE == _4_BIT_MODE)
	//enable = zero
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    4cee:	8c e0       	ldi	r24, 0x0C	; 12
    4cf0:	60 e0       	ldi	r22, 0x00	; 0
    4cf2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,4));
    4cf6:	8b a5       	ldd	r24, Y+43	; 0x2b
    4cf8:	82 95       	swap	r24
    4cfa:	8f 70       	andi	r24, 0x0F	; 15
    4cfc:	98 2f       	mov	r25, r24
    4cfe:	91 70       	andi	r25, 0x01	; 1
    4d00:	84 e1       	ldi	r24, 0x14	; 20
    4d02:	69 2f       	mov	r22, r25
    4d04:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,5));
    4d08:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d0a:	82 95       	swap	r24
    4d0c:	86 95       	lsr	r24
    4d0e:	87 70       	andi	r24, 0x07	; 7
    4d10:	98 2f       	mov	r25, r24
    4d12:	91 70       	andi	r25, 0x01	; 1
    4d14:	85 e1       	ldi	r24, 0x15	; 21
    4d16:	69 2f       	mov	r22, r25
    4d18:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,6));
    4d1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d1e:	82 95       	swap	r24
    4d20:	86 95       	lsr	r24
    4d22:	86 95       	lsr	r24
    4d24:	83 70       	andi	r24, 0x03	; 3
    4d26:	98 2f       	mov	r25, r24
    4d28:	91 70       	andi	r25, 0x01	; 1
    4d2a:	86 e1       	ldi	r24, 0x16	; 22
    4d2c:	69 2f       	mov	r22, r25
    4d2e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,7));
    4d32:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d34:	98 2f       	mov	r25, r24
    4d36:	99 1f       	adc	r25, r25
    4d38:	99 27       	eor	r25, r25
    4d3a:	99 1f       	adc	r25, r25
    4d3c:	88 e1       	ldi	r24, 0x18	; 24
    4d3e:	69 2f       	mov	r22, r25
    4d40:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    4d44:	8c e0       	ldi	r24, 0x0C	; 12
    4d46:	61 e0       	ldi	r22, 0x01	; 1
    4d48:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	a0 e8       	ldi	r26, 0x80	; 128
    4d52:	bf e3       	ldi	r27, 0x3F	; 63
    4d54:	8f a3       	std	Y+39, r24	; 0x27
    4d56:	98 a7       	std	Y+40, r25	; 0x28
    4d58:	a9 a7       	std	Y+41, r26	; 0x29
    4d5a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d5c:	6f a1       	ldd	r22, Y+39	; 0x27
    4d5e:	78 a5       	ldd	r23, Y+40	; 0x28
    4d60:	89 a5       	ldd	r24, Y+41	; 0x29
    4d62:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	30 e0       	ldi	r19, 0x00	; 0
    4d68:	4a e7       	ldi	r20, 0x7A	; 122
    4d6a:	55 e4       	ldi	r21, 0x45	; 69
    4d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d70:	dc 01       	movw	r26, r24
    4d72:	cb 01       	movw	r24, r22
    4d74:	8b a3       	std	Y+35, r24	; 0x23
    4d76:	9c a3       	std	Y+36, r25	; 0x24
    4d78:	ad a3       	std	Y+37, r26	; 0x25
    4d7a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d7c:	6b a1       	ldd	r22, Y+35	; 0x23
    4d7e:	7c a1       	ldd	r23, Y+36	; 0x24
    4d80:	8d a1       	ldd	r24, Y+37	; 0x25
    4d82:	9e a1       	ldd	r25, Y+38	; 0x26
    4d84:	20 e0       	ldi	r18, 0x00	; 0
    4d86:	30 e0       	ldi	r19, 0x00	; 0
    4d88:	40 e8       	ldi	r20, 0x80	; 128
    4d8a:	5f e3       	ldi	r21, 0x3F	; 63
    4d8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d90:	88 23       	and	r24, r24
    4d92:	2c f4       	brge	.+10     	; 0x4d9e <H_LCD_void_latchByte+0xc6>
		__ticks = 1;
    4d94:	81 e0       	ldi	r24, 0x01	; 1
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	9a a3       	std	Y+34, r25	; 0x22
    4d9a:	89 a3       	std	Y+33, r24	; 0x21
    4d9c:	3f c0       	rjmp	.+126    	; 0x4e1c <H_LCD_void_latchByte+0x144>
	else if (__tmp > 65535)
    4d9e:	6b a1       	ldd	r22, Y+35	; 0x23
    4da0:	7c a1       	ldd	r23, Y+36	; 0x24
    4da2:	8d a1       	ldd	r24, Y+37	; 0x25
    4da4:	9e a1       	ldd	r25, Y+38	; 0x26
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	3f ef       	ldi	r19, 0xFF	; 255
    4daa:	4f e7       	ldi	r20, 0x7F	; 127
    4dac:	57 e4       	ldi	r21, 0x47	; 71
    4dae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4db2:	18 16       	cp	r1, r24
    4db4:	4c f5       	brge	.+82     	; 0x4e08 <H_LCD_void_latchByte+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4db6:	6f a1       	ldd	r22, Y+39	; 0x27
    4db8:	78 a5       	ldd	r23, Y+40	; 0x28
    4dba:	89 a5       	ldd	r24, Y+41	; 0x29
    4dbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    4dbe:	20 e0       	ldi	r18, 0x00	; 0
    4dc0:	30 e0       	ldi	r19, 0x00	; 0
    4dc2:	40 e2       	ldi	r20, 0x20	; 32
    4dc4:	51 e4       	ldi	r21, 0x41	; 65
    4dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dca:	dc 01       	movw	r26, r24
    4dcc:	cb 01       	movw	r24, r22
    4dce:	bc 01       	movw	r22, r24
    4dd0:	cd 01       	movw	r24, r26
    4dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd6:	dc 01       	movw	r26, r24
    4dd8:	cb 01       	movw	r24, r22
    4dda:	9a a3       	std	Y+34, r25	; 0x22
    4ddc:	89 a3       	std	Y+33, r24	; 0x21
    4dde:	0f c0       	rjmp	.+30     	; 0x4dfe <H_LCD_void_latchByte+0x126>
    4de0:	80 e9       	ldi	r24, 0x90	; 144
    4de2:	91 e0       	ldi	r25, 0x01	; 1
    4de4:	98 a3       	std	Y+32, r25	; 0x20
    4de6:	8f 8f       	std	Y+31, r24	; 0x1f
    4de8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dea:	98 a1       	ldd	r25, Y+32	; 0x20
    4dec:	01 97       	sbiw	r24, 0x01	; 1
    4dee:	f1 f7       	brne	.-4      	; 0x4dec <H_LCD_void_latchByte+0x114>
    4df0:	98 a3       	std	Y+32, r25	; 0x20
    4df2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4df4:	89 a1       	ldd	r24, Y+33	; 0x21
    4df6:	9a a1       	ldd	r25, Y+34	; 0x22
    4df8:	01 97       	sbiw	r24, 0x01	; 1
    4dfa:	9a a3       	std	Y+34, r25	; 0x22
    4dfc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dfe:	89 a1       	ldd	r24, Y+33	; 0x21
    4e00:	9a a1       	ldd	r25, Y+34	; 0x22
    4e02:	00 97       	sbiw	r24, 0x00	; 0
    4e04:	69 f7       	brne	.-38     	; 0x4de0 <H_LCD_void_latchByte+0x108>
    4e06:	14 c0       	rjmp	.+40     	; 0x4e30 <H_LCD_void_latchByte+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e08:	6b a1       	ldd	r22, Y+35	; 0x23
    4e0a:	7c a1       	ldd	r23, Y+36	; 0x24
    4e0c:	8d a1       	ldd	r24, Y+37	; 0x25
    4e0e:	9e a1       	ldd	r25, Y+38	; 0x26
    4e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e14:	dc 01       	movw	r26, r24
    4e16:	cb 01       	movw	r24, r22
    4e18:	9a a3       	std	Y+34, r25	; 0x22
    4e1a:	89 a3       	std	Y+33, r24	; 0x21
    4e1c:	89 a1       	ldd	r24, Y+33	; 0x21
    4e1e:	9a a1       	ldd	r25, Y+34	; 0x22
    4e20:	9e 8f       	std	Y+30, r25	; 0x1e
    4e22:	8d 8f       	std	Y+29, r24	; 0x1d
    4e24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e26:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e28:	01 97       	sbiw	r24, 0x01	; 1
    4e2a:	f1 f7       	brne	.-4      	; 0x4e28 <H_LCD_void_latchByte+0x150>
    4e2c:	9e 8f       	std	Y+30, r25	; 0x1e
    4e2e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    4e30:	8c e0       	ldi	r24, 0x0C	; 12
    4e32:	60 e0       	ldi	r22, 0x00	; 0
    4e34:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_D4,GET_BIT(copy_u8Byte,0));
    4e38:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e3a:	98 2f       	mov	r25, r24
    4e3c:	91 70       	andi	r25, 0x01	; 1
    4e3e:	84 e1       	ldi	r24, 0x14	; 20
    4e40:	69 2f       	mov	r22, r25
    4e42:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D5,GET_BIT(copy_u8Byte,1));
    4e46:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e48:	86 95       	lsr	r24
    4e4a:	98 2f       	mov	r25, r24
    4e4c:	91 70       	andi	r25, 0x01	; 1
    4e4e:	85 e1       	ldi	r24, 0x15	; 21
    4e50:	69 2f       	mov	r22, r25
    4e52:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D6,GET_BIT(copy_u8Byte,2));
    4e56:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e58:	86 95       	lsr	r24
    4e5a:	86 95       	lsr	r24
    4e5c:	98 2f       	mov	r25, r24
    4e5e:	91 70       	andi	r25, 0x01	; 1
    4e60:	86 e1       	ldi	r24, 0x16	; 22
    4e62:	69 2f       	mov	r22, r25
    4e64:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(CLCD_D7,GET_BIT(copy_u8Byte,3));
    4e68:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e6a:	86 95       	lsr	r24
    4e6c:	86 95       	lsr	r24
    4e6e:	86 95       	lsr	r24
    4e70:	98 2f       	mov	r25, r24
    4e72:	91 70       	andi	r25, 0x01	; 1
    4e74:	88 e1       	ldi	r24, 0x18	; 24
    4e76:	69 2f       	mov	r22, r25
    4e78:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>

	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_HIGH);
    4e7c:	8c e0       	ldi	r24, 0x0C	; 12
    4e7e:	61 e0       	ldi	r22, 0x01	; 1
    4e80:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
    4e84:	80 e0       	ldi	r24, 0x00	; 0
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	a0 e8       	ldi	r26, 0x80	; 128
    4e8a:	bf e3       	ldi	r27, 0x3F	; 63
    4e8c:	89 8f       	std	Y+25, r24	; 0x19
    4e8e:	9a 8f       	std	Y+26, r25	; 0x1a
    4e90:	ab 8f       	std	Y+27, r26	; 0x1b
    4e92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e94:	69 8d       	ldd	r22, Y+25	; 0x19
    4e96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e9c:	20 e0       	ldi	r18, 0x00	; 0
    4e9e:	30 e0       	ldi	r19, 0x00	; 0
    4ea0:	4a e7       	ldi	r20, 0x7A	; 122
    4ea2:	55 e4       	ldi	r21, 0x45	; 69
    4ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ea8:	dc 01       	movw	r26, r24
    4eaa:	cb 01       	movw	r24, r22
    4eac:	8d 8b       	std	Y+21, r24	; 0x15
    4eae:	9e 8b       	std	Y+22, r25	; 0x16
    4eb0:	af 8b       	std	Y+23, r26	; 0x17
    4eb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    4eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    4eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    4eba:	98 8d       	ldd	r25, Y+24	; 0x18
    4ebc:	20 e0       	ldi	r18, 0x00	; 0
    4ebe:	30 e0       	ldi	r19, 0x00	; 0
    4ec0:	40 e8       	ldi	r20, 0x80	; 128
    4ec2:	5f e3       	ldi	r21, 0x3F	; 63
    4ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ec8:	88 23       	and	r24, r24
    4eca:	2c f4       	brge	.+10     	; 0x4ed6 <H_LCD_void_latchByte+0x1fe>
		__ticks = 1;
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	9c 8b       	std	Y+20, r25	; 0x14
    4ed2:	8b 8b       	std	Y+19, r24	; 0x13
    4ed4:	3f c0       	rjmp	.+126    	; 0x4f54 <H_LCD_void_latchByte+0x27c>
	else if (__tmp > 65535)
    4ed6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ed8:	7e 89       	ldd	r23, Y+22	; 0x16
    4eda:	8f 89       	ldd	r24, Y+23	; 0x17
    4edc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ede:	20 e0       	ldi	r18, 0x00	; 0
    4ee0:	3f ef       	ldi	r19, 0xFF	; 255
    4ee2:	4f e7       	ldi	r20, 0x7F	; 127
    4ee4:	57 e4       	ldi	r21, 0x47	; 71
    4ee6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eea:	18 16       	cp	r1, r24
    4eec:	4c f5       	brge	.+82     	; 0x4f40 <H_LCD_void_latchByte+0x268>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eee:	69 8d       	ldd	r22, Y+25	; 0x19
    4ef0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ef2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ef4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	40 e2       	ldi	r20, 0x20	; 32
    4efc:	51 e4       	ldi	r21, 0x41	; 65
    4efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f02:	dc 01       	movw	r26, r24
    4f04:	cb 01       	movw	r24, r22
    4f06:	bc 01       	movw	r22, r24
    4f08:	cd 01       	movw	r24, r26
    4f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f0e:	dc 01       	movw	r26, r24
    4f10:	cb 01       	movw	r24, r22
    4f12:	9c 8b       	std	Y+20, r25	; 0x14
    4f14:	8b 8b       	std	Y+19, r24	; 0x13
    4f16:	0f c0       	rjmp	.+30     	; 0x4f36 <H_LCD_void_latchByte+0x25e>
    4f18:	80 e9       	ldi	r24, 0x90	; 144
    4f1a:	91 e0       	ldi	r25, 0x01	; 1
    4f1c:	9a 8b       	std	Y+18, r25	; 0x12
    4f1e:	89 8b       	std	Y+17, r24	; 0x11
    4f20:	89 89       	ldd	r24, Y+17	; 0x11
    4f22:	9a 89       	ldd	r25, Y+18	; 0x12
    4f24:	01 97       	sbiw	r24, 0x01	; 1
    4f26:	f1 f7       	brne	.-4      	; 0x4f24 <H_LCD_void_latchByte+0x24c>
    4f28:	9a 8b       	std	Y+18, r25	; 0x12
    4f2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f2c:	8b 89       	ldd	r24, Y+19	; 0x13
    4f2e:	9c 89       	ldd	r25, Y+20	; 0x14
    4f30:	01 97       	sbiw	r24, 0x01	; 1
    4f32:	9c 8b       	std	Y+20, r25	; 0x14
    4f34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f36:	8b 89       	ldd	r24, Y+19	; 0x13
    4f38:	9c 89       	ldd	r25, Y+20	; 0x14
    4f3a:	00 97       	sbiw	r24, 0x00	; 0
    4f3c:	69 f7       	brne	.-38     	; 0x4f18 <H_LCD_void_latchByte+0x240>
    4f3e:	14 c0       	rjmp	.+40     	; 0x4f68 <H_LCD_void_latchByte+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f40:	6d 89       	ldd	r22, Y+21	; 0x15
    4f42:	7e 89       	ldd	r23, Y+22	; 0x16
    4f44:	8f 89       	ldd	r24, Y+23	; 0x17
    4f46:	98 8d       	ldd	r25, Y+24	; 0x18
    4f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	cb 01       	movw	r24, r22
    4f50:	9c 8b       	std	Y+20, r25	; 0x14
    4f52:	8b 8b       	std	Y+19, r24	; 0x13
    4f54:	8b 89       	ldd	r24, Y+19	; 0x13
    4f56:	9c 89       	ldd	r25, Y+20	; 0x14
    4f58:	98 8b       	std	Y+16, r25	; 0x10
    4f5a:	8f 87       	std	Y+15, r24	; 0x0f
    4f5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f5e:	98 89       	ldd	r25, Y+16	; 0x10
    4f60:	01 97       	sbiw	r24, 0x01	; 1
    4f62:	f1 f7       	brne	.-4      	; 0x4f60 <H_LCD_void_latchByte+0x288>
    4f64:	98 8b       	std	Y+16, r25	; 0x10
    4f66:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
    4f68:	8c e0       	ldi	r24, 0x0C	; 12
    4f6a:	60 e0       	ldi	r22, 0x00	; 0
    4f6c:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
    4f70:	80 e0       	ldi	r24, 0x00	; 0
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	a0 ef       	ldi	r26, 0xF0	; 240
    4f76:	b1 e4       	ldi	r27, 0x41	; 65
    4f78:	8b 87       	std	Y+11, r24	; 0x0b
    4f7a:	9c 87       	std	Y+12, r25	; 0x0c
    4f7c:	ad 87       	std	Y+13, r26	; 0x0d
    4f7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f80:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f82:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f84:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f86:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	4a e7       	ldi	r20, 0x7A	; 122
    4f8e:	55 e4       	ldi	r21, 0x45	; 69
    4f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f94:	dc 01       	movw	r26, r24
    4f96:	cb 01       	movw	r24, r22
    4f98:	8f 83       	std	Y+7, r24	; 0x07
    4f9a:	98 87       	std	Y+8, r25	; 0x08
    4f9c:	a9 87       	std	Y+9, r26	; 0x09
    4f9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    4fa2:	78 85       	ldd	r23, Y+8	; 0x08
    4fa4:	89 85       	ldd	r24, Y+9	; 0x09
    4fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fa8:	20 e0       	ldi	r18, 0x00	; 0
    4faa:	30 e0       	ldi	r19, 0x00	; 0
    4fac:	40 e8       	ldi	r20, 0x80	; 128
    4fae:	5f e3       	ldi	r21, 0x3F	; 63
    4fb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fb4:	88 23       	and	r24, r24
    4fb6:	2c f4       	brge	.+10     	; 0x4fc2 <H_LCD_void_latchByte+0x2ea>
		__ticks = 1;
    4fb8:	81 e0       	ldi	r24, 0x01	; 1
    4fba:	90 e0       	ldi	r25, 0x00	; 0
    4fbc:	9e 83       	std	Y+6, r25	; 0x06
    4fbe:	8d 83       	std	Y+5, r24	; 0x05
    4fc0:	3f c0       	rjmp	.+126    	; 0x5040 <H_LCD_void_latchByte+0x368>
	else if (__tmp > 65535)
    4fc2:	6f 81       	ldd	r22, Y+7	; 0x07
    4fc4:	78 85       	ldd	r23, Y+8	; 0x08
    4fc6:	89 85       	ldd	r24, Y+9	; 0x09
    4fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	3f ef       	ldi	r19, 0xFF	; 255
    4fce:	4f e7       	ldi	r20, 0x7F	; 127
    4fd0:	57 e4       	ldi	r21, 0x47	; 71
    4fd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fd6:	18 16       	cp	r1, r24
    4fd8:	4c f5       	brge	.+82     	; 0x502c <H_LCD_void_latchByte+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fda:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fde:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fe0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fe2:	20 e0       	ldi	r18, 0x00	; 0
    4fe4:	30 e0       	ldi	r19, 0x00	; 0
    4fe6:	40 e2       	ldi	r20, 0x20	; 32
    4fe8:	51 e4       	ldi	r21, 0x41	; 65
    4fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fee:	dc 01       	movw	r26, r24
    4ff0:	cb 01       	movw	r24, r22
    4ff2:	bc 01       	movw	r22, r24
    4ff4:	cd 01       	movw	r24, r26
    4ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ffa:	dc 01       	movw	r26, r24
    4ffc:	cb 01       	movw	r24, r22
    4ffe:	9e 83       	std	Y+6, r25	; 0x06
    5000:	8d 83       	std	Y+5, r24	; 0x05
    5002:	0f c0       	rjmp	.+30     	; 0x5022 <H_LCD_void_latchByte+0x34a>
    5004:	80 e9       	ldi	r24, 0x90	; 144
    5006:	91 e0       	ldi	r25, 0x01	; 1
    5008:	9c 83       	std	Y+4, r25	; 0x04
    500a:	8b 83       	std	Y+3, r24	; 0x03
    500c:	8b 81       	ldd	r24, Y+3	; 0x03
    500e:	9c 81       	ldd	r25, Y+4	; 0x04
    5010:	01 97       	sbiw	r24, 0x01	; 1
    5012:	f1 f7       	brne	.-4      	; 0x5010 <H_LCD_void_latchByte+0x338>
    5014:	9c 83       	std	Y+4, r25	; 0x04
    5016:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5018:	8d 81       	ldd	r24, Y+5	; 0x05
    501a:	9e 81       	ldd	r25, Y+6	; 0x06
    501c:	01 97       	sbiw	r24, 0x01	; 1
    501e:	9e 83       	std	Y+6, r25	; 0x06
    5020:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5022:	8d 81       	ldd	r24, Y+5	; 0x05
    5024:	9e 81       	ldd	r25, Y+6	; 0x06
    5026:	00 97       	sbiw	r24, 0x00	; 0
    5028:	69 f7       	brne	.-38     	; 0x5004 <H_LCD_void_latchByte+0x32c>
    502a:	14 c0       	rjmp	.+40     	; 0x5054 <H_LCD_void_latchByte+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    502c:	6f 81       	ldd	r22, Y+7	; 0x07
    502e:	78 85       	ldd	r23, Y+8	; 0x08
    5030:	89 85       	ldd	r24, Y+9	; 0x09
    5032:	9a 85       	ldd	r25, Y+10	; 0x0a
    5034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5038:	dc 01       	movw	r26, r24
    503a:	cb 01       	movw	r24, r22
    503c:	9e 83       	std	Y+6, r25	; 0x06
    503e:	8d 83       	std	Y+5, r24	; 0x05
    5040:	8d 81       	ldd	r24, Y+5	; 0x05
    5042:	9e 81       	ldd	r25, Y+6	; 0x06
    5044:	9a 83       	std	Y+2, r25	; 0x02
    5046:	89 83       	std	Y+1, r24	; 0x01
    5048:	89 81       	ldd	r24, Y+1	; 0x01
    504a:	9a 81       	ldd	r25, Y+2	; 0x02
    504c:	01 97       	sbiw	r24, 0x01	; 1
    504e:	f1 f7       	brne	.-4      	; 0x504c <H_LCD_void_latchByte+0x374>
    5050:	9a 83       	std	Y+2, r25	; 0x02
    5052:	89 83       	std	Y+1, r24	; 0x01
	M_Dio_void_setPinValue(CLCD_EN_PIN,DIO_LOW);
	_delay_ms(30);

#endif

}
    5054:	ab 96       	adiw	r28, 0x2b	; 43
    5056:	0f b6       	in	r0, 0x3f	; 63
    5058:	f8 94       	cli
    505a:	de bf       	out	0x3e, r29	; 62
    505c:	0f be       	out	0x3f, r0	; 63
    505e:	cd bf       	out	0x3d, r28	; 61
    5060:	cf 91       	pop	r28
    5062:	df 91       	pop	r29
    5064:	08 95       	ret

00005066 <H_LCD_void_Init>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_Init(void)
{
    5066:	0f 93       	push	r16
    5068:	1f 93       	push	r17
    506a:	df 93       	push	r29
    506c:	cf 93       	push	r28
    506e:	cd b7       	in	r28, 0x3d	; 61
    5070:	de b7       	in	r29, 0x3e	; 62
    5072:	c6 54       	subi	r28, 0x46	; 70
    5074:	d0 40       	sbci	r29, 0x00	; 0
    5076:	0f b6       	in	r0, 0x3f	; 63
    5078:	f8 94       	cli
    507a:	de bf       	out	0x3e, r29	; 62
    507c:	0f be       	out	0x3f, r0	; 63
    507e:	cd bf       	out	0x3d, r28	; 61
    5080:	fe 01       	movw	r30, r28
    5082:	ed 5b       	subi	r30, 0xBD	; 189
    5084:	ff 4f       	sbci	r31, 0xFF	; 255
    5086:	80 e0       	ldi	r24, 0x00	; 0
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	a6 e1       	ldi	r26, 0x16	; 22
    508c:	b3 e4       	ldi	r27, 0x43	; 67
    508e:	80 83       	st	Z, r24
    5090:	91 83       	std	Z+1, r25	; 0x01
    5092:	a2 83       	std	Z+2, r26	; 0x02
    5094:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5096:	8e 01       	movw	r16, r28
    5098:	01 5c       	subi	r16, 0xC1	; 193
    509a:	1f 4f       	sbci	r17, 0xFF	; 255
    509c:	fe 01       	movw	r30, r28
    509e:	ed 5b       	subi	r30, 0xBD	; 189
    50a0:	ff 4f       	sbci	r31, 0xFF	; 255
    50a2:	60 81       	ld	r22, Z
    50a4:	71 81       	ldd	r23, Z+1	; 0x01
    50a6:	82 81       	ldd	r24, Z+2	; 0x02
    50a8:	93 81       	ldd	r25, Z+3	; 0x03
    50aa:	20 e0       	ldi	r18, 0x00	; 0
    50ac:	30 e0       	ldi	r19, 0x00	; 0
    50ae:	4a e7       	ldi	r20, 0x7A	; 122
    50b0:	55 e4       	ldi	r21, 0x45	; 69
    50b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50b6:	dc 01       	movw	r26, r24
    50b8:	cb 01       	movw	r24, r22
    50ba:	f8 01       	movw	r30, r16
    50bc:	80 83       	st	Z, r24
    50be:	91 83       	std	Z+1, r25	; 0x01
    50c0:	a2 83       	std	Z+2, r26	; 0x02
    50c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50c4:	fe 01       	movw	r30, r28
    50c6:	ff 96       	adiw	r30, 0x3f	; 63
    50c8:	60 81       	ld	r22, Z
    50ca:	71 81       	ldd	r23, Z+1	; 0x01
    50cc:	82 81       	ldd	r24, Z+2	; 0x02
    50ce:	93 81       	ldd	r25, Z+3	; 0x03
    50d0:	20 e0       	ldi	r18, 0x00	; 0
    50d2:	30 e0       	ldi	r19, 0x00	; 0
    50d4:	40 e8       	ldi	r20, 0x80	; 128
    50d6:	5f e3       	ldi	r21, 0x3F	; 63
    50d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    50dc:	88 23       	and	r24, r24
    50de:	2c f4       	brge	.+10     	; 0x50ea <H_LCD_void_Init+0x84>
		__ticks = 1;
    50e0:	81 e0       	ldi	r24, 0x01	; 1
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	9e af       	std	Y+62, r25	; 0x3e
    50e6:	8d af       	std	Y+61, r24	; 0x3d
    50e8:	46 c0       	rjmp	.+140    	; 0x5176 <H_LCD_void_Init+0x110>
	else if (__tmp > 65535)
    50ea:	fe 01       	movw	r30, r28
    50ec:	ff 96       	adiw	r30, 0x3f	; 63
    50ee:	60 81       	ld	r22, Z
    50f0:	71 81       	ldd	r23, Z+1	; 0x01
    50f2:	82 81       	ldd	r24, Z+2	; 0x02
    50f4:	93 81       	ldd	r25, Z+3	; 0x03
    50f6:	20 e0       	ldi	r18, 0x00	; 0
    50f8:	3f ef       	ldi	r19, 0xFF	; 255
    50fa:	4f e7       	ldi	r20, 0x7F	; 127
    50fc:	57 e4       	ldi	r21, 0x47	; 71
    50fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5102:	18 16       	cp	r1, r24
    5104:	64 f5       	brge	.+88     	; 0x515e <H_LCD_void_Init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5106:	fe 01       	movw	r30, r28
    5108:	ed 5b       	subi	r30, 0xBD	; 189
    510a:	ff 4f       	sbci	r31, 0xFF	; 255
    510c:	60 81       	ld	r22, Z
    510e:	71 81       	ldd	r23, Z+1	; 0x01
    5110:	82 81       	ldd	r24, Z+2	; 0x02
    5112:	93 81       	ldd	r25, Z+3	; 0x03
    5114:	20 e0       	ldi	r18, 0x00	; 0
    5116:	30 e0       	ldi	r19, 0x00	; 0
    5118:	40 e2       	ldi	r20, 0x20	; 32
    511a:	51 e4       	ldi	r21, 0x41	; 65
    511c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5120:	dc 01       	movw	r26, r24
    5122:	cb 01       	movw	r24, r22
    5124:	bc 01       	movw	r22, r24
    5126:	cd 01       	movw	r24, r26
    5128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    512c:	dc 01       	movw	r26, r24
    512e:	cb 01       	movw	r24, r22
    5130:	9e af       	std	Y+62, r25	; 0x3e
    5132:	8d af       	std	Y+61, r24	; 0x3d
    5134:	0f c0       	rjmp	.+30     	; 0x5154 <H_LCD_void_Init+0xee>
    5136:	80 e9       	ldi	r24, 0x90	; 144
    5138:	91 e0       	ldi	r25, 0x01	; 1
    513a:	9c af       	std	Y+60, r25	; 0x3c
    513c:	8b af       	std	Y+59, r24	; 0x3b
    513e:	8b ad       	ldd	r24, Y+59	; 0x3b
    5140:	9c ad       	ldd	r25, Y+60	; 0x3c
    5142:	01 97       	sbiw	r24, 0x01	; 1
    5144:	f1 f7       	brne	.-4      	; 0x5142 <H_LCD_void_Init+0xdc>
    5146:	9c af       	std	Y+60, r25	; 0x3c
    5148:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    514a:	8d ad       	ldd	r24, Y+61	; 0x3d
    514c:	9e ad       	ldd	r25, Y+62	; 0x3e
    514e:	01 97       	sbiw	r24, 0x01	; 1
    5150:	9e af       	std	Y+62, r25	; 0x3e
    5152:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5154:	8d ad       	ldd	r24, Y+61	; 0x3d
    5156:	9e ad       	ldd	r25, Y+62	; 0x3e
    5158:	00 97       	sbiw	r24, 0x00	; 0
    515a:	69 f7       	brne	.-38     	; 0x5136 <H_LCD_void_Init+0xd0>
    515c:	16 c0       	rjmp	.+44     	; 0x518a <H_LCD_void_Init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    515e:	fe 01       	movw	r30, r28
    5160:	ff 96       	adiw	r30, 0x3f	; 63
    5162:	60 81       	ld	r22, Z
    5164:	71 81       	ldd	r23, Z+1	; 0x01
    5166:	82 81       	ldd	r24, Z+2	; 0x02
    5168:	93 81       	ldd	r25, Z+3	; 0x03
    516a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    516e:	dc 01       	movw	r26, r24
    5170:	cb 01       	movw	r24, r22
    5172:	9e af       	std	Y+62, r25	; 0x3e
    5174:	8d af       	std	Y+61, r24	; 0x3d
    5176:	8d ad       	ldd	r24, Y+61	; 0x3d
    5178:	9e ad       	ldd	r25, Y+62	; 0x3e
    517a:	9a af       	std	Y+58, r25	; 0x3a
    517c:	89 af       	std	Y+57, r24	; 0x39
    517e:	89 ad       	ldd	r24, Y+57	; 0x39
    5180:	9a ad       	ldd	r25, Y+58	; 0x3a
    5182:	01 97       	sbiw	r24, 0x01	; 1
    5184:	f1 f7       	brne	.-4      	; 0x5182 <H_LCD_void_Init+0x11c>
    5186:	9a af       	std	Y+58, r25	; 0x3a
    5188:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(150);
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    518a:	8d e0       	ldi	r24, 0x0D	; 13
    518c:	60 e0       	ldi	r22, 0x00	; 0
    518e:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
	/*Function set*/
#if(LCD_MODE == _4_BIT_MODE)
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_1);
    5192:	82 e0       	ldi	r24, 0x02	; 2
    5194:	0e 94 bd 2a 	call	0x557a	; 0x557a <H_LCD_void_sendCommand>
    5198:	80 e0       	ldi	r24, 0x00	; 0
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	a0 ea       	ldi	r26, 0xA0	; 160
    519e:	b0 e4       	ldi	r27, 0x40	; 64
    51a0:	8d ab       	std	Y+53, r24	; 0x35
    51a2:	9e ab       	std	Y+54, r25	; 0x36
    51a4:	af ab       	std	Y+55, r26	; 0x37
    51a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51a8:	6d a9       	ldd	r22, Y+53	; 0x35
    51aa:	7e a9       	ldd	r23, Y+54	; 0x36
    51ac:	8f a9       	ldd	r24, Y+55	; 0x37
    51ae:	98 ad       	ldd	r25, Y+56	; 0x38
    51b0:	20 e0       	ldi	r18, 0x00	; 0
    51b2:	30 e0       	ldi	r19, 0x00	; 0
    51b4:	4a e7       	ldi	r20, 0x7A	; 122
    51b6:	55 e4       	ldi	r21, 0x45	; 69
    51b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51bc:	dc 01       	movw	r26, r24
    51be:	cb 01       	movw	r24, r22
    51c0:	89 ab       	std	Y+49, r24	; 0x31
    51c2:	9a ab       	std	Y+50, r25	; 0x32
    51c4:	ab ab       	std	Y+51, r26	; 0x33
    51c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    51c8:	69 a9       	ldd	r22, Y+49	; 0x31
    51ca:	7a a9       	ldd	r23, Y+50	; 0x32
    51cc:	8b a9       	ldd	r24, Y+51	; 0x33
    51ce:	9c a9       	ldd	r25, Y+52	; 0x34
    51d0:	20 e0       	ldi	r18, 0x00	; 0
    51d2:	30 e0       	ldi	r19, 0x00	; 0
    51d4:	40 e8       	ldi	r20, 0x80	; 128
    51d6:	5f e3       	ldi	r21, 0x3F	; 63
    51d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51dc:	88 23       	and	r24, r24
    51de:	2c f4       	brge	.+10     	; 0x51ea <H_LCD_void_Init+0x184>
		__ticks = 1;
    51e0:	81 e0       	ldi	r24, 0x01	; 1
    51e2:	90 e0       	ldi	r25, 0x00	; 0
    51e4:	98 ab       	std	Y+48, r25	; 0x30
    51e6:	8f a7       	std	Y+47, r24	; 0x2f
    51e8:	3f c0       	rjmp	.+126    	; 0x5268 <H_LCD_void_Init+0x202>
	else if (__tmp > 65535)
    51ea:	69 a9       	ldd	r22, Y+49	; 0x31
    51ec:	7a a9       	ldd	r23, Y+50	; 0x32
    51ee:	8b a9       	ldd	r24, Y+51	; 0x33
    51f0:	9c a9       	ldd	r25, Y+52	; 0x34
    51f2:	20 e0       	ldi	r18, 0x00	; 0
    51f4:	3f ef       	ldi	r19, 0xFF	; 255
    51f6:	4f e7       	ldi	r20, 0x7F	; 127
    51f8:	57 e4       	ldi	r21, 0x47	; 71
    51fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51fe:	18 16       	cp	r1, r24
    5200:	4c f5       	brge	.+82     	; 0x5254 <H_LCD_void_Init+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5202:	6d a9       	ldd	r22, Y+53	; 0x35
    5204:	7e a9       	ldd	r23, Y+54	; 0x36
    5206:	8f a9       	ldd	r24, Y+55	; 0x37
    5208:	98 ad       	ldd	r25, Y+56	; 0x38
    520a:	20 e0       	ldi	r18, 0x00	; 0
    520c:	30 e0       	ldi	r19, 0x00	; 0
    520e:	40 e2       	ldi	r20, 0x20	; 32
    5210:	51 e4       	ldi	r21, 0x41	; 65
    5212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5216:	dc 01       	movw	r26, r24
    5218:	cb 01       	movw	r24, r22
    521a:	bc 01       	movw	r22, r24
    521c:	cd 01       	movw	r24, r26
    521e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5222:	dc 01       	movw	r26, r24
    5224:	cb 01       	movw	r24, r22
    5226:	98 ab       	std	Y+48, r25	; 0x30
    5228:	8f a7       	std	Y+47, r24	; 0x2f
    522a:	0f c0       	rjmp	.+30     	; 0x524a <H_LCD_void_Init+0x1e4>
    522c:	80 e9       	ldi	r24, 0x90	; 144
    522e:	91 e0       	ldi	r25, 0x01	; 1
    5230:	9e a7       	std	Y+46, r25	; 0x2e
    5232:	8d a7       	std	Y+45, r24	; 0x2d
    5234:	8d a5       	ldd	r24, Y+45	; 0x2d
    5236:	9e a5       	ldd	r25, Y+46	; 0x2e
    5238:	01 97       	sbiw	r24, 0x01	; 1
    523a:	f1 f7       	brne	.-4      	; 0x5238 <H_LCD_void_Init+0x1d2>
    523c:	9e a7       	std	Y+46, r25	; 0x2e
    523e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5240:	8f a5       	ldd	r24, Y+47	; 0x2f
    5242:	98 a9       	ldd	r25, Y+48	; 0x30
    5244:	01 97       	sbiw	r24, 0x01	; 1
    5246:	98 ab       	std	Y+48, r25	; 0x30
    5248:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    524a:	8f a5       	ldd	r24, Y+47	; 0x2f
    524c:	98 a9       	ldd	r25, Y+48	; 0x30
    524e:	00 97       	sbiw	r24, 0x00	; 0
    5250:	69 f7       	brne	.-38     	; 0x522c <H_LCD_void_Init+0x1c6>
    5252:	14 c0       	rjmp	.+40     	; 0x527c <H_LCD_void_Init+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5254:	69 a9       	ldd	r22, Y+49	; 0x31
    5256:	7a a9       	ldd	r23, Y+50	; 0x32
    5258:	8b a9       	ldd	r24, Y+51	; 0x33
    525a:	9c a9       	ldd	r25, Y+52	; 0x34
    525c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5260:	dc 01       	movw	r26, r24
    5262:	cb 01       	movw	r24, r22
    5264:	98 ab       	std	Y+48, r25	; 0x30
    5266:	8f a7       	std	Y+47, r24	; 0x2f
    5268:	8f a5       	ldd	r24, Y+47	; 0x2f
    526a:	98 a9       	ldd	r25, Y+48	; 0x30
    526c:	9c a7       	std	Y+44, r25	; 0x2c
    526e:	8b a7       	std	Y+43, r24	; 0x2b
    5270:	8b a5       	ldd	r24, Y+43	; 0x2b
    5272:	9c a5       	ldd	r25, Y+44	; 0x2c
    5274:	01 97       	sbiw	r24, 0x01	; 1
    5276:	f1 f7       	brne	.-4      	; 0x5274 <H_LCD_void_Init+0x20e>
    5278:	9c a7       	std	Y+44, r25	; 0x2c
    527a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_FUNCTION_SET_2);
    527c:	88 e2       	ldi	r24, 0x28	; 40
    527e:	0e 94 bd 2a 	call	0x557a	; 0x557a <H_LCD_void_sendCommand>
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	a0 ea       	ldi	r26, 0xA0	; 160
    5288:	b0 e4       	ldi	r27, 0x40	; 64
    528a:	8f a3       	std	Y+39, r24	; 0x27
    528c:	98 a7       	std	Y+40, r25	; 0x28
    528e:	a9 a7       	std	Y+41, r26	; 0x29
    5290:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5292:	6f a1       	ldd	r22, Y+39	; 0x27
    5294:	78 a5       	ldd	r23, Y+40	; 0x28
    5296:	89 a5       	ldd	r24, Y+41	; 0x29
    5298:	9a a5       	ldd	r25, Y+42	; 0x2a
    529a:	20 e0       	ldi	r18, 0x00	; 0
    529c:	30 e0       	ldi	r19, 0x00	; 0
    529e:	4a e7       	ldi	r20, 0x7A	; 122
    52a0:	55 e4       	ldi	r21, 0x45	; 69
    52a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52a6:	dc 01       	movw	r26, r24
    52a8:	cb 01       	movw	r24, r22
    52aa:	8b a3       	std	Y+35, r24	; 0x23
    52ac:	9c a3       	std	Y+36, r25	; 0x24
    52ae:	ad a3       	std	Y+37, r26	; 0x25
    52b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    52b2:	6b a1       	ldd	r22, Y+35	; 0x23
    52b4:	7c a1       	ldd	r23, Y+36	; 0x24
    52b6:	8d a1       	ldd	r24, Y+37	; 0x25
    52b8:	9e a1       	ldd	r25, Y+38	; 0x26
    52ba:	20 e0       	ldi	r18, 0x00	; 0
    52bc:	30 e0       	ldi	r19, 0x00	; 0
    52be:	40 e8       	ldi	r20, 0x80	; 128
    52c0:	5f e3       	ldi	r21, 0x3F	; 63
    52c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52c6:	88 23       	and	r24, r24
    52c8:	2c f4       	brge	.+10     	; 0x52d4 <H_LCD_void_Init+0x26e>
		__ticks = 1;
    52ca:	81 e0       	ldi	r24, 0x01	; 1
    52cc:	90 e0       	ldi	r25, 0x00	; 0
    52ce:	9a a3       	std	Y+34, r25	; 0x22
    52d0:	89 a3       	std	Y+33, r24	; 0x21
    52d2:	3f c0       	rjmp	.+126    	; 0x5352 <H_LCD_void_Init+0x2ec>
	else if (__tmp > 65535)
    52d4:	6b a1       	ldd	r22, Y+35	; 0x23
    52d6:	7c a1       	ldd	r23, Y+36	; 0x24
    52d8:	8d a1       	ldd	r24, Y+37	; 0x25
    52da:	9e a1       	ldd	r25, Y+38	; 0x26
    52dc:	20 e0       	ldi	r18, 0x00	; 0
    52de:	3f ef       	ldi	r19, 0xFF	; 255
    52e0:	4f e7       	ldi	r20, 0x7F	; 127
    52e2:	57 e4       	ldi	r21, 0x47	; 71
    52e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52e8:	18 16       	cp	r1, r24
    52ea:	4c f5       	brge	.+82     	; 0x533e <H_LCD_void_Init+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52ec:	6f a1       	ldd	r22, Y+39	; 0x27
    52ee:	78 a5       	ldd	r23, Y+40	; 0x28
    52f0:	89 a5       	ldd	r24, Y+41	; 0x29
    52f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    52f4:	20 e0       	ldi	r18, 0x00	; 0
    52f6:	30 e0       	ldi	r19, 0x00	; 0
    52f8:	40 e2       	ldi	r20, 0x20	; 32
    52fa:	51 e4       	ldi	r21, 0x41	; 65
    52fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5300:	dc 01       	movw	r26, r24
    5302:	cb 01       	movw	r24, r22
    5304:	bc 01       	movw	r22, r24
    5306:	cd 01       	movw	r24, r26
    5308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    530c:	dc 01       	movw	r26, r24
    530e:	cb 01       	movw	r24, r22
    5310:	9a a3       	std	Y+34, r25	; 0x22
    5312:	89 a3       	std	Y+33, r24	; 0x21
    5314:	0f c0       	rjmp	.+30     	; 0x5334 <H_LCD_void_Init+0x2ce>
    5316:	80 e9       	ldi	r24, 0x90	; 144
    5318:	91 e0       	ldi	r25, 0x01	; 1
    531a:	98 a3       	std	Y+32, r25	; 0x20
    531c:	8f 8f       	std	Y+31, r24	; 0x1f
    531e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5320:	98 a1       	ldd	r25, Y+32	; 0x20
    5322:	01 97       	sbiw	r24, 0x01	; 1
    5324:	f1 f7       	brne	.-4      	; 0x5322 <H_LCD_void_Init+0x2bc>
    5326:	98 a3       	std	Y+32, r25	; 0x20
    5328:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    532a:	89 a1       	ldd	r24, Y+33	; 0x21
    532c:	9a a1       	ldd	r25, Y+34	; 0x22
    532e:	01 97       	sbiw	r24, 0x01	; 1
    5330:	9a a3       	std	Y+34, r25	; 0x22
    5332:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5334:	89 a1       	ldd	r24, Y+33	; 0x21
    5336:	9a a1       	ldd	r25, Y+34	; 0x22
    5338:	00 97       	sbiw	r24, 0x00	; 0
    533a:	69 f7       	brne	.-38     	; 0x5316 <H_LCD_void_Init+0x2b0>
    533c:	14 c0       	rjmp	.+40     	; 0x5366 <H_LCD_void_Init+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    533e:	6b a1       	ldd	r22, Y+35	; 0x23
    5340:	7c a1       	ldd	r23, Y+36	; 0x24
    5342:	8d a1       	ldd	r24, Y+37	; 0x25
    5344:	9e a1       	ldd	r25, Y+38	; 0x26
    5346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    534a:	dc 01       	movw	r26, r24
    534c:	cb 01       	movw	r24, r22
    534e:	9a a3       	std	Y+34, r25	; 0x22
    5350:	89 a3       	std	Y+33, r24	; 0x21
    5352:	89 a1       	ldd	r24, Y+33	; 0x21
    5354:	9a a1       	ldd	r25, Y+34	; 0x22
    5356:	9e 8f       	std	Y+30, r25	; 0x1e
    5358:	8d 8f       	std	Y+29, r24	; 0x1d
    535a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    535c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    535e:	01 97       	sbiw	r24, 0x01	; 1
    5360:	f1 f7       	brne	.-4      	; 0x535e <H_LCD_void_Init+0x2f8>
    5362:	9e 8f       	std	Y+30, r25	; 0x1e
    5364:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	/*Display ON/OFF*/
	H_LCD_void_sendCommand(CLCD_DISPLAY);
    5366:	8c e0       	ldi	r24, 0x0C	; 12
    5368:	0e 94 bd 2a 	call	0x557a	; 0x557a <H_LCD_void_sendCommand>
    536c:	80 e0       	ldi	r24, 0x00	; 0
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	a0 ea       	ldi	r26, 0xA0	; 160
    5372:	b0 e4       	ldi	r27, 0x40	; 64
    5374:	89 8f       	std	Y+25, r24	; 0x19
    5376:	9a 8f       	std	Y+26, r25	; 0x1a
    5378:	ab 8f       	std	Y+27, r26	; 0x1b
    537a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    537c:	69 8d       	ldd	r22, Y+25	; 0x19
    537e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5380:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5382:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5384:	20 e0       	ldi	r18, 0x00	; 0
    5386:	30 e0       	ldi	r19, 0x00	; 0
    5388:	4a e7       	ldi	r20, 0x7A	; 122
    538a:	55 e4       	ldi	r21, 0x45	; 69
    538c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5390:	dc 01       	movw	r26, r24
    5392:	cb 01       	movw	r24, r22
    5394:	8d 8b       	std	Y+21, r24	; 0x15
    5396:	9e 8b       	std	Y+22, r25	; 0x16
    5398:	af 8b       	std	Y+23, r26	; 0x17
    539a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    539c:	6d 89       	ldd	r22, Y+21	; 0x15
    539e:	7e 89       	ldd	r23, Y+22	; 0x16
    53a0:	8f 89       	ldd	r24, Y+23	; 0x17
    53a2:	98 8d       	ldd	r25, Y+24	; 0x18
    53a4:	20 e0       	ldi	r18, 0x00	; 0
    53a6:	30 e0       	ldi	r19, 0x00	; 0
    53a8:	40 e8       	ldi	r20, 0x80	; 128
    53aa:	5f e3       	ldi	r21, 0x3F	; 63
    53ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53b0:	88 23       	and	r24, r24
    53b2:	2c f4       	brge	.+10     	; 0x53be <H_LCD_void_Init+0x358>
		__ticks = 1;
    53b4:	81 e0       	ldi	r24, 0x01	; 1
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	9c 8b       	std	Y+20, r25	; 0x14
    53ba:	8b 8b       	std	Y+19, r24	; 0x13
    53bc:	3f c0       	rjmp	.+126    	; 0x543c <H_LCD_void_Init+0x3d6>
	else if (__tmp > 65535)
    53be:	6d 89       	ldd	r22, Y+21	; 0x15
    53c0:	7e 89       	ldd	r23, Y+22	; 0x16
    53c2:	8f 89       	ldd	r24, Y+23	; 0x17
    53c4:	98 8d       	ldd	r25, Y+24	; 0x18
    53c6:	20 e0       	ldi	r18, 0x00	; 0
    53c8:	3f ef       	ldi	r19, 0xFF	; 255
    53ca:	4f e7       	ldi	r20, 0x7F	; 127
    53cc:	57 e4       	ldi	r21, 0x47	; 71
    53ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53d2:	18 16       	cp	r1, r24
    53d4:	4c f5       	brge	.+82     	; 0x5428 <H_LCD_void_Init+0x3c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53d6:	69 8d       	ldd	r22, Y+25	; 0x19
    53d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53de:	20 e0       	ldi	r18, 0x00	; 0
    53e0:	30 e0       	ldi	r19, 0x00	; 0
    53e2:	40 e2       	ldi	r20, 0x20	; 32
    53e4:	51 e4       	ldi	r21, 0x41	; 65
    53e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53ea:	dc 01       	movw	r26, r24
    53ec:	cb 01       	movw	r24, r22
    53ee:	bc 01       	movw	r22, r24
    53f0:	cd 01       	movw	r24, r26
    53f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53f6:	dc 01       	movw	r26, r24
    53f8:	cb 01       	movw	r24, r22
    53fa:	9c 8b       	std	Y+20, r25	; 0x14
    53fc:	8b 8b       	std	Y+19, r24	; 0x13
    53fe:	0f c0       	rjmp	.+30     	; 0x541e <H_LCD_void_Init+0x3b8>
    5400:	80 e9       	ldi	r24, 0x90	; 144
    5402:	91 e0       	ldi	r25, 0x01	; 1
    5404:	9a 8b       	std	Y+18, r25	; 0x12
    5406:	89 8b       	std	Y+17, r24	; 0x11
    5408:	89 89       	ldd	r24, Y+17	; 0x11
    540a:	9a 89       	ldd	r25, Y+18	; 0x12
    540c:	01 97       	sbiw	r24, 0x01	; 1
    540e:	f1 f7       	brne	.-4      	; 0x540c <H_LCD_void_Init+0x3a6>
    5410:	9a 8b       	std	Y+18, r25	; 0x12
    5412:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5414:	8b 89       	ldd	r24, Y+19	; 0x13
    5416:	9c 89       	ldd	r25, Y+20	; 0x14
    5418:	01 97       	sbiw	r24, 0x01	; 1
    541a:	9c 8b       	std	Y+20, r25	; 0x14
    541c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    541e:	8b 89       	ldd	r24, Y+19	; 0x13
    5420:	9c 89       	ldd	r25, Y+20	; 0x14
    5422:	00 97       	sbiw	r24, 0x00	; 0
    5424:	69 f7       	brne	.-38     	; 0x5400 <H_LCD_void_Init+0x39a>
    5426:	14 c0       	rjmp	.+40     	; 0x5450 <H_LCD_void_Init+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5428:	6d 89       	ldd	r22, Y+21	; 0x15
    542a:	7e 89       	ldd	r23, Y+22	; 0x16
    542c:	8f 89       	ldd	r24, Y+23	; 0x17
    542e:	98 8d       	ldd	r25, Y+24	; 0x18
    5430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5434:	dc 01       	movw	r26, r24
    5436:	cb 01       	movw	r24, r22
    5438:	9c 8b       	std	Y+20, r25	; 0x14
    543a:	8b 8b       	std	Y+19, r24	; 0x13
    543c:	8b 89       	ldd	r24, Y+19	; 0x13
    543e:	9c 89       	ldd	r25, Y+20	; 0x14
    5440:	98 8b       	std	Y+16, r25	; 0x10
    5442:	8f 87       	std	Y+15, r24	; 0x0f
    5444:	8f 85       	ldd	r24, Y+15	; 0x0f
    5446:	98 89       	ldd	r25, Y+16	; 0x10
    5448:	01 97       	sbiw	r24, 0x01	; 1
    544a:	f1 f7       	brne	.-4      	; 0x5448 <H_LCD_void_Init+0x3e2>
    544c:	98 8b       	std	Y+16, r25	; 0x10
    544e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	/*Display clear*/
	H_LCD_void_sendCommand(CLCD_CLEAR);
    5450:	81 e0       	ldi	r24, 0x01	; 1
    5452:	0e 94 bd 2a 	call	0x557a	; 0x557a <H_LCD_void_sendCommand>
    5456:	80 e0       	ldi	r24, 0x00	; 0
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	a0 ea       	ldi	r26, 0xA0	; 160
    545c:	b0 e4       	ldi	r27, 0x40	; 64
    545e:	8b 87       	std	Y+11, r24	; 0x0b
    5460:	9c 87       	std	Y+12, r25	; 0x0c
    5462:	ad 87       	std	Y+13, r26	; 0x0d
    5464:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5466:	6b 85       	ldd	r22, Y+11	; 0x0b
    5468:	7c 85       	ldd	r23, Y+12	; 0x0c
    546a:	8d 85       	ldd	r24, Y+13	; 0x0d
    546c:	9e 85       	ldd	r25, Y+14	; 0x0e
    546e:	20 e0       	ldi	r18, 0x00	; 0
    5470:	30 e0       	ldi	r19, 0x00	; 0
    5472:	4a e7       	ldi	r20, 0x7A	; 122
    5474:	55 e4       	ldi	r21, 0x45	; 69
    5476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    547a:	dc 01       	movw	r26, r24
    547c:	cb 01       	movw	r24, r22
    547e:	8f 83       	std	Y+7, r24	; 0x07
    5480:	98 87       	std	Y+8, r25	; 0x08
    5482:	a9 87       	std	Y+9, r26	; 0x09
    5484:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5486:	6f 81       	ldd	r22, Y+7	; 0x07
    5488:	78 85       	ldd	r23, Y+8	; 0x08
    548a:	89 85       	ldd	r24, Y+9	; 0x09
    548c:	9a 85       	ldd	r25, Y+10	; 0x0a
    548e:	20 e0       	ldi	r18, 0x00	; 0
    5490:	30 e0       	ldi	r19, 0x00	; 0
    5492:	40 e8       	ldi	r20, 0x80	; 128
    5494:	5f e3       	ldi	r21, 0x3F	; 63
    5496:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    549a:	88 23       	and	r24, r24
    549c:	2c f4       	brge	.+10     	; 0x54a8 <H_LCD_void_Init+0x442>
		__ticks = 1;
    549e:	81 e0       	ldi	r24, 0x01	; 1
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	9e 83       	std	Y+6, r25	; 0x06
    54a4:	8d 83       	std	Y+5, r24	; 0x05
    54a6:	3f c0       	rjmp	.+126    	; 0x5526 <H_LCD_void_Init+0x4c0>
	else if (__tmp > 65535)
    54a8:	6f 81       	ldd	r22, Y+7	; 0x07
    54aa:	78 85       	ldd	r23, Y+8	; 0x08
    54ac:	89 85       	ldd	r24, Y+9	; 0x09
    54ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    54b0:	20 e0       	ldi	r18, 0x00	; 0
    54b2:	3f ef       	ldi	r19, 0xFF	; 255
    54b4:	4f e7       	ldi	r20, 0x7F	; 127
    54b6:	57 e4       	ldi	r21, 0x47	; 71
    54b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54bc:	18 16       	cp	r1, r24
    54be:	4c f5       	brge	.+82     	; 0x5512 <H_LCD_void_Init+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    54c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    54c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    54c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    54c8:	20 e0       	ldi	r18, 0x00	; 0
    54ca:	30 e0       	ldi	r19, 0x00	; 0
    54cc:	40 e2       	ldi	r20, 0x20	; 32
    54ce:	51 e4       	ldi	r21, 0x41	; 65
    54d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54d4:	dc 01       	movw	r26, r24
    54d6:	cb 01       	movw	r24, r22
    54d8:	bc 01       	movw	r22, r24
    54da:	cd 01       	movw	r24, r26
    54dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54e0:	dc 01       	movw	r26, r24
    54e2:	cb 01       	movw	r24, r22
    54e4:	9e 83       	std	Y+6, r25	; 0x06
    54e6:	8d 83       	std	Y+5, r24	; 0x05
    54e8:	0f c0       	rjmp	.+30     	; 0x5508 <H_LCD_void_Init+0x4a2>
    54ea:	80 e9       	ldi	r24, 0x90	; 144
    54ec:	91 e0       	ldi	r25, 0x01	; 1
    54ee:	9c 83       	std	Y+4, r25	; 0x04
    54f0:	8b 83       	std	Y+3, r24	; 0x03
    54f2:	8b 81       	ldd	r24, Y+3	; 0x03
    54f4:	9c 81       	ldd	r25, Y+4	; 0x04
    54f6:	01 97       	sbiw	r24, 0x01	; 1
    54f8:	f1 f7       	brne	.-4      	; 0x54f6 <H_LCD_void_Init+0x490>
    54fa:	9c 83       	std	Y+4, r25	; 0x04
    54fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54fe:	8d 81       	ldd	r24, Y+5	; 0x05
    5500:	9e 81       	ldd	r25, Y+6	; 0x06
    5502:	01 97       	sbiw	r24, 0x01	; 1
    5504:	9e 83       	std	Y+6, r25	; 0x06
    5506:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5508:	8d 81       	ldd	r24, Y+5	; 0x05
    550a:	9e 81       	ldd	r25, Y+6	; 0x06
    550c:	00 97       	sbiw	r24, 0x00	; 0
    550e:	69 f7       	brne	.-38     	; 0x54ea <H_LCD_void_Init+0x484>
    5510:	14 c0       	rjmp	.+40     	; 0x553a <H_LCD_void_Init+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5512:	6f 81       	ldd	r22, Y+7	; 0x07
    5514:	78 85       	ldd	r23, Y+8	; 0x08
    5516:	89 85       	ldd	r24, Y+9	; 0x09
    5518:	9a 85       	ldd	r25, Y+10	; 0x0a
    551a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    551e:	dc 01       	movw	r26, r24
    5520:	cb 01       	movw	r24, r22
    5522:	9e 83       	std	Y+6, r25	; 0x06
    5524:	8d 83       	std	Y+5, r24	; 0x05
    5526:	8d 81       	ldd	r24, Y+5	; 0x05
    5528:	9e 81       	ldd	r25, Y+6	; 0x06
    552a:	9a 83       	std	Y+2, r25	; 0x02
    552c:	89 83       	std	Y+1, r24	; 0x01
    552e:	89 81       	ldd	r24, Y+1	; 0x01
    5530:	9a 81       	ldd	r25, Y+2	; 0x02
    5532:	01 97       	sbiw	r24, 0x01	; 1
    5534:	f1 f7       	brne	.-4      	; 0x5532 <H_LCD_void_Init+0x4cc>
    5536:	9a 83       	std	Y+2, r25	; 0x02
    5538:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	H_LCD_void_sendCommand(CLCD_ENTRY_MODE_SET);
    553a:	86 e0       	ldi	r24, 0x06	; 6
    553c:	0e 94 bd 2a 	call	0x557a	; 0x557a <H_LCD_void_sendCommand>
	/*clear display*/
	H_LCD_void_sendCommand(0b00000001);

#endif

}
    5540:	ca 5b       	subi	r28, 0xBA	; 186
    5542:	df 4f       	sbci	r29, 0xFF	; 255
    5544:	0f b6       	in	r0, 0x3f	; 63
    5546:	f8 94       	cli
    5548:	de bf       	out	0x3e, r29	; 62
    554a:	0f be       	out	0x3f, r0	; 63
    554c:	cd bf       	out	0x3d, r28	; 61
    554e:	cf 91       	pop	r28
    5550:	df 91       	pop	r29
    5552:	1f 91       	pop	r17
    5554:	0f 91       	pop	r16
    5556:	08 95       	ret

00005558 <H_LCD_void_sendData>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendData(u8 copy_u8data )
{
    5558:	df 93       	push	r29
    555a:	cf 93       	push	r28
    555c:	0f 92       	push	r0
    555e:	cd b7       	in	r28, 0x3d	; 61
    5560:	de b7       	in	r29, 0x3e	; 62
    5562:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_HIGH);
    5564:	8d e0       	ldi	r24, 0x0D	; 13
    5566:	61 e0       	ldi	r22, 0x01	; 1
    5568:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8data);
    556c:	89 81       	ldd	r24, Y+1	; 0x01
    556e:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <H_LCD_void_latchByte>

}
    5572:	0f 90       	pop	r0
    5574:	cf 91       	pop	r28
    5576:	df 91       	pop	r29
    5578:	08 95       	ret

0000557a <H_LCD_void_sendCommand>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendCommand(u8 copy_u8command)
{
    557a:	df 93       	push	r29
    557c:	cf 93       	push	r28
    557e:	0f 92       	push	r0
    5580:	cd b7       	in	r28, 0x3d	; 61
    5582:	de b7       	in	r29, 0x3e	; 62
    5584:	89 83       	std	Y+1, r24	; 0x01
	/*SET RS TO ZERO*/
	M_Dio_void_setPinValue(CLCD_RS_PIN,DIO_LOW);
    5586:	8d e0       	ldi	r24, 0x0D	; 13
    5588:	60 e0       	ldi	r22, 0x00	; 0
    558a:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
	/*Write command*/
	H_LCD_void_latchByte(copy_u8command);
    558e:	89 81       	ldd	r24, Y+1	; 0x01
    5590:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <H_LCD_void_latchByte>

}
    5594:	0f 90       	pop	r0
    5596:	cf 91       	pop	r28
    5598:	df 91       	pop	r29
    559a:	08 95       	ret

0000559c <H_LCD_void_sendString>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const char * pstr)
{
    559c:	df 93       	push	r29
    559e:	cf 93       	push	r28
    55a0:	00 d0       	rcall	.+0      	; 0x55a2 <H_LCD_void_sendString+0x6>
    55a2:	0f 92       	push	r0
    55a4:	cd b7       	in	r28, 0x3d	; 61
    55a6:	de b7       	in	r29, 0x3e	; 62
    55a8:	9b 83       	std	Y+3, r25	; 0x03
    55aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    55ac:	19 82       	std	Y+1, r1	; 0x01
    55ae:	0e c0       	rjmp	.+28     	; 0x55cc <H_LCD_void_sendString+0x30>
	{
		H_LCD_void_sendData(pstr[counter]);
    55b0:	89 81       	ldd	r24, Y+1	; 0x01
    55b2:	28 2f       	mov	r18, r24
    55b4:	30 e0       	ldi	r19, 0x00	; 0
    55b6:	8a 81       	ldd	r24, Y+2	; 0x02
    55b8:	9b 81       	ldd	r25, Y+3	; 0x03
    55ba:	fc 01       	movw	r30, r24
    55bc:	e2 0f       	add	r30, r18
    55be:	f3 1f       	adc	r31, r19
    55c0:	80 81       	ld	r24, Z
    55c2:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
  Return Value     : void
******************************************/
void H_LCD_void_sendString(const char * pstr)
{
	u8 counter;
	for(counter=0;pstr[counter]!=0;counter++)
    55c6:	89 81       	ldd	r24, Y+1	; 0x01
    55c8:	8f 5f       	subi	r24, 0xFF	; 255
    55ca:	89 83       	std	Y+1, r24	; 0x01
    55cc:	89 81       	ldd	r24, Y+1	; 0x01
    55ce:	28 2f       	mov	r18, r24
    55d0:	30 e0       	ldi	r19, 0x00	; 0
    55d2:	8a 81       	ldd	r24, Y+2	; 0x02
    55d4:	9b 81       	ldd	r25, Y+3	; 0x03
    55d6:	fc 01       	movw	r30, r24
    55d8:	e2 0f       	add	r30, r18
    55da:	f3 1f       	adc	r31, r19
    55dc:	80 81       	ld	r24, Z
    55de:	88 23       	and	r24, r24
    55e0:	39 f7       	brne	.-50     	; 0x55b0 <H_LCD_void_sendString+0x14>
	{
		H_LCD_void_sendData(pstr[counter]);
	}
}
    55e2:	0f 90       	pop	r0
    55e4:	0f 90       	pop	r0
    55e6:	0f 90       	pop	r0
    55e8:	cf 91       	pop	r28
    55ea:	df 91       	pop	r29
    55ec:	08 95       	ret

000055ee <H_LCD_void_sendIntNum>:
	//H_LCD_void_sendData(copy_s32Num+'0');

}
*/
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    55ee:	0f 93       	push	r16
    55f0:	1f 93       	push	r17
    55f2:	df 93       	push	r29
    55f4:	cf 93       	push	r28
    55f6:	cd b7       	in	r28, 0x3d	; 61
    55f8:	de b7       	in	r29, 0x3e	; 62
    55fa:	a5 97       	sbiw	r28, 0x25	; 37
    55fc:	0f b6       	in	r0, 0x3f	; 63
    55fe:	f8 94       	cli
    5600:	de bf       	out	0x3e, r29	; 62
    5602:	0f be       	out	0x3f, r0	; 63
    5604:	cd bf       	out	0x3d, r28	; 61
    5606:	6a a3       	std	Y+34, r22	; 0x22
    5608:	7b a3       	std	Y+35, r23	; 0x23
    560a:	8c a3       	std	Y+36, r24	; 0x24
    560c:	9d a3       	std	Y+37, r25	; 0x25
	/* Local Variable to save the numbers digits*/
	s32 Local_Variable[8] = {0} ;
    560e:	80 e2       	ldi	r24, 0x20	; 32
    5610:	fe 01       	movw	r30, r28
    5612:	32 96       	adiw	r30, 0x02	; 2
    5614:	df 01       	movw	r26, r30
    5616:	98 2f       	mov	r25, r24
    5618:	1d 92       	st	X+, r1
    561a:	9a 95       	dec	r25
    561c:	e9 f7       	brne	.-6      	; 0x5618 <H_LCD_void_sendIntNum+0x2a>
	u8 Local_Counter = 0 ;
    561e:	19 82       	std	Y+1, r1	; 0x01

	/* Check if the number is negative */
	if (copy_s32Num < 0)
    5620:	8a a1       	ldd	r24, Y+34	; 0x22
    5622:	9b a1       	ldd	r25, Y+35	; 0x23
    5624:	ac a1       	ldd	r26, Y+36	; 0x24
    5626:	bd a1       	ldd	r27, Y+37	; 0x25
    5628:	bb 23       	and	r27, r27
    562a:	0c f0       	brlt	.+2      	; 0x562e <H_LCD_void_sendIntNum+0x40>
    562c:	4a c0       	rjmp	.+148    	; 0x56c2 <H_LCD_void_sendIntNum+0xd4>
	{
	/*Remove Negative Sign from number*/
	copy_s32Num = copy_s32Num * -1 ;
    562e:	8a a1       	ldd	r24, Y+34	; 0x22
    5630:	9b a1       	ldd	r25, Y+35	; 0x23
    5632:	ac a1       	ldd	r26, Y+36	; 0x24
    5634:	bd a1       	ldd	r27, Y+37	; 0x25
    5636:	b0 95       	com	r27
    5638:	a0 95       	com	r26
    563a:	90 95       	com	r25
    563c:	81 95       	neg	r24
    563e:	9f 4f       	sbci	r25, 0xFF	; 255
    5640:	af 4f       	sbci	r26, 0xFF	; 255
    5642:	bf 4f       	sbci	r27, 0xFF	; 255
    5644:	8a a3       	std	Y+34, r24	; 0x22
    5646:	9b a3       	std	Y+35, r25	; 0x23
    5648:	ac a3       	std	Y+36, r26	; 0x24
    564a:	bd a3       	std	Y+37, r27	; 0x25
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
    564c:	8d e2       	ldi	r24, 0x2D	; 45
    564e:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
    5652:	37 c0       	rjmp	.+110    	; 0x56c2 <H_LCD_void_sendIntNum+0xd4>
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
	{
	Local_Variable[Local_Counter] = copy_s32Num % 10 ;
    5654:	89 81       	ldd	r24, Y+1	; 0x01
    5656:	08 2f       	mov	r16, r24
    5658:	10 e0       	ldi	r17, 0x00	; 0
    565a:	8a a1       	ldd	r24, Y+34	; 0x22
    565c:	9b a1       	ldd	r25, Y+35	; 0x23
    565e:	ac a1       	ldd	r26, Y+36	; 0x24
    5660:	bd a1       	ldd	r27, Y+37	; 0x25
    5662:	2a e0       	ldi	r18, 0x0A	; 10
    5664:	30 e0       	ldi	r19, 0x00	; 0
    5666:	40 e0       	ldi	r20, 0x00	; 0
    5668:	50 e0       	ldi	r21, 0x00	; 0
    566a:	bc 01       	movw	r22, r24
    566c:	cd 01       	movw	r24, r26
    566e:	0e 94 b9 45 	call	0x8b72	; 0x8b72 <__divmodsi4>
    5672:	dc 01       	movw	r26, r24
    5674:	cb 01       	movw	r24, r22
    5676:	ac 01       	movw	r20, r24
    5678:	bd 01       	movw	r22, r26
    567a:	98 01       	movw	r18, r16
    567c:	22 0f       	add	r18, r18
    567e:	33 1f       	adc	r19, r19
    5680:	22 0f       	add	r18, r18
    5682:	33 1f       	adc	r19, r19
    5684:	ce 01       	movw	r24, r28
    5686:	01 96       	adiw	r24, 0x01	; 1
    5688:	82 0f       	add	r24, r18
    568a:	93 1f       	adc	r25, r19
    568c:	fc 01       	movw	r30, r24
    568e:	31 96       	adiw	r30, 0x01	; 1
    5690:	40 83       	st	Z, r20
    5692:	51 83       	std	Z+1, r21	; 0x01
    5694:	62 83       	std	Z+2, r22	; 0x02
    5696:	73 83       	std	Z+3, r23	; 0x03
	copy_s32Num = copy_s32Num / 10 ;
    5698:	8a a1       	ldd	r24, Y+34	; 0x22
    569a:	9b a1       	ldd	r25, Y+35	; 0x23
    569c:	ac a1       	ldd	r26, Y+36	; 0x24
    569e:	bd a1       	ldd	r27, Y+37	; 0x25
    56a0:	2a e0       	ldi	r18, 0x0A	; 10
    56a2:	30 e0       	ldi	r19, 0x00	; 0
    56a4:	40 e0       	ldi	r20, 0x00	; 0
    56a6:	50 e0       	ldi	r21, 0x00	; 0
    56a8:	bc 01       	movw	r22, r24
    56aa:	cd 01       	movw	r24, r26
    56ac:	0e 94 b9 45 	call	0x8b72	; 0x8b72 <__divmodsi4>
    56b0:	da 01       	movw	r26, r20
    56b2:	c9 01       	movw	r24, r18
    56b4:	8a a3       	std	Y+34, r24	; 0x22
    56b6:	9b a3       	std	Y+35, r25	; 0x23
    56b8:	ac a3       	std	Y+36, r26	; 0x24
    56ba:	bd a3       	std	Y+37, r27	; 0x25
	Local_Counter ++ ;
    56bc:	89 81       	ldd	r24, Y+1	; 0x01
    56be:	8f 5f       	subi	r24, 0xFF	; 255
    56c0:	89 83       	std	Y+1, r24	; 0x01
	copy_s32Num = copy_s32Num * -1 ;
	/*Send Negative Sign */
	H_LCD_void_sendData('-');
	}
	/* While loop to split the Numbers and save it in Local_Variable*/
	while (copy_s32Num != 0)
    56c2:	8a a1       	ldd	r24, Y+34	; 0x22
    56c4:	9b a1       	ldd	r25, Y+35	; 0x23
    56c6:	ac a1       	ldd	r26, Y+36	; 0x24
    56c8:	bd a1       	ldd	r27, Y+37	; 0x25
    56ca:	00 97       	sbiw	r24, 0x00	; 0
    56cc:	a1 05       	cpc	r26, r1
    56ce:	b1 05       	cpc	r27, r1
    56d0:	09 f6       	brne	.-126    	; 0x5654 <H_LCD_void_sendIntNum+0x66>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    56d2:	89 81       	ldd	r24, Y+1	; 0x01
    56d4:	81 50       	subi	r24, 0x01	; 1
    56d6:	89 83       	std	Y+1, r24	; 0x01
    56d8:	18 c0       	rjmp	.+48     	; 0x570a <H_LCD_void_sendIntNum+0x11c>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
    56da:	89 81       	ldd	r24, Y+1	; 0x01
    56dc:	88 2f       	mov	r24, r24
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	9c 01       	movw	r18, r24
    56e2:	22 0f       	add	r18, r18
    56e4:	33 1f       	adc	r19, r19
    56e6:	22 0f       	add	r18, r18
    56e8:	33 1f       	adc	r19, r19
    56ea:	ce 01       	movw	r24, r28
    56ec:	01 96       	adiw	r24, 0x01	; 1
    56ee:	82 0f       	add	r24, r18
    56f0:	93 1f       	adc	r25, r19
    56f2:	fc 01       	movw	r30, r24
    56f4:	31 96       	adiw	r30, 0x01	; 1
    56f6:	80 81       	ld	r24, Z
    56f8:	91 81       	ldd	r25, Z+1	; 0x01
    56fa:	a2 81       	ldd	r26, Z+2	; 0x02
    56fc:	b3 81       	ldd	r27, Z+3	; 0x03
    56fe:	80 5d       	subi	r24, 0xD0	; 208
    5700:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
	copy_s32Num = copy_s32Num / 10 ;
	Local_Counter ++ ;

	}
	/* For loop to send the numbers using SendData*/
	for (Local_Counter --; Local_Counter < '0' ; Local_Counter--)
    5704:	89 81       	ldd	r24, Y+1	; 0x01
    5706:	81 50       	subi	r24, 0x01	; 1
    5708:	89 83       	std	Y+1, r24	; 0x01
    570a:	89 81       	ldd	r24, Y+1	; 0x01
    570c:	80 33       	cpi	r24, 0x30	; 48
    570e:	28 f3       	brcs	.-54     	; 0x56da <H_LCD_void_sendIntNum+0xec>
	{
		 H_LCD_void_sendData('0' + Local_Variable[Local_Counter]);
	}
}
    5710:	a5 96       	adiw	r28, 0x25	; 37
    5712:	0f b6       	in	r0, 0x3f	; 63
    5714:	f8 94       	cli
    5716:	de bf       	out	0x3e, r29	; 62
    5718:	0f be       	out	0x3f, r0	; 63
    571a:	cd bf       	out	0x3d, r28	; 61
    571c:	cf 91       	pop	r28
    571e:	df 91       	pop	r29
    5720:	1f 91       	pop	r17
    5722:	0f 91       	pop	r16
    5724:	08 95       	ret

00005726 <H_LCD_void_gotoXY>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_gotoXY(u8 copy_u8Row,u8 copy_u8Col)
{
    5726:	df 93       	push	r29
    5728:	cf 93       	push	r28
    572a:	00 d0       	rcall	.+0      	; 0x572c <H_LCD_void_gotoXY+0x6>
    572c:	0f 92       	push	r0
    572e:	cd b7       	in	r28, 0x3d	; 61
    5730:	de b7       	in	r29, 0x3e	; 62
    5732:	8a 83       	std	Y+2, r24	; 0x02
    5734:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(copy_u8Row == 1)
    5736:	8a 81       	ldd	r24, Y+2	; 0x02
    5738:	81 30       	cpi	r24, 0x01	; 1
    573a:	19 f4       	brne	.+6      	; 0x5742 <H_LCD_void_gotoXY+0x1c>
	{
		Local_u8Address = copy_u8Col;
    573c:	8b 81       	ldd	r24, Y+3	; 0x03
    573e:	89 83       	std	Y+1, r24	; 0x01
    5740:	14 c0       	rjmp	.+40     	; 0x576a <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 2)
    5742:	8a 81       	ldd	r24, Y+2	; 0x02
    5744:	82 30       	cpi	r24, 0x02	; 2
    5746:	21 f4       	brne	.+8      	; 0x5750 <H_LCD_void_gotoXY+0x2a>
	{
		Local_u8Address = copy_u8Col + 0x40;
    5748:	8b 81       	ldd	r24, Y+3	; 0x03
    574a:	80 5c       	subi	r24, 0xC0	; 192
    574c:	89 83       	std	Y+1, r24	; 0x01
    574e:	0d c0       	rjmp	.+26     	; 0x576a <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 3)
    5750:	8a 81       	ldd	r24, Y+2	; 0x02
    5752:	83 30       	cpi	r24, 0x03	; 3
    5754:	21 f4       	brne	.+8      	; 0x575e <H_LCD_void_gotoXY+0x38>
	{
		Local_u8Address = copy_u8Col + 0x14;
    5756:	8b 81       	ldd	r24, Y+3	; 0x03
    5758:	8c 5e       	subi	r24, 0xEC	; 236
    575a:	89 83       	std	Y+1, r24	; 0x01
    575c:	06 c0       	rjmp	.+12     	; 0x576a <H_LCD_void_gotoXY+0x44>
	}
	else if(copy_u8Row == 4)
    575e:	8a 81       	ldd	r24, Y+2	; 0x02
    5760:	84 30       	cpi	r24, 0x04	; 4
    5762:	19 f4       	brne	.+6      	; 0x576a <H_LCD_void_gotoXY+0x44>
	{
		Local_u8Address = copy_u8Col + 0x54;
    5764:	8b 81       	ldd	r24, Y+3	; 0x03
    5766:	8c 5a       	subi	r24, 0xAC	; 172
    5768:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	//128 Is added to the address to set the most significant bit by 1 according to DDRAM address instruction
	H_LCD_void_sendCommand(Local_u8Address+128);
    576a:	89 81       	ldd	r24, Y+1	; 0x01
    576c:	80 58       	subi	r24, 0x80	; 128
    576e:	0e 94 bd 2a 	call	0x557a	; 0x557a <H_LCD_void_sendCommand>
}
    5772:	0f 90       	pop	r0
    5774:	0f 90       	pop	r0
    5776:	0f 90       	pop	r0
    5778:	cf 91       	pop	r28
    577a:	df 91       	pop	r29
    577c:	08 95       	ret

0000577e <H_LCD_void_creatCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_creatCustomChar (const u8 * ArrPattern,u8 copy_u8charCode)
{
    577e:	df 93       	push	r29
    5780:	cf 93       	push	r28
    5782:	00 d0       	rcall	.+0      	; 0x5784 <H_LCD_void_creatCustomChar+0x6>
    5784:	00 d0       	rcall	.+0      	; 0x5786 <H_LCD_void_creatCustomChar+0x8>
    5786:	0f 92       	push	r0
    5788:	cd b7       	in	r28, 0x3d	; 61
    578a:	de b7       	in	r29, 0x3e	; 62
    578c:	9c 83       	std	Y+4, r25	; 0x04
    578e:	8b 83       	std	Y+3, r24	; 0x03
    5790:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_counter=0;
    5792:	1a 82       	std	Y+2, r1	; 0x02
	/*first calculate CGRAM address since each block of address is 8bytes*/
	u8 Local_u8CGramaddress=0;
    5794:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGramaddress = copy_u8charCode*8;
    5796:	8d 81       	ldd	r24, Y+5	; 0x05
    5798:	88 2f       	mov	r24, r24
    579a:	90 e0       	ldi	r25, 0x00	; 0
    579c:	88 0f       	add	r24, r24
    579e:	99 1f       	adc	r25, r25
    57a0:	88 0f       	add	r24, r24
    57a2:	99 1f       	adc	r25, r25
    57a4:	88 0f       	add	r24, r24
    57a6:	99 1f       	adc	r25, r25
    57a8:	89 83       	std	Y+1, r24	; 0x01
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
    57aa:	89 81       	ldd	r24, Y+1	; 0x01
    57ac:	80 5c       	subi	r24, 0xC0	; 192
    57ae:	0e 94 bd 2a 	call	0x557a	; 0x557a <H_LCD_void_sendCommand>
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    57b2:	1a 82       	std	Y+2, r1	; 0x02
    57b4:	0e c0       	rjmp	.+28     	; 0x57d2 <H_LCD_void_creatCustomChar+0x54>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
    57b6:	8a 81       	ldd	r24, Y+2	; 0x02
    57b8:	28 2f       	mov	r18, r24
    57ba:	30 e0       	ldi	r19, 0x00	; 0
    57bc:	8b 81       	ldd	r24, Y+3	; 0x03
    57be:	9c 81       	ldd	r25, Y+4	; 0x04
    57c0:	fc 01       	movw	r30, r24
    57c2:	e2 0f       	add	r30, r18
    57c4:	f3 1f       	adc	r31, r19
    57c6:	80 81       	ld	r24, Z
    57c8:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
	u8 Local_u8CGramaddress=0;
	Local_u8CGramaddress = copy_u8charCode*8;
	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	H_LCD_void_sendCommand(Local_u8CGramaddress+64);
	/*write the pattern to the CG ram */
	for(Local_counter=0;Local_counter<8;Local_counter++) /*<8 since there are 8 memory locations only for cgram (64bytes)*/
    57cc:	8a 81       	ldd	r24, Y+2	; 0x02
    57ce:	8f 5f       	subi	r24, 0xFF	; 255
    57d0:	8a 83       	std	Y+2, r24	; 0x02
    57d2:	8a 81       	ldd	r24, Y+2	; 0x02
    57d4:	88 30       	cpi	r24, 0x08	; 8
    57d6:	78 f3       	brcs	.-34     	; 0x57b6 <H_LCD_void_creatCustomChar+0x38>
	{
		H_LCD_void_sendData(ArrPattern[Local_counter]);
	}
	H_LCD_void_gotoXY(1,0);
    57d8:	81 e0       	ldi	r24, 0x01	; 1
    57da:	60 e0       	ldi	r22, 0x00	; 0
    57dc:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
	H_LCD_void_sendData(copy_u8charCode);
    57e0:	8d 81       	ldd	r24, Y+5	; 0x05
    57e2:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>

}
    57e6:	0f 90       	pop	r0
    57e8:	0f 90       	pop	r0
    57ea:	0f 90       	pop	r0
    57ec:	0f 90       	pop	r0
    57ee:	0f 90       	pop	r0
    57f0:	cf 91       	pop	r28
    57f2:	df 91       	pop	r29
    57f4:	08 95       	ret

000057f6 <H_LCD_void_displayCustomChar>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_displayCustomChar (u8 copy_u8charCode)
{
    57f6:	df 93       	push	r29
    57f8:	cf 93       	push	r28
    57fa:	0f 92       	push	r0
    57fc:	cd b7       	in	r28, 0x3d	; 61
    57fe:	de b7       	in	r29, 0x3e	; 62
    5800:	89 83       	std	Y+1, r24	; 0x01
	/*give the custom char number to send data*/
	H_LCD_void_sendData(copy_u8charCode);
    5802:	89 81       	ldd	r24, Y+1	; 0x01
    5804:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
}
    5808:	0f 90       	pop	r0
    580a:	cf 91       	pop	r28
    580c:	df 91       	pop	r29
    580e:	08 95       	ret

00005810 <H_LCD_void_ClearDisplay>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void H_LCD_void_ClearDisplay(void)
{
    5810:	df 93       	push	r29
    5812:	cf 93       	push	r28
    5814:	cd b7       	in	r28, 0x3d	; 61
    5816:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(CLCD_CLEAR);
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	0e 94 bd 2a 	call	0x557a	; 0x557a <H_LCD_void_sendCommand>
}
    581e:	cf 91       	pop	r28
    5820:	df 91       	pop	r29
    5822:	08 95       	ret

00005824 <H_BUZZER_Void_TurnOn>:
#include "Buzzer_Int.h"
#include "Buzzer_Types.h"
#include "Buzzer_Priv.h"

void H_BUZZER_Void_TurnOn(void)
{
    5824:	df 93       	push	r29
    5826:	cf 93       	push	r28
    5828:	cd b7       	in	r28, 0x3d	; 61
    582a:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinValue(BUZZER_1_PIN, DIO_HIGH);
    582c:	84 e2       	ldi	r24, 0x24	; 36
    582e:	61 e0       	ldi	r22, 0x01	; 1
    5830:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
}
    5834:	cf 91       	pop	r28
    5836:	df 91       	pop	r29
    5838:	08 95       	ret

0000583a <H_BUZZER_Void_TurnOff>:
void H_BUZZER_Void_TurnOff(void)
{
    583a:	df 93       	push	r29
    583c:	cf 93       	push	r28
    583e:	cd b7       	in	r28, 0x3d	; 61
    5840:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinValue(BUZZER_1_PIN, DIO_LOW);
    5842:	84 e2       	ldi	r24, 0x24	; 36
    5844:	60 e0       	ldi	r22, 0x00	; 0
    5846:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <M_Dio_void_setPinValue>
}
    584a:	cf 91       	pop	r28
    584c:	df 91       	pop	r29
    584e:	08 95       	ret

00005850 <APP_INIT>:
extern const Port_ConfigType PORT_Config_Arr[PORT_PINS_CONFIG_ARR_SIZE];
const u8 Global_IDs[2] = {1,2};
u8 Global_PasswordCounter = 0;
u8 Global_Flag = 0 ;
void APP_INIT()
{
    5850:	df 93       	push	r29
    5852:	cf 93       	push	r28
    5854:	cd b7       	in	r28, 0x3d	; 61
    5856:	de b7       	in	r29, 0x3e	; 62
    5858:	6c 97       	sbiw	r28, 0x1c	; 28
    585a:	0f b6       	in	r0, 0x3f	; 63
    585c:	f8 94       	cli
    585e:	de bf       	out	0x3e, r29	; 62
    5860:	0f be       	out	0x3f, r0	; 63
    5862:	cd bf       	out	0x3d, r28	; 61

	/***
	 * 	Initialize section
	 ****/
	Port_Init(PORT_Config_Arr);
    5864:	8b e2       	ldi	r24, 0x2B	; 43
    5866:	95 e0       	ldi	r25, 0x05	; 5
    5868:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Port_Init>
	H_LCD_void_Init();
    586c:	0e 94 33 28 	call	0x5066	; 0x5066 <H_LCD_void_Init>
	H_EEPROM_Void_Init();
    5870:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <H_EEPROM_Void_Init>
    5874:	80 e0       	ldi	r24, 0x00	; 0
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	a8 e4       	ldi	r26, 0x48	; 72
    587a:	b3 e4       	ldi	r27, 0x43	; 67
    587c:	89 8f       	std	Y+25, r24	; 0x19
    587e:	9a 8f       	std	Y+26, r25	; 0x1a
    5880:	ab 8f       	std	Y+27, r26	; 0x1b
    5882:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5884:	69 8d       	ldd	r22, Y+25	; 0x19
    5886:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5888:	8b 8d       	ldd	r24, Y+27	; 0x1b
    588a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    588c:	20 e0       	ldi	r18, 0x00	; 0
    588e:	30 e0       	ldi	r19, 0x00	; 0
    5890:	4a e7       	ldi	r20, 0x7A	; 122
    5892:	55 e4       	ldi	r21, 0x45	; 69
    5894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5898:	dc 01       	movw	r26, r24
    589a:	cb 01       	movw	r24, r22
    589c:	8d 8b       	std	Y+21, r24	; 0x15
    589e:	9e 8b       	std	Y+22, r25	; 0x16
    58a0:	af 8b       	std	Y+23, r26	; 0x17
    58a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    58a4:	6d 89       	ldd	r22, Y+21	; 0x15
    58a6:	7e 89       	ldd	r23, Y+22	; 0x16
    58a8:	8f 89       	ldd	r24, Y+23	; 0x17
    58aa:	98 8d       	ldd	r25, Y+24	; 0x18
    58ac:	20 e0       	ldi	r18, 0x00	; 0
    58ae:	30 e0       	ldi	r19, 0x00	; 0
    58b0:	40 e8       	ldi	r20, 0x80	; 128
    58b2:	5f e3       	ldi	r21, 0x3F	; 63
    58b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    58b8:	88 23       	and	r24, r24
    58ba:	2c f4       	brge	.+10     	; 0x58c6 <APP_INIT+0x76>
		__ticks = 1;
    58bc:	81 e0       	ldi	r24, 0x01	; 1
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	9c 8b       	std	Y+20, r25	; 0x14
    58c2:	8b 8b       	std	Y+19, r24	; 0x13
    58c4:	3f c0       	rjmp	.+126    	; 0x5944 <APP_INIT+0xf4>
	else if (__tmp > 65535)
    58c6:	6d 89       	ldd	r22, Y+21	; 0x15
    58c8:	7e 89       	ldd	r23, Y+22	; 0x16
    58ca:	8f 89       	ldd	r24, Y+23	; 0x17
    58cc:	98 8d       	ldd	r25, Y+24	; 0x18
    58ce:	20 e0       	ldi	r18, 0x00	; 0
    58d0:	3f ef       	ldi	r19, 0xFF	; 255
    58d2:	4f e7       	ldi	r20, 0x7F	; 127
    58d4:	57 e4       	ldi	r21, 0x47	; 71
    58d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    58da:	18 16       	cp	r1, r24
    58dc:	4c f5       	brge	.+82     	; 0x5930 <APP_INIT+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58de:	69 8d       	ldd	r22, Y+25	; 0x19
    58e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    58e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    58e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    58e6:	20 e0       	ldi	r18, 0x00	; 0
    58e8:	30 e0       	ldi	r19, 0x00	; 0
    58ea:	40 e2       	ldi	r20, 0x20	; 32
    58ec:	51 e4       	ldi	r21, 0x41	; 65
    58ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58f2:	dc 01       	movw	r26, r24
    58f4:	cb 01       	movw	r24, r22
    58f6:	bc 01       	movw	r22, r24
    58f8:	cd 01       	movw	r24, r26
    58fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58fe:	dc 01       	movw	r26, r24
    5900:	cb 01       	movw	r24, r22
    5902:	9c 8b       	std	Y+20, r25	; 0x14
    5904:	8b 8b       	std	Y+19, r24	; 0x13
    5906:	0f c0       	rjmp	.+30     	; 0x5926 <APP_INIT+0xd6>
    5908:	80 e9       	ldi	r24, 0x90	; 144
    590a:	91 e0       	ldi	r25, 0x01	; 1
    590c:	9a 8b       	std	Y+18, r25	; 0x12
    590e:	89 8b       	std	Y+17, r24	; 0x11
    5910:	89 89       	ldd	r24, Y+17	; 0x11
    5912:	9a 89       	ldd	r25, Y+18	; 0x12
    5914:	01 97       	sbiw	r24, 0x01	; 1
    5916:	f1 f7       	brne	.-4      	; 0x5914 <APP_INIT+0xc4>
    5918:	9a 8b       	std	Y+18, r25	; 0x12
    591a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    591c:	8b 89       	ldd	r24, Y+19	; 0x13
    591e:	9c 89       	ldd	r25, Y+20	; 0x14
    5920:	01 97       	sbiw	r24, 0x01	; 1
    5922:	9c 8b       	std	Y+20, r25	; 0x14
    5924:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5926:	8b 89       	ldd	r24, Y+19	; 0x13
    5928:	9c 89       	ldd	r25, Y+20	; 0x14
    592a:	00 97       	sbiw	r24, 0x00	; 0
    592c:	69 f7       	brne	.-38     	; 0x5908 <APP_INIT+0xb8>
    592e:	14 c0       	rjmp	.+40     	; 0x5958 <APP_INIT+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5930:	6d 89       	ldd	r22, Y+21	; 0x15
    5932:	7e 89       	ldd	r23, Y+22	; 0x16
    5934:	8f 89       	ldd	r24, Y+23	; 0x17
    5936:	98 8d       	ldd	r25, Y+24	; 0x18
    5938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    593c:	dc 01       	movw	r26, r24
    593e:	cb 01       	movw	r24, r22
    5940:	9c 8b       	std	Y+20, r25	; 0x14
    5942:	8b 8b       	std	Y+19, r24	; 0x13
    5944:	8b 89       	ldd	r24, Y+19	; 0x13
    5946:	9c 89       	ldd	r25, Y+20	; 0x14
    5948:	98 8b       	std	Y+16, r25	; 0x10
    594a:	8f 87       	std	Y+15, r24	; 0x0f
    594c:	8f 85       	ldd	r24, Y+15	; 0x0f
    594e:	98 89       	ldd	r25, Y+16	; 0x10
    5950:	01 97       	sbiw	r24, 0x01	; 1
    5952:	f1 f7       	brne	.-4      	; 0x5950 <APP_INIT+0x100>
    5954:	98 8b       	std	Y+16, r25	; 0x10
    5956:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	H_RTC_Void_Init();
    5958:	0e 94 18 12 	call	0x2430	; 0x2430 <H_RTC_Void_Init>
    595c:	80 e0       	ldi	r24, 0x00	; 0
    595e:	90 e0       	ldi	r25, 0x00	; 0
    5960:	a8 e4       	ldi	r26, 0x48	; 72
    5962:	b3 e4       	ldi	r27, 0x43	; 67
    5964:	8b 87       	std	Y+11, r24	; 0x0b
    5966:	9c 87       	std	Y+12, r25	; 0x0c
    5968:	ad 87       	std	Y+13, r26	; 0x0d
    596a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    596c:	6b 85       	ldd	r22, Y+11	; 0x0b
    596e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5970:	8d 85       	ldd	r24, Y+13	; 0x0d
    5972:	9e 85       	ldd	r25, Y+14	; 0x0e
    5974:	20 e0       	ldi	r18, 0x00	; 0
    5976:	30 e0       	ldi	r19, 0x00	; 0
    5978:	4a e7       	ldi	r20, 0x7A	; 122
    597a:	55 e4       	ldi	r21, 0x45	; 69
    597c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5980:	dc 01       	movw	r26, r24
    5982:	cb 01       	movw	r24, r22
    5984:	8f 83       	std	Y+7, r24	; 0x07
    5986:	98 87       	std	Y+8, r25	; 0x08
    5988:	a9 87       	std	Y+9, r26	; 0x09
    598a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    598c:	6f 81       	ldd	r22, Y+7	; 0x07
    598e:	78 85       	ldd	r23, Y+8	; 0x08
    5990:	89 85       	ldd	r24, Y+9	; 0x09
    5992:	9a 85       	ldd	r25, Y+10	; 0x0a
    5994:	20 e0       	ldi	r18, 0x00	; 0
    5996:	30 e0       	ldi	r19, 0x00	; 0
    5998:	40 e8       	ldi	r20, 0x80	; 128
    599a:	5f e3       	ldi	r21, 0x3F	; 63
    599c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59a0:	88 23       	and	r24, r24
    59a2:	2c f4       	brge	.+10     	; 0x59ae <APP_INIT+0x15e>
		__ticks = 1;
    59a4:	81 e0       	ldi	r24, 0x01	; 1
    59a6:	90 e0       	ldi	r25, 0x00	; 0
    59a8:	9e 83       	std	Y+6, r25	; 0x06
    59aa:	8d 83       	std	Y+5, r24	; 0x05
    59ac:	3f c0       	rjmp	.+126    	; 0x5a2c <APP_INIT+0x1dc>
	else if (__tmp > 65535)
    59ae:	6f 81       	ldd	r22, Y+7	; 0x07
    59b0:	78 85       	ldd	r23, Y+8	; 0x08
    59b2:	89 85       	ldd	r24, Y+9	; 0x09
    59b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    59b6:	20 e0       	ldi	r18, 0x00	; 0
    59b8:	3f ef       	ldi	r19, 0xFF	; 255
    59ba:	4f e7       	ldi	r20, 0x7F	; 127
    59bc:	57 e4       	ldi	r21, 0x47	; 71
    59be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59c2:	18 16       	cp	r1, r24
    59c4:	4c f5       	brge	.+82     	; 0x5a18 <APP_INIT+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    59c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    59ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    59cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    59ce:	20 e0       	ldi	r18, 0x00	; 0
    59d0:	30 e0       	ldi	r19, 0x00	; 0
    59d2:	40 e2       	ldi	r20, 0x20	; 32
    59d4:	51 e4       	ldi	r21, 0x41	; 65
    59d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59da:	dc 01       	movw	r26, r24
    59dc:	cb 01       	movw	r24, r22
    59de:	bc 01       	movw	r22, r24
    59e0:	cd 01       	movw	r24, r26
    59e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59e6:	dc 01       	movw	r26, r24
    59e8:	cb 01       	movw	r24, r22
    59ea:	9e 83       	std	Y+6, r25	; 0x06
    59ec:	8d 83       	std	Y+5, r24	; 0x05
    59ee:	0f c0       	rjmp	.+30     	; 0x5a0e <APP_INIT+0x1be>
    59f0:	80 e9       	ldi	r24, 0x90	; 144
    59f2:	91 e0       	ldi	r25, 0x01	; 1
    59f4:	9c 83       	std	Y+4, r25	; 0x04
    59f6:	8b 83       	std	Y+3, r24	; 0x03
    59f8:	8b 81       	ldd	r24, Y+3	; 0x03
    59fa:	9c 81       	ldd	r25, Y+4	; 0x04
    59fc:	01 97       	sbiw	r24, 0x01	; 1
    59fe:	f1 f7       	brne	.-4      	; 0x59fc <APP_INIT+0x1ac>
    5a00:	9c 83       	std	Y+4, r25	; 0x04
    5a02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a04:	8d 81       	ldd	r24, Y+5	; 0x05
    5a06:	9e 81       	ldd	r25, Y+6	; 0x06
    5a08:	01 97       	sbiw	r24, 0x01	; 1
    5a0a:	9e 83       	std	Y+6, r25	; 0x06
    5a0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a10:	9e 81       	ldd	r25, Y+6	; 0x06
    5a12:	00 97       	sbiw	r24, 0x00	; 0
    5a14:	69 f7       	brne	.-38     	; 0x59f0 <APP_INIT+0x1a0>
    5a16:	14 c0       	rjmp	.+40     	; 0x5a40 <APP_INIT+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a18:	6f 81       	ldd	r22, Y+7	; 0x07
    5a1a:	78 85       	ldd	r23, Y+8	; 0x08
    5a1c:	89 85       	ldd	r24, Y+9	; 0x09
    5a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a24:	dc 01       	movw	r26, r24
    5a26:	cb 01       	movw	r24, r22
    5a28:	9e 83       	std	Y+6, r25	; 0x06
    5a2a:	8d 83       	std	Y+5, r24	; 0x05
    5a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    5a30:	9a 83       	std	Y+2, r25	; 0x02
    5a32:	89 83       	std	Y+1, r24	; 0x01
    5a34:	89 81       	ldd	r24, Y+1	; 0x01
    5a36:	9a 81       	ldd	r25, Y+2	; 0x02
    5a38:	01 97       	sbiw	r24, 0x01	; 1
    5a3a:	f1 f7       	brne	.-4      	; 0x5a38 <APP_INIT+0x1e8>
    5a3c:	9a 83       	std	Y+2, r25	; 0x02
    5a3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	Finger_Print_Init();
    5a40:	0e 94 82 14 	call	0x2904	; 0x2904 <Finger_Print_Init>
	M_TIMER0_Void_Init(NORMAL_MODE, WG_NORMAL_PORT);
    5a44:	80 e0       	ldi	r24, 0x00	; 0
    5a46:	60 e0       	ldi	r22, 0x00	; 0
    5a48:	0e 94 a0 09 	call	0x1340	; 0x1340 <M_TIMER0_Void_Init>
	M_TIMER0_setCallBack(OVRER_FLOW, Close_System);
    5a4c:	20 ec       	ldi	r18, 0xC0	; 192
    5a4e:	3f e2       	ldi	r19, 0x2F	; 47
    5a50:	81 e0       	ldi	r24, 0x01	; 1
    5a52:	b9 01       	movw	r22, r18
    5a54:	0e 94 07 0c 	call	0x180e	; 0x180e <M_TIMER0_setCallBack>
	M_TIMER0_EnableInt(OVRER_FLOW);
    5a58:	81 e0       	ldi	r24, 0x01	; 1
    5a5a:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <M_TIMER0_EnableInt>
}
    5a5e:	6c 96       	adiw	r28, 0x1c	; 28
    5a60:	0f b6       	in	r0, 0x3f	; 63
    5a62:	f8 94       	cli
    5a64:	de bf       	out	0x3e, r29	; 62
    5a66:	0f be       	out	0x3f, r0	; 63
    5a68:	cd bf       	out	0x3d, r28	; 61
    5a6a:	cf 91       	pop	r28
    5a6c:	df 91       	pop	r29
    5a6e:	08 95       	ret

00005a70 <APP_Start>:
 *  Start of Algorithm
 */


void APP_Start()
{
    5a70:	df 93       	push	r29
    5a72:	cf 93       	push	r28
    5a74:	cd b7       	in	r28, 0x3d	; 61
    5a76:	de b7       	in	r29, 0x3e	; 62
    5a78:	ed 97       	sbiw	r28, 0x3d	; 61
    5a7a:	0f b6       	in	r0, 0x3f	; 63
    5a7c:	f8 94       	cli
    5a7e:	de bf       	out	0x3e, r29	; 62
    5a80:	0f be       	out	0x3f, r0	; 63
    5a82:	cd bf       	out	0x3d, r28	; 61
 	u8 KeyPad_Value = 0 ;
    5a84:	1b ae       	std	Y+59, r1	; 0x3b
	u8 User_Status = 0 ;
    5a86:	1a ae       	std	Y+58, r1	; 0x3a
	u8 Temp_Holder = 0 ;
    5a88:	19 ae       	std	Y+57, r1	; 0x39
	/*
	 * Starting Display
	 */
	H_LCD_void_ClearDisplay();
    5a8a:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
	APP_WelcomeDisplay();
    5a8e:	0e 94 90 40 	call	0x8120	; 0x8120 <APP_WelcomeDisplay>
	H_LCD_void_gotoXY(2, 0);
    5a92:	82 e0       	ldi	r24, 0x02	; 2
    5a94:	60 e0       	ldi	r22, 0x00	; 0
    5a96:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Chose Option:");
    5a9a:	81 ec       	ldi	r24, 0xC1	; 193
    5a9c:	91 e0       	ldi	r25, 0x01	; 1
    5a9e:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
	H_LCD_void_gotoXY(3, 0);
    5aa2:	83 e0       	ldi	r24, 0x03	; 3
    5aa4:	60 e0       	ldi	r22, 0x00	; 0
    5aa6:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("1-SignIn | 2-SingUp");
    5aaa:	8f ec       	ldi	r24, 0xCF	; 207
    5aac:	91 e0       	ldi	r25, 0x01	; 1
    5aae:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
	H_LCD_void_gotoXY(4, 0);
    5ab2:	84 e0       	ldi	r24, 0x04	; 4
    5ab4:	60 e0       	ldi	r22, 0x00	; 0
    5ab6:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("3-Rest All Pass");
    5aba:	83 ee       	ldi	r24, 0xE3	; 227
    5abc:	91 e0       	ldi	r25, 0x01	; 1
    5abe:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
	/*
	 * Chose option
	 */
	do{
		KeyPad_Value = H_KEYPAD_u8_getPressedKey();
    5ac2:	0e 94 9d 13 	call	0x273a	; 0x273a <H_KEYPAD_u8_getPressedKey>
    5ac6:	8b af       	std	Y+59, r24	; 0x3b
	  }while(KeyPad_Value == NO_PRESSED_KEY);
    5ac8:	8b ad       	ldd	r24, Y+59	; 0x3b
    5aca:	88 23       	and	r24, r24
    5acc:	d1 f3       	breq	.-12     	; 0x5ac2 <APP_Start+0x52>

	/* Check the options*/
		switch(KeyPad_Value)
    5ace:	8b ad       	ldd	r24, Y+59	; 0x3b
    5ad0:	28 2f       	mov	r18, r24
    5ad2:	30 e0       	ldi	r19, 0x00	; 0
    5ad4:	3d af       	std	Y+61, r19	; 0x3d
    5ad6:	2c af       	std	Y+60, r18	; 0x3c
    5ad8:	8c ad       	ldd	r24, Y+60	; 0x3c
    5ada:	9d ad       	ldd	r25, Y+61	; 0x3d
    5adc:	82 33       	cpi	r24, 0x32	; 50
    5ade:	91 05       	cpc	r25, r1
    5ae0:	59 f0       	breq	.+22     	; 0x5af8 <APP_Start+0x88>
    5ae2:	2c ad       	ldd	r18, Y+60	; 0x3c
    5ae4:	3d ad       	ldd	r19, Y+61	; 0x3d
    5ae6:	23 33       	cpi	r18, 0x33	; 51
    5ae8:	31 05       	cpc	r19, r1
    5aea:	79 f0       	breq	.+30     	; 0x5b0a <APP_Start+0x9a>
    5aec:	8c ad       	ldd	r24, Y+60	; 0x3c
    5aee:	9d ad       	ldd	r25, Y+61	; 0x3d
    5af0:	81 33       	cpi	r24, 0x31	; 49
    5af2:	91 05       	cpc	r25, r1
    5af4:	31 f0       	breq	.+12     	; 0x5b02 <APP_Start+0x92>
    5af6:	83 c0       	rjmp	.+262    	; 0x5bfe <APP_Start+0x18e>
		{
		case USER_SIGN_UP:	User_Status = 2 ;User_Authentication_SignUp(); break;
    5af8:	82 e0       	ldi	r24, 0x02	; 2
    5afa:	8a af       	std	Y+58, r24	; 0x3a
    5afc:	0e 94 ca 41 	call	0x8394	; 0x8394 <User_Authentication_SignUp>
    5b00:	80 c0       	rjmp	.+256    	; 0x5c02 <APP_Start+0x192>
		case USER_SIGN_IN:	User_Status = User_Authentication_SignIn(); break;
    5b02:	0e 94 9f 40 	call	0x813e	; 0x813e <User_Authentication_SignIn>
    5b06:	8a af       	std	Y+58, r24	; 0x3a
    5b08:	7c c0       	rjmp	.+248    	; 0x5c02 <APP_Start+0x192>
		case USER_REST_ID:  User_Status = '3'; H_EEPROM_Void_WriteByte(EEPROM_USER_ID, 1); _delay_ms(200); break;
    5b0a:	83 e3       	ldi	r24, 0x33	; 51
    5b0c:	8a af       	std	Y+58, r24	; 0x3a
    5b0e:	8f ef       	ldi	r24, 0xFF	; 255
    5b10:	90 e0       	ldi	r25, 0x00	; 0
    5b12:	61 e0       	ldi	r22, 0x01	; 1
    5b14:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <H_EEPROM_Void_WriteByte>
    5b18:	80 e0       	ldi	r24, 0x00	; 0
    5b1a:	90 e0       	ldi	r25, 0x00	; 0
    5b1c:	a8 e4       	ldi	r26, 0x48	; 72
    5b1e:	b3 e4       	ldi	r27, 0x43	; 67
    5b20:	8d ab       	std	Y+53, r24	; 0x35
    5b22:	9e ab       	std	Y+54, r25	; 0x36
    5b24:	af ab       	std	Y+55, r26	; 0x37
    5b26:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b28:	6d a9       	ldd	r22, Y+53	; 0x35
    5b2a:	7e a9       	ldd	r23, Y+54	; 0x36
    5b2c:	8f a9       	ldd	r24, Y+55	; 0x37
    5b2e:	98 ad       	ldd	r25, Y+56	; 0x38
    5b30:	20 e0       	ldi	r18, 0x00	; 0
    5b32:	30 e0       	ldi	r19, 0x00	; 0
    5b34:	4a e7       	ldi	r20, 0x7A	; 122
    5b36:	55 e4       	ldi	r21, 0x45	; 69
    5b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b3c:	dc 01       	movw	r26, r24
    5b3e:	cb 01       	movw	r24, r22
    5b40:	89 ab       	std	Y+49, r24	; 0x31
    5b42:	9a ab       	std	Y+50, r25	; 0x32
    5b44:	ab ab       	std	Y+51, r26	; 0x33
    5b46:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5b48:	69 a9       	ldd	r22, Y+49	; 0x31
    5b4a:	7a a9       	ldd	r23, Y+50	; 0x32
    5b4c:	8b a9       	ldd	r24, Y+51	; 0x33
    5b4e:	9c a9       	ldd	r25, Y+52	; 0x34
    5b50:	20 e0       	ldi	r18, 0x00	; 0
    5b52:	30 e0       	ldi	r19, 0x00	; 0
    5b54:	40 e8       	ldi	r20, 0x80	; 128
    5b56:	5f e3       	ldi	r21, 0x3F	; 63
    5b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b5c:	88 23       	and	r24, r24
    5b5e:	2c f4       	brge	.+10     	; 0x5b6a <APP_Start+0xfa>
		__ticks = 1;
    5b60:	81 e0       	ldi	r24, 0x01	; 1
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	98 ab       	std	Y+48, r25	; 0x30
    5b66:	8f a7       	std	Y+47, r24	; 0x2f
    5b68:	3f c0       	rjmp	.+126    	; 0x5be8 <APP_Start+0x178>
	else if (__tmp > 65535)
    5b6a:	69 a9       	ldd	r22, Y+49	; 0x31
    5b6c:	7a a9       	ldd	r23, Y+50	; 0x32
    5b6e:	8b a9       	ldd	r24, Y+51	; 0x33
    5b70:	9c a9       	ldd	r25, Y+52	; 0x34
    5b72:	20 e0       	ldi	r18, 0x00	; 0
    5b74:	3f ef       	ldi	r19, 0xFF	; 255
    5b76:	4f e7       	ldi	r20, 0x7F	; 127
    5b78:	57 e4       	ldi	r21, 0x47	; 71
    5b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b7e:	18 16       	cp	r1, r24
    5b80:	4c f5       	brge	.+82     	; 0x5bd4 <APP_Start+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b82:	6d a9       	ldd	r22, Y+53	; 0x35
    5b84:	7e a9       	ldd	r23, Y+54	; 0x36
    5b86:	8f a9       	ldd	r24, Y+55	; 0x37
    5b88:	98 ad       	ldd	r25, Y+56	; 0x38
    5b8a:	20 e0       	ldi	r18, 0x00	; 0
    5b8c:	30 e0       	ldi	r19, 0x00	; 0
    5b8e:	40 e2       	ldi	r20, 0x20	; 32
    5b90:	51 e4       	ldi	r21, 0x41	; 65
    5b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b96:	dc 01       	movw	r26, r24
    5b98:	cb 01       	movw	r24, r22
    5b9a:	bc 01       	movw	r22, r24
    5b9c:	cd 01       	movw	r24, r26
    5b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ba2:	dc 01       	movw	r26, r24
    5ba4:	cb 01       	movw	r24, r22
    5ba6:	98 ab       	std	Y+48, r25	; 0x30
    5ba8:	8f a7       	std	Y+47, r24	; 0x2f
    5baa:	0f c0       	rjmp	.+30     	; 0x5bca <APP_Start+0x15a>
    5bac:	80 e9       	ldi	r24, 0x90	; 144
    5bae:	91 e0       	ldi	r25, 0x01	; 1
    5bb0:	9e a7       	std	Y+46, r25	; 0x2e
    5bb2:	8d a7       	std	Y+45, r24	; 0x2d
    5bb4:	8d a5       	ldd	r24, Y+45	; 0x2d
    5bb6:	9e a5       	ldd	r25, Y+46	; 0x2e
    5bb8:	01 97       	sbiw	r24, 0x01	; 1
    5bba:	f1 f7       	brne	.-4      	; 0x5bb8 <APP_Start+0x148>
    5bbc:	9e a7       	std	Y+46, r25	; 0x2e
    5bbe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bc2:	98 a9       	ldd	r25, Y+48	; 0x30
    5bc4:	01 97       	sbiw	r24, 0x01	; 1
    5bc6:	98 ab       	std	Y+48, r25	; 0x30
    5bc8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bca:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bcc:	98 a9       	ldd	r25, Y+48	; 0x30
    5bce:	00 97       	sbiw	r24, 0x00	; 0
    5bd0:	69 f7       	brne	.-38     	; 0x5bac <APP_Start+0x13c>
    5bd2:	17 c0       	rjmp	.+46     	; 0x5c02 <APP_Start+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bd4:	69 a9       	ldd	r22, Y+49	; 0x31
    5bd6:	7a a9       	ldd	r23, Y+50	; 0x32
    5bd8:	8b a9       	ldd	r24, Y+51	; 0x33
    5bda:	9c a9       	ldd	r25, Y+52	; 0x34
    5bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5be0:	dc 01       	movw	r26, r24
    5be2:	cb 01       	movw	r24, r22
    5be4:	98 ab       	std	Y+48, r25	; 0x30
    5be6:	8f a7       	std	Y+47, r24	; 0x2f
    5be8:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bea:	98 a9       	ldd	r25, Y+48	; 0x30
    5bec:	9c a7       	std	Y+44, r25	; 0x2c
    5bee:	8b a7       	std	Y+43, r24	; 0x2b
    5bf0:	8b a5       	ldd	r24, Y+43	; 0x2b
    5bf2:	9c a5       	ldd	r25, Y+44	; 0x2c
    5bf4:	01 97       	sbiw	r24, 0x01	; 1
    5bf6:	f1 f7       	brne	.-4      	; 0x5bf4 <APP_Start+0x184>
    5bf8:	9c a7       	std	Y+44, r25	; 0x2c
    5bfa:	8b a7       	std	Y+43, r24	; 0x2b
    5bfc:	02 c0       	rjmp	.+4      	; 0x5c02 <APP_Start+0x192>
		default: User_Status = OUT_OF_RANGE;
    5bfe:	84 e6       	ldi	r24, 0x64	; 100
    5c00:	8a af       	std	Y+58, r24	; 0x3a
		}

	/*
	 * in case of valid Login
	 */
		H_LCD_void_ClearDisplay();
    5c02:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
	if (User_Status == VALID_LOGIN)
    5c06:	8a ad       	ldd	r24, Y+58	; 0x3a
    5c08:	81 30       	cpi	r24, 0x01	; 1
    5c0a:	39 f4       	brne	.+14     	; 0x5c1a <APP_Start+0x1aa>
	{
		H_LCD_void_sendString("VALID_LOGIN");
    5c0c:	83 ef       	ldi	r24, 0xF3	; 243
    5c0e:	91 e0       	ldi	r25, 0x01	; 1
    5c10:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
		Successful_Authentication();
    5c14:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <Successful_Authentication>
    5c18:	aa c1       	rjmp	.+852    	; 0x5f6e <APP_Start+0x4fe>
	}
	else if (User_Status == INVALID_LOGIN)
    5c1a:	8a ad       	ldd	r24, Y+58	; 0x3a
    5c1c:	88 23       	and	r24, r24
    5c1e:	09 f0       	breq	.+2      	; 0x5c22 <APP_Start+0x1b2>
    5c20:	2a c1       	rjmp	.+596    	; 0x5e76 <APP_Start+0x406>
	{
		/* Loop to re-enter data */
		do
		{
		H_LCD_void_sendString("Invalid Login");
    5c22:	8f ef       	ldi	r24, 0xFF	; 255
    5c24:	91 e0       	ldi	r25, 0x01	; 1
    5c26:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
		H_LCD_void_gotoXY(2, 0);
    5c2a:	82 e0       	ldi	r24, 0x02	; 2
    5c2c:	60 e0       	ldi	r22, 0x00	; 0
    5c2e:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
		H_LCD_void_sendString("Re-enter ur data");
    5c32:	8d e0       	ldi	r24, 0x0D	; 13
    5c34:	92 e0       	ldi	r25, 0x02	; 2
    5c36:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    5c3a:	80 e0       	ldi	r24, 0x00	; 0
    5c3c:	90 e0       	ldi	r25, 0x00	; 0
    5c3e:	aa e7       	ldi	r26, 0x7A	; 122
    5c40:	b4 e4       	ldi	r27, 0x44	; 68
    5c42:	8f a3       	std	Y+39, r24	; 0x27
    5c44:	98 a7       	std	Y+40, r25	; 0x28
    5c46:	a9 a7       	std	Y+41, r26	; 0x29
    5c48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c4a:	6f a1       	ldd	r22, Y+39	; 0x27
    5c4c:	78 a5       	ldd	r23, Y+40	; 0x28
    5c4e:	89 a5       	ldd	r24, Y+41	; 0x29
    5c50:	9a a5       	ldd	r25, Y+42	; 0x2a
    5c52:	20 e0       	ldi	r18, 0x00	; 0
    5c54:	30 e0       	ldi	r19, 0x00	; 0
    5c56:	4a e7       	ldi	r20, 0x7A	; 122
    5c58:	55 e4       	ldi	r21, 0x45	; 69
    5c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c5e:	dc 01       	movw	r26, r24
    5c60:	cb 01       	movw	r24, r22
    5c62:	8b a3       	std	Y+35, r24	; 0x23
    5c64:	9c a3       	std	Y+36, r25	; 0x24
    5c66:	ad a3       	std	Y+37, r26	; 0x25
    5c68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5c6a:	6b a1       	ldd	r22, Y+35	; 0x23
    5c6c:	7c a1       	ldd	r23, Y+36	; 0x24
    5c6e:	8d a1       	ldd	r24, Y+37	; 0x25
    5c70:	9e a1       	ldd	r25, Y+38	; 0x26
    5c72:	20 e0       	ldi	r18, 0x00	; 0
    5c74:	30 e0       	ldi	r19, 0x00	; 0
    5c76:	40 e8       	ldi	r20, 0x80	; 128
    5c78:	5f e3       	ldi	r21, 0x3F	; 63
    5c7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c7e:	88 23       	and	r24, r24
    5c80:	2c f4       	brge	.+10     	; 0x5c8c <APP_Start+0x21c>
		__ticks = 1;
    5c82:	81 e0       	ldi	r24, 0x01	; 1
    5c84:	90 e0       	ldi	r25, 0x00	; 0
    5c86:	9a a3       	std	Y+34, r25	; 0x22
    5c88:	89 a3       	std	Y+33, r24	; 0x21
    5c8a:	3f c0       	rjmp	.+126    	; 0x5d0a <APP_Start+0x29a>
	else if (__tmp > 65535)
    5c8c:	6b a1       	ldd	r22, Y+35	; 0x23
    5c8e:	7c a1       	ldd	r23, Y+36	; 0x24
    5c90:	8d a1       	ldd	r24, Y+37	; 0x25
    5c92:	9e a1       	ldd	r25, Y+38	; 0x26
    5c94:	20 e0       	ldi	r18, 0x00	; 0
    5c96:	3f ef       	ldi	r19, 0xFF	; 255
    5c98:	4f e7       	ldi	r20, 0x7F	; 127
    5c9a:	57 e4       	ldi	r21, 0x47	; 71
    5c9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ca0:	18 16       	cp	r1, r24
    5ca2:	4c f5       	brge	.+82     	; 0x5cf6 <APP_Start+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ca4:	6f a1       	ldd	r22, Y+39	; 0x27
    5ca6:	78 a5       	ldd	r23, Y+40	; 0x28
    5ca8:	89 a5       	ldd	r24, Y+41	; 0x29
    5caa:	9a a5       	ldd	r25, Y+42	; 0x2a
    5cac:	20 e0       	ldi	r18, 0x00	; 0
    5cae:	30 e0       	ldi	r19, 0x00	; 0
    5cb0:	40 e2       	ldi	r20, 0x20	; 32
    5cb2:	51 e4       	ldi	r21, 0x41	; 65
    5cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cb8:	dc 01       	movw	r26, r24
    5cba:	cb 01       	movw	r24, r22
    5cbc:	bc 01       	movw	r22, r24
    5cbe:	cd 01       	movw	r24, r26
    5cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cc4:	dc 01       	movw	r26, r24
    5cc6:	cb 01       	movw	r24, r22
    5cc8:	9a a3       	std	Y+34, r25	; 0x22
    5cca:	89 a3       	std	Y+33, r24	; 0x21
    5ccc:	0f c0       	rjmp	.+30     	; 0x5cec <APP_Start+0x27c>
    5cce:	80 e9       	ldi	r24, 0x90	; 144
    5cd0:	91 e0       	ldi	r25, 0x01	; 1
    5cd2:	98 a3       	std	Y+32, r25	; 0x20
    5cd4:	8f 8f       	std	Y+31, r24	; 0x1f
    5cd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5cd8:	98 a1       	ldd	r25, Y+32	; 0x20
    5cda:	01 97       	sbiw	r24, 0x01	; 1
    5cdc:	f1 f7       	brne	.-4      	; 0x5cda <APP_Start+0x26a>
    5cde:	98 a3       	std	Y+32, r25	; 0x20
    5ce0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    5ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    5ce6:	01 97       	sbiw	r24, 0x01	; 1
    5ce8:	9a a3       	std	Y+34, r25	; 0x22
    5cea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cec:	89 a1       	ldd	r24, Y+33	; 0x21
    5cee:	9a a1       	ldd	r25, Y+34	; 0x22
    5cf0:	00 97       	sbiw	r24, 0x00	; 0
    5cf2:	69 f7       	brne	.-38     	; 0x5cce <APP_Start+0x25e>
    5cf4:	14 c0       	rjmp	.+40     	; 0x5d1e <APP_Start+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cf6:	6b a1       	ldd	r22, Y+35	; 0x23
    5cf8:	7c a1       	ldd	r23, Y+36	; 0x24
    5cfa:	8d a1       	ldd	r24, Y+37	; 0x25
    5cfc:	9e a1       	ldd	r25, Y+38	; 0x26
    5cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d02:	dc 01       	movw	r26, r24
    5d04:	cb 01       	movw	r24, r22
    5d06:	9a a3       	std	Y+34, r25	; 0x22
    5d08:	89 a3       	std	Y+33, r24	; 0x21
    5d0a:	89 a1       	ldd	r24, Y+33	; 0x21
    5d0c:	9a a1       	ldd	r25, Y+34	; 0x22
    5d0e:	9e 8f       	std	Y+30, r25	; 0x1e
    5d10:	8d 8f       	std	Y+29, r24	; 0x1d
    5d12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5d14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5d16:	01 97       	sbiw	r24, 0x01	; 1
    5d18:	f1 f7       	brne	.-4      	; 0x5d16 <APP_Start+0x2a6>
    5d1a:	9e 8f       	std	Y+30, r25	; 0x1e
    5d1c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1000);
		H_LCD_void_ClearDisplay();
    5d1e:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
		Temp_Holder = Wrong_Authentication();
    5d22:	0e 94 ec 3f 	call	0x7fd8	; 0x7fd8 <Wrong_Authentication>
    5d26:	89 af       	std	Y+57, r24	; 0x39
		if (Temp_Holder == Pass_Ok)
    5d28:	89 ad       	ldd	r24, Y+57	; 0x39
    5d2a:	81 30       	cpi	r24, 0x01	; 1
    5d2c:	09 f0       	breq	.+2      	; 0x5d30 <APP_Start+0x2c0>
    5d2e:	79 c0       	rjmp	.+242    	; 0x5e22 <APP_Start+0x3b2>
		{
			H_LCD_void_sendString("VALID_LOGIN");
    5d30:	83 ef       	ldi	r24, 0xF3	; 243
    5d32:	91 e0       	ldi	r25, 0x01	; 1
    5d34:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    5d38:	80 e0       	ldi	r24, 0x00	; 0
    5d3a:	90 e0       	ldi	r25, 0x00	; 0
    5d3c:	aa ef       	ldi	r26, 0xFA	; 250
    5d3e:	b4 e4       	ldi	r27, 0x44	; 68
    5d40:	89 8f       	std	Y+25, r24	; 0x19
    5d42:	9a 8f       	std	Y+26, r25	; 0x1a
    5d44:	ab 8f       	std	Y+27, r26	; 0x1b
    5d46:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d48:	69 8d       	ldd	r22, Y+25	; 0x19
    5d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d50:	20 e0       	ldi	r18, 0x00	; 0
    5d52:	30 e0       	ldi	r19, 0x00	; 0
    5d54:	4a e7       	ldi	r20, 0x7A	; 122
    5d56:	55 e4       	ldi	r21, 0x45	; 69
    5d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d5c:	dc 01       	movw	r26, r24
    5d5e:	cb 01       	movw	r24, r22
    5d60:	8d 8b       	std	Y+21, r24	; 0x15
    5d62:	9e 8b       	std	Y+22, r25	; 0x16
    5d64:	af 8b       	std	Y+23, r26	; 0x17
    5d66:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5d68:	6d 89       	ldd	r22, Y+21	; 0x15
    5d6a:	7e 89       	ldd	r23, Y+22	; 0x16
    5d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    5d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    5d70:	20 e0       	ldi	r18, 0x00	; 0
    5d72:	30 e0       	ldi	r19, 0x00	; 0
    5d74:	40 e8       	ldi	r20, 0x80	; 128
    5d76:	5f e3       	ldi	r21, 0x3F	; 63
    5d78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5d7c:	88 23       	and	r24, r24
    5d7e:	2c f4       	brge	.+10     	; 0x5d8a <APP_Start+0x31a>
		__ticks = 1;
    5d80:	81 e0       	ldi	r24, 0x01	; 1
    5d82:	90 e0       	ldi	r25, 0x00	; 0
    5d84:	9c 8b       	std	Y+20, r25	; 0x14
    5d86:	8b 8b       	std	Y+19, r24	; 0x13
    5d88:	3f c0       	rjmp	.+126    	; 0x5e08 <APP_Start+0x398>
	else if (__tmp > 65535)
    5d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    5d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    5d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    5d90:	98 8d       	ldd	r25, Y+24	; 0x18
    5d92:	20 e0       	ldi	r18, 0x00	; 0
    5d94:	3f ef       	ldi	r19, 0xFF	; 255
    5d96:	4f e7       	ldi	r20, 0x7F	; 127
    5d98:	57 e4       	ldi	r21, 0x47	; 71
    5d9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5d9e:	18 16       	cp	r1, r24
    5da0:	4c f5       	brge	.+82     	; 0x5df4 <APP_Start+0x384>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5da2:	69 8d       	ldd	r22, Y+25	; 0x19
    5da4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5daa:	20 e0       	ldi	r18, 0x00	; 0
    5dac:	30 e0       	ldi	r19, 0x00	; 0
    5dae:	40 e2       	ldi	r20, 0x20	; 32
    5db0:	51 e4       	ldi	r21, 0x41	; 65
    5db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5db6:	dc 01       	movw	r26, r24
    5db8:	cb 01       	movw	r24, r22
    5dba:	bc 01       	movw	r22, r24
    5dbc:	cd 01       	movw	r24, r26
    5dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5dc2:	dc 01       	movw	r26, r24
    5dc4:	cb 01       	movw	r24, r22
    5dc6:	9c 8b       	std	Y+20, r25	; 0x14
    5dc8:	8b 8b       	std	Y+19, r24	; 0x13
    5dca:	0f c0       	rjmp	.+30     	; 0x5dea <APP_Start+0x37a>
    5dcc:	80 e9       	ldi	r24, 0x90	; 144
    5dce:	91 e0       	ldi	r25, 0x01	; 1
    5dd0:	9a 8b       	std	Y+18, r25	; 0x12
    5dd2:	89 8b       	std	Y+17, r24	; 0x11
    5dd4:	89 89       	ldd	r24, Y+17	; 0x11
    5dd6:	9a 89       	ldd	r25, Y+18	; 0x12
    5dd8:	01 97       	sbiw	r24, 0x01	; 1
    5dda:	f1 f7       	brne	.-4      	; 0x5dd8 <APP_Start+0x368>
    5ddc:	9a 8b       	std	Y+18, r25	; 0x12
    5dde:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5de0:	8b 89       	ldd	r24, Y+19	; 0x13
    5de2:	9c 89       	ldd	r25, Y+20	; 0x14
    5de4:	01 97       	sbiw	r24, 0x01	; 1
    5de6:	9c 8b       	std	Y+20, r25	; 0x14
    5de8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dea:	8b 89       	ldd	r24, Y+19	; 0x13
    5dec:	9c 89       	ldd	r25, Y+20	; 0x14
    5dee:	00 97       	sbiw	r24, 0x00	; 0
    5df0:	69 f7       	brne	.-38     	; 0x5dcc <APP_Start+0x35c>
    5df2:	14 c0       	rjmp	.+40     	; 0x5e1c <APP_Start+0x3ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5df4:	6d 89       	ldd	r22, Y+21	; 0x15
    5df6:	7e 89       	ldd	r23, Y+22	; 0x16
    5df8:	8f 89       	ldd	r24, Y+23	; 0x17
    5dfa:	98 8d       	ldd	r25, Y+24	; 0x18
    5dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e00:	dc 01       	movw	r26, r24
    5e02:	cb 01       	movw	r24, r22
    5e04:	9c 8b       	std	Y+20, r25	; 0x14
    5e06:	8b 8b       	std	Y+19, r24	; 0x13
    5e08:	8b 89       	ldd	r24, Y+19	; 0x13
    5e0a:	9c 89       	ldd	r25, Y+20	; 0x14
    5e0c:	98 8b       	std	Y+16, r25	; 0x10
    5e0e:	8f 87       	std	Y+15, r24	; 0x0f
    5e10:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e12:	98 89       	ldd	r25, Y+16	; 0x10
    5e14:	01 97       	sbiw	r24, 0x01	; 1
    5e16:	f1 f7       	brne	.-4      	; 0x5e14 <APP_Start+0x3a4>
    5e18:	98 8b       	std	Y+16, r25	; 0x10
    5e1a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2000);
			Successful_Authentication();
    5e1c:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <Successful_Authentication>
    5e20:	05 c0       	rjmp	.+10     	; 0x5e2c <APP_Start+0x3bc>
			break;
		}
		}while(Global_PasswordCounter != MAX_TRIALS);
    5e22:	80 91 04 06 	lds	r24, 0x0604
    5e26:	82 30       	cpi	r24, 0x02	; 2
    5e28:	09 f0       	breq	.+2      	; 0x5e2c <APP_Start+0x3bc>
    5e2a:	fb ce       	rjmp	.-522    	; 0x5c22 <APP_Start+0x1b2>

		if(Global_PasswordCounter == MAX_TRIALS)
    5e2c:	80 91 04 06 	lds	r24, 0x0604
    5e30:	82 30       	cpi	r24, 0x02	; 2
    5e32:	f1 f4       	brne	.+60     	; 0x5e70 <APP_Start+0x400>
		{
			// System stop for 1 min
			if (Global_Flag == 0)
    5e34:	80 91 05 06 	lds	r24, 0x0605
    5e38:	88 23       	and	r24, r24
    5e3a:	d1 f4       	brne	.+52     	; 0x5e70 <APP_Start+0x400>
			{
			M_GIE_Void_Enable();
    5e3c:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <M_GIE_Void_Enable>
			H_LCD_void_sendString("Wait for 2 min");
    5e40:	8e e1       	ldi	r24, 0x1E	; 30
    5e42:	92 e0       	ldi	r25, 0x02	; 2
    5e44:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
			M_TIMER0_setDelayTimeMilliSec(10,NORMAL_MODE,CLK_1024);
    5e48:	6a e0       	ldi	r22, 0x0A	; 10
    5e4a:	70 e0       	ldi	r23, 0x00	; 0
    5e4c:	80 e0       	ldi	r24, 0x00	; 0
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
    5e50:	40 e0       	ldi	r20, 0x00	; 0
    5e52:	25 e0       	ldi	r18, 0x05	; 5
    5e54:	0e 94 b3 0a 	call	0x1566	; 0x1566 <M_TIMER0_setDelayTimeMilliSec>

			H_BUZZER_Void_TurnOn();
    5e58:	0e 94 12 2c 	call	0x5824	; 0x5824 <H_BUZZER_Void_TurnOn>

			do{


			}while(Global_Flag == 0);
    5e5c:	80 91 05 06 	lds	r24, 0x0605
    5e60:	88 23       	and	r24, r24
    5e62:	e1 f3       	breq	.-8      	; 0x5e5c <APP_Start+0x3ec>

			H_BUZZER_Void_TurnOff();
    5e64:	0e 94 1d 2c 	call	0x583a	; 0x583a <H_BUZZER_Void_TurnOff>

			H_LCD_void_ClearDisplay();
    5e68:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
			M_GIE_Void_Disable();
    5e6c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <M_GIE_Void_Disable>

			}
		}
		/*Clear Global Passowrd counter */
		Global_PasswordCounter = 0 ;
    5e70:	10 92 04 06 	sts	0x0604, r1
    5e74:	7c c0       	rjmp	.+248    	; 0x5f6e <APP_Start+0x4fe>
	}
	/* if user chose rest*/
	else if (User_Status == USER_REST_ID)
    5e76:	8a ad       	ldd	r24, Y+58	; 0x3a
    5e78:	83 33       	cpi	r24, 0x33	; 51
    5e7a:	09 f0       	breq	.+2      	; 0x5e7e <APP_Start+0x40e>
    5e7c:	78 c0       	rjmp	.+240    	; 0x5f6e <APP_Start+0x4fe>
	{
		H_LCD_void_ClearDisplay();
    5e7e:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("Rest Password");
    5e82:	8d e2       	ldi	r24, 0x2D	; 45
    5e84:	92 e0       	ldi	r25, 0x02	; 2
    5e86:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    5e8a:	80 e0       	ldi	r24, 0x00	; 0
    5e8c:	90 e0       	ldi	r25, 0x00	; 0
    5e8e:	aa e7       	ldi	r26, 0x7A	; 122
    5e90:	b4 e4       	ldi	r27, 0x44	; 68
    5e92:	8b 87       	std	Y+11, r24	; 0x0b
    5e94:	9c 87       	std	Y+12, r25	; 0x0c
    5e96:	ad 87       	std	Y+13, r26	; 0x0d
    5e98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ea2:	20 e0       	ldi	r18, 0x00	; 0
    5ea4:	30 e0       	ldi	r19, 0x00	; 0
    5ea6:	4a e7       	ldi	r20, 0x7A	; 122
    5ea8:	55 e4       	ldi	r21, 0x45	; 69
    5eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5eae:	dc 01       	movw	r26, r24
    5eb0:	cb 01       	movw	r24, r22
    5eb2:	8f 83       	std	Y+7, r24	; 0x07
    5eb4:	98 87       	std	Y+8, r25	; 0x08
    5eb6:	a9 87       	std	Y+9, r26	; 0x09
    5eb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5eba:	6f 81       	ldd	r22, Y+7	; 0x07
    5ebc:	78 85       	ldd	r23, Y+8	; 0x08
    5ebe:	89 85       	ldd	r24, Y+9	; 0x09
    5ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ec2:	20 e0       	ldi	r18, 0x00	; 0
    5ec4:	30 e0       	ldi	r19, 0x00	; 0
    5ec6:	40 e8       	ldi	r20, 0x80	; 128
    5ec8:	5f e3       	ldi	r21, 0x3F	; 63
    5eca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ece:	88 23       	and	r24, r24
    5ed0:	2c f4       	brge	.+10     	; 0x5edc <APP_Start+0x46c>
		__ticks = 1;
    5ed2:	81 e0       	ldi	r24, 0x01	; 1
    5ed4:	90 e0       	ldi	r25, 0x00	; 0
    5ed6:	9e 83       	std	Y+6, r25	; 0x06
    5ed8:	8d 83       	std	Y+5, r24	; 0x05
    5eda:	3f c0       	rjmp	.+126    	; 0x5f5a <APP_Start+0x4ea>
	else if (__tmp > 65535)
    5edc:	6f 81       	ldd	r22, Y+7	; 0x07
    5ede:	78 85       	ldd	r23, Y+8	; 0x08
    5ee0:	89 85       	ldd	r24, Y+9	; 0x09
    5ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ee4:	20 e0       	ldi	r18, 0x00	; 0
    5ee6:	3f ef       	ldi	r19, 0xFF	; 255
    5ee8:	4f e7       	ldi	r20, 0x7F	; 127
    5eea:	57 e4       	ldi	r21, 0x47	; 71
    5eec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5ef0:	18 16       	cp	r1, r24
    5ef2:	4c f5       	brge	.+82     	; 0x5f46 <APP_Start+0x4d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    5efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    5efc:	20 e0       	ldi	r18, 0x00	; 0
    5efe:	30 e0       	ldi	r19, 0x00	; 0
    5f00:	40 e2       	ldi	r20, 0x20	; 32
    5f02:	51 e4       	ldi	r21, 0x41	; 65
    5f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f08:	dc 01       	movw	r26, r24
    5f0a:	cb 01       	movw	r24, r22
    5f0c:	bc 01       	movw	r22, r24
    5f0e:	cd 01       	movw	r24, r26
    5f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f14:	dc 01       	movw	r26, r24
    5f16:	cb 01       	movw	r24, r22
    5f18:	9e 83       	std	Y+6, r25	; 0x06
    5f1a:	8d 83       	std	Y+5, r24	; 0x05
    5f1c:	0f c0       	rjmp	.+30     	; 0x5f3c <APP_Start+0x4cc>
    5f1e:	80 e9       	ldi	r24, 0x90	; 144
    5f20:	91 e0       	ldi	r25, 0x01	; 1
    5f22:	9c 83       	std	Y+4, r25	; 0x04
    5f24:	8b 83       	std	Y+3, r24	; 0x03
    5f26:	8b 81       	ldd	r24, Y+3	; 0x03
    5f28:	9c 81       	ldd	r25, Y+4	; 0x04
    5f2a:	01 97       	sbiw	r24, 0x01	; 1
    5f2c:	f1 f7       	brne	.-4      	; 0x5f2a <APP_Start+0x4ba>
    5f2e:	9c 83       	std	Y+4, r25	; 0x04
    5f30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f32:	8d 81       	ldd	r24, Y+5	; 0x05
    5f34:	9e 81       	ldd	r25, Y+6	; 0x06
    5f36:	01 97       	sbiw	r24, 0x01	; 1
    5f38:	9e 83       	std	Y+6, r25	; 0x06
    5f3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    5f40:	00 97       	sbiw	r24, 0x00	; 0
    5f42:	69 f7       	brne	.-38     	; 0x5f1e <APP_Start+0x4ae>
    5f44:	14 c0       	rjmp	.+40     	; 0x5f6e <APP_Start+0x4fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f46:	6f 81       	ldd	r22, Y+7	; 0x07
    5f48:	78 85       	ldd	r23, Y+8	; 0x08
    5f4a:	89 85       	ldd	r24, Y+9	; 0x09
    5f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f52:	dc 01       	movw	r26, r24
    5f54:	cb 01       	movw	r24, r22
    5f56:	9e 83       	std	Y+6, r25	; 0x06
    5f58:	8d 83       	std	Y+5, r24	; 0x05
    5f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    5f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    5f5e:	9a 83       	std	Y+2, r25	; 0x02
    5f60:	89 83       	std	Y+1, r24	; 0x01
    5f62:	89 81       	ldd	r24, Y+1	; 0x01
    5f64:	9a 81       	ldd	r25, Y+2	; 0x02
    5f66:	01 97       	sbiw	r24, 0x01	; 1
    5f68:	f1 f7       	brne	.-4      	; 0x5f66 <APP_Start+0x4f6>
    5f6a:	9a 83       	std	Y+2, r25	; 0x02
    5f6c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}

}
    5f6e:	ed 96       	adiw	r28, 0x3d	; 61
    5f70:	0f b6       	in	r0, 0x3f	; 63
    5f72:	f8 94       	cli
    5f74:	de bf       	out	0x3e, r29	; 62
    5f76:	0f be       	out	0x3f, r0	; 63
    5f78:	cd bf       	out	0x3d, r28	; 61
    5f7a:	cf 91       	pop	r28
    5f7c:	df 91       	pop	r29
    5f7e:	08 95       	ret

00005f80 <Close_System>:



void Close_System()
{
    5f80:	df 93       	push	r29
    5f82:	cf 93       	push	r28
    5f84:	cd b7       	in	r28, 0x3d	; 61
    5f86:	de b7       	in	r29, 0x3e	; 62
	Global_Flag = 1 ;
    5f88:	81 e0       	ldi	r24, 0x01	; 1
    5f8a:	80 93 05 06 	sts	0x0605, r24
}
    5f8e:	cf 91       	pop	r28
    5f90:	df 91       	pop	r29
    5f92:	08 95       	ret

00005f94 <Successful_Authentication>:
 * Functions
 **************/


void Successful_Authentication(void)
{
    5f94:	df 93       	push	r29
    5f96:	cf 93       	push	r28
    5f98:	cd b7       	in	r28, 0x3d	; 61
    5f9a:	de b7       	in	r29, 0x3e	; 62
    5f9c:	6c 97       	sbiw	r28, 0x1c	; 28
    5f9e:	0f b6       	in	r0, 0x3f	; 63
    5fa0:	f8 94       	cli
    5fa2:	de bf       	out	0x3e, r29	; 62
    5fa4:	0f be       	out	0x3f, r0	; 63
    5fa6:	cd bf       	out	0x3d, r28	; 61
	H_LCD_void_gotoXY(1,0);
    5fa8:	81 e0       	ldi	r24, 0x01	; 1
    5faa:	60 e0       	ldi	r22, 0x00	; 0
    5fac:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
    H_LCD_void_sendString("Welcome to your House");
    5fb0:	8b e3       	ldi	r24, 0x3B	; 59
    5fb2:	92 e0       	ldi	r25, 0x02	; 2
    5fb4:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    H_LCD_void_gotoXY(2,0);
    5fb8:	82 e0       	ldi	r24, 0x02	; 2
    5fba:	60 e0       	ldi	r22, 0x00	; 0
    5fbc:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
    H_LCD_void_sendString("Last Login was:");
    5fc0:	81 e5       	ldi	r24, 0x51	; 81
    5fc2:	92 e0       	ldi	r25, 0x02	; 2
    5fc4:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    H_LCD_void_gotoXY(3,0);
    5fc8:	83 e0       	ldi	r24, 0x03	; 3
    5fca:	60 e0       	ldi	r22, 0x00	; 0
    5fcc:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
    Display_Time_Processing();
    5fd0:	0e 94 52 3a 	call	0x74a4	; 0x74a4 <Display_Time_Processing>
    5fd4:	80 e0       	ldi	r24, 0x00	; 0
    5fd6:	90 e8       	ldi	r25, 0x80	; 128
    5fd8:	ab e3       	ldi	r26, 0x3B	; 59
    5fda:	b5 e4       	ldi	r27, 0x45	; 69
    5fdc:	89 8f       	std	Y+25, r24	; 0x19
    5fde:	9a 8f       	std	Y+26, r25	; 0x1a
    5fe0:	ab 8f       	std	Y+27, r26	; 0x1b
    5fe2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5fe4:	69 8d       	ldd	r22, Y+25	; 0x19
    5fe6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5fec:	20 e0       	ldi	r18, 0x00	; 0
    5fee:	30 e0       	ldi	r19, 0x00	; 0
    5ff0:	4a e7       	ldi	r20, 0x7A	; 122
    5ff2:	55 e4       	ldi	r21, 0x45	; 69
    5ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ff8:	dc 01       	movw	r26, r24
    5ffa:	cb 01       	movw	r24, r22
    5ffc:	8d 8b       	std	Y+21, r24	; 0x15
    5ffe:	9e 8b       	std	Y+22, r25	; 0x16
    6000:	af 8b       	std	Y+23, r26	; 0x17
    6002:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6004:	6d 89       	ldd	r22, Y+21	; 0x15
    6006:	7e 89       	ldd	r23, Y+22	; 0x16
    6008:	8f 89       	ldd	r24, Y+23	; 0x17
    600a:	98 8d       	ldd	r25, Y+24	; 0x18
    600c:	20 e0       	ldi	r18, 0x00	; 0
    600e:	30 e0       	ldi	r19, 0x00	; 0
    6010:	40 e8       	ldi	r20, 0x80	; 128
    6012:	5f e3       	ldi	r21, 0x3F	; 63
    6014:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6018:	88 23       	and	r24, r24
    601a:	2c f4       	brge	.+10     	; 0x6026 <Successful_Authentication+0x92>
		__ticks = 1;
    601c:	81 e0       	ldi	r24, 0x01	; 1
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	9c 8b       	std	Y+20, r25	; 0x14
    6022:	8b 8b       	std	Y+19, r24	; 0x13
    6024:	3f c0       	rjmp	.+126    	; 0x60a4 <Successful_Authentication+0x110>
	else if (__tmp > 65535)
    6026:	6d 89       	ldd	r22, Y+21	; 0x15
    6028:	7e 89       	ldd	r23, Y+22	; 0x16
    602a:	8f 89       	ldd	r24, Y+23	; 0x17
    602c:	98 8d       	ldd	r25, Y+24	; 0x18
    602e:	20 e0       	ldi	r18, 0x00	; 0
    6030:	3f ef       	ldi	r19, 0xFF	; 255
    6032:	4f e7       	ldi	r20, 0x7F	; 127
    6034:	57 e4       	ldi	r21, 0x47	; 71
    6036:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    603a:	18 16       	cp	r1, r24
    603c:	4c f5       	brge	.+82     	; 0x6090 <Successful_Authentication+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    603e:	69 8d       	ldd	r22, Y+25	; 0x19
    6040:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6042:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6044:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6046:	20 e0       	ldi	r18, 0x00	; 0
    6048:	30 e0       	ldi	r19, 0x00	; 0
    604a:	40 e2       	ldi	r20, 0x20	; 32
    604c:	51 e4       	ldi	r21, 0x41	; 65
    604e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6052:	dc 01       	movw	r26, r24
    6054:	cb 01       	movw	r24, r22
    6056:	bc 01       	movw	r22, r24
    6058:	cd 01       	movw	r24, r26
    605a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    605e:	dc 01       	movw	r26, r24
    6060:	cb 01       	movw	r24, r22
    6062:	9c 8b       	std	Y+20, r25	; 0x14
    6064:	8b 8b       	std	Y+19, r24	; 0x13
    6066:	0f c0       	rjmp	.+30     	; 0x6086 <Successful_Authentication+0xf2>
    6068:	80 e9       	ldi	r24, 0x90	; 144
    606a:	91 e0       	ldi	r25, 0x01	; 1
    606c:	9a 8b       	std	Y+18, r25	; 0x12
    606e:	89 8b       	std	Y+17, r24	; 0x11
    6070:	89 89       	ldd	r24, Y+17	; 0x11
    6072:	9a 89       	ldd	r25, Y+18	; 0x12
    6074:	01 97       	sbiw	r24, 0x01	; 1
    6076:	f1 f7       	brne	.-4      	; 0x6074 <Successful_Authentication+0xe0>
    6078:	9a 8b       	std	Y+18, r25	; 0x12
    607a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    607c:	8b 89       	ldd	r24, Y+19	; 0x13
    607e:	9c 89       	ldd	r25, Y+20	; 0x14
    6080:	01 97       	sbiw	r24, 0x01	; 1
    6082:	9c 8b       	std	Y+20, r25	; 0x14
    6084:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6086:	8b 89       	ldd	r24, Y+19	; 0x13
    6088:	9c 89       	ldd	r25, Y+20	; 0x14
    608a:	00 97       	sbiw	r24, 0x00	; 0
    608c:	69 f7       	brne	.-38     	; 0x6068 <Successful_Authentication+0xd4>
    608e:	14 c0       	rjmp	.+40     	; 0x60b8 <Successful_Authentication+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6090:	6d 89       	ldd	r22, Y+21	; 0x15
    6092:	7e 89       	ldd	r23, Y+22	; 0x16
    6094:	8f 89       	ldd	r24, Y+23	; 0x17
    6096:	98 8d       	ldd	r25, Y+24	; 0x18
    6098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    609c:	dc 01       	movw	r26, r24
    609e:	cb 01       	movw	r24, r22
    60a0:	9c 8b       	std	Y+20, r25	; 0x14
    60a2:	8b 8b       	std	Y+19, r24	; 0x13
    60a4:	8b 89       	ldd	r24, Y+19	; 0x13
    60a6:	9c 89       	ldd	r25, Y+20	; 0x14
    60a8:	98 8b       	std	Y+16, r25	; 0x10
    60aa:	8f 87       	std	Y+15, r24	; 0x0f
    60ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    60ae:	98 89       	ldd	r25, Y+16	; 0x10
    60b0:	01 97       	sbiw	r24, 0x01	; 1
    60b2:	f1 f7       	brne	.-4      	; 0x60b0 <Successful_Authentication+0x11c>
    60b4:	98 8b       	std	Y+16, r25	; 0x10
    60b6:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(3000);
    H_LCD_void_ClearDisplay();
    60b8:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
    Show_Time_Processing();
    60bc:	0e 94 e5 30 	call	0x61ca	; 0x61ca <Show_Time_Processing>
    Save_Time_Processing();
    60c0:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <Save_Time_Processing>
    H_Relay_Void_WorkOn(Relay_1);
    60c4:	81 e0       	ldi	r24, 0x01	; 1
    60c6:	0e 94 cc 11 	call	0x2398	; 0x2398 <H_Relay_Void_WorkOn>
    60ca:	80 e0       	ldi	r24, 0x00	; 0
    60cc:	90 e4       	ldi	r25, 0x40	; 64
    60ce:	ac e9       	ldi	r26, 0x9C	; 156
    60d0:	b5 e4       	ldi	r27, 0x45	; 69
    60d2:	8b 87       	std	Y+11, r24	; 0x0b
    60d4:	9c 87       	std	Y+12, r25	; 0x0c
    60d6:	ad 87       	std	Y+13, r26	; 0x0d
    60d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60da:	6b 85       	ldd	r22, Y+11	; 0x0b
    60dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    60de:	8d 85       	ldd	r24, Y+13	; 0x0d
    60e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    60e2:	20 e0       	ldi	r18, 0x00	; 0
    60e4:	30 e0       	ldi	r19, 0x00	; 0
    60e6:	4a e7       	ldi	r20, 0x7A	; 122
    60e8:	55 e4       	ldi	r21, 0x45	; 69
    60ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60ee:	dc 01       	movw	r26, r24
    60f0:	cb 01       	movw	r24, r22
    60f2:	8f 83       	std	Y+7, r24	; 0x07
    60f4:	98 87       	std	Y+8, r25	; 0x08
    60f6:	a9 87       	std	Y+9, r26	; 0x09
    60f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    60fa:	6f 81       	ldd	r22, Y+7	; 0x07
    60fc:	78 85       	ldd	r23, Y+8	; 0x08
    60fe:	89 85       	ldd	r24, Y+9	; 0x09
    6100:	9a 85       	ldd	r25, Y+10	; 0x0a
    6102:	20 e0       	ldi	r18, 0x00	; 0
    6104:	30 e0       	ldi	r19, 0x00	; 0
    6106:	40 e8       	ldi	r20, 0x80	; 128
    6108:	5f e3       	ldi	r21, 0x3F	; 63
    610a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    610e:	88 23       	and	r24, r24
    6110:	2c f4       	brge	.+10     	; 0x611c <Successful_Authentication+0x188>
		__ticks = 1;
    6112:	81 e0       	ldi	r24, 0x01	; 1
    6114:	90 e0       	ldi	r25, 0x00	; 0
    6116:	9e 83       	std	Y+6, r25	; 0x06
    6118:	8d 83       	std	Y+5, r24	; 0x05
    611a:	3f c0       	rjmp	.+126    	; 0x619a <Successful_Authentication+0x206>
	else if (__tmp > 65535)
    611c:	6f 81       	ldd	r22, Y+7	; 0x07
    611e:	78 85       	ldd	r23, Y+8	; 0x08
    6120:	89 85       	ldd	r24, Y+9	; 0x09
    6122:	9a 85       	ldd	r25, Y+10	; 0x0a
    6124:	20 e0       	ldi	r18, 0x00	; 0
    6126:	3f ef       	ldi	r19, 0xFF	; 255
    6128:	4f e7       	ldi	r20, 0x7F	; 127
    612a:	57 e4       	ldi	r21, 0x47	; 71
    612c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6130:	18 16       	cp	r1, r24
    6132:	4c f5       	brge	.+82     	; 0x6186 <Successful_Authentication+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6134:	6b 85       	ldd	r22, Y+11	; 0x0b
    6136:	7c 85       	ldd	r23, Y+12	; 0x0c
    6138:	8d 85       	ldd	r24, Y+13	; 0x0d
    613a:	9e 85       	ldd	r25, Y+14	; 0x0e
    613c:	20 e0       	ldi	r18, 0x00	; 0
    613e:	30 e0       	ldi	r19, 0x00	; 0
    6140:	40 e2       	ldi	r20, 0x20	; 32
    6142:	51 e4       	ldi	r21, 0x41	; 65
    6144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6148:	dc 01       	movw	r26, r24
    614a:	cb 01       	movw	r24, r22
    614c:	bc 01       	movw	r22, r24
    614e:	cd 01       	movw	r24, r26
    6150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6154:	dc 01       	movw	r26, r24
    6156:	cb 01       	movw	r24, r22
    6158:	9e 83       	std	Y+6, r25	; 0x06
    615a:	8d 83       	std	Y+5, r24	; 0x05
    615c:	0f c0       	rjmp	.+30     	; 0x617c <Successful_Authentication+0x1e8>
    615e:	80 e9       	ldi	r24, 0x90	; 144
    6160:	91 e0       	ldi	r25, 0x01	; 1
    6162:	9c 83       	std	Y+4, r25	; 0x04
    6164:	8b 83       	std	Y+3, r24	; 0x03
    6166:	8b 81       	ldd	r24, Y+3	; 0x03
    6168:	9c 81       	ldd	r25, Y+4	; 0x04
    616a:	01 97       	sbiw	r24, 0x01	; 1
    616c:	f1 f7       	brne	.-4      	; 0x616a <Successful_Authentication+0x1d6>
    616e:	9c 83       	std	Y+4, r25	; 0x04
    6170:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6172:	8d 81       	ldd	r24, Y+5	; 0x05
    6174:	9e 81       	ldd	r25, Y+6	; 0x06
    6176:	01 97       	sbiw	r24, 0x01	; 1
    6178:	9e 83       	std	Y+6, r25	; 0x06
    617a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    617c:	8d 81       	ldd	r24, Y+5	; 0x05
    617e:	9e 81       	ldd	r25, Y+6	; 0x06
    6180:	00 97       	sbiw	r24, 0x00	; 0
    6182:	69 f7       	brne	.-38     	; 0x615e <Successful_Authentication+0x1ca>
    6184:	14 c0       	rjmp	.+40     	; 0x61ae <Successful_Authentication+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6186:	6f 81       	ldd	r22, Y+7	; 0x07
    6188:	78 85       	ldd	r23, Y+8	; 0x08
    618a:	89 85       	ldd	r24, Y+9	; 0x09
    618c:	9a 85       	ldd	r25, Y+10	; 0x0a
    618e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6192:	dc 01       	movw	r26, r24
    6194:	cb 01       	movw	r24, r22
    6196:	9e 83       	std	Y+6, r25	; 0x06
    6198:	8d 83       	std	Y+5, r24	; 0x05
    619a:	8d 81       	ldd	r24, Y+5	; 0x05
    619c:	9e 81       	ldd	r25, Y+6	; 0x06
    619e:	9a 83       	std	Y+2, r25	; 0x02
    61a0:	89 83       	std	Y+1, r24	; 0x01
    61a2:	89 81       	ldd	r24, Y+1	; 0x01
    61a4:	9a 81       	ldd	r25, Y+2	; 0x02
    61a6:	01 97       	sbiw	r24, 0x01	; 1
    61a8:	f1 f7       	brne	.-4      	; 0x61a6 <Successful_Authentication+0x212>
    61aa:	9a 83       	std	Y+2, r25	; 0x02
    61ac:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5000);
    H_Relay_Void_WorkOff(Relay_1);
    61ae:	81 e0       	ldi	r24, 0x01	; 1
    61b0:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <H_Relay_Void_WorkOff>
    H_LCD_void_ClearDisplay();
    61b4:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
}
    61b8:	6c 96       	adiw	r28, 0x1c	; 28
    61ba:	0f b6       	in	r0, 0x3f	; 63
    61bc:	f8 94       	cli
    61be:	de bf       	out	0x3e, r29	; 62
    61c0:	0f be       	out	0x3f, r0	; 63
    61c2:	cd bf       	out	0x3d, r28	; 61
    61c4:	cf 91       	pop	r28
    61c6:	df 91       	pop	r29
    61c8:	08 95       	ret

000061ca <Show_Time_Processing>:

void Show_Time_Processing(void)
{
    61ca:	0f 93       	push	r16
    61cc:	1f 93       	push	r17
    61ce:	df 93       	push	r29
    61d0:	cf 93       	push	r28
    61d2:	cd b7       	in	r28, 0x3d	; 61
    61d4:	de b7       	in	r29, 0x3e	; 62
    61d6:	cf 56       	subi	r28, 0x6F	; 111
    61d8:	d0 40       	sbci	r29, 0x00	; 0
    61da:	0f b6       	in	r0, 0x3f	; 63
    61dc:	f8 94       	cli
    61de:	de bf       	out	0x3e, r29	; 62
    61e0:	0f be       	out	0x3f, r0	; 63
    61e2:	cd bf       	out	0x3d, r28	; 61
	//Display Time
	H_LCD_void_gotoXY(2, 0);
    61e4:	82 e0       	ldi	r24, 0x02	; 2
    61e6:	60 e0       	ldi	r22, 0x00	; 0
    61e8:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Today is: ");
    61ec:	81 e6       	ldi	r24, 0x61	; 97
    61ee:	92 e0       	ldi	r25, 0x02	; 2
    61f0:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
	H_LCD_void_gotoXY(3, 0);
    61f4:	83 e0       	ldi	r24, 0x03	; 3
    61f6:	60 e0       	ldi	r22, 0x00	; 0
    61f8:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Time is: ");
    61fc:	8c e6       	ldi	r24, 0x6C	; 108
    61fe:	92 e0       	ldi	r25, 0x02	; 2
    6200:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2, 10);
    6204:	82 e0       	ldi	r24, 0x02	; 2
    6206:	6a e0       	ldi	r22, 0x0A	; 10
    6208:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
	H_LCD_void_sendIntNum((u16)H_RTC_Void_GetDate().RTC_Day);
    620c:	0e 94 d6 12 	call	0x25ac	; 0x25ac <H_RTC_Void_GetDate>
    6210:	fe 01       	movw	r30, r28
    6212:	e2 5a       	subi	r30, 0xA2	; 162
    6214:	ff 4f       	sbci	r31, 0xFF	; 255
    6216:	60 83       	st	Z, r22
    6218:	fe 01       	movw	r30, r28
    621a:	e1 5a       	subi	r30, 0xA1	; 161
    621c:	ff 4f       	sbci	r31, 0xFF	; 255
    621e:	70 83       	st	Z, r23
    6220:	fe 01       	movw	r30, r28
    6222:	e0 5a       	subi	r30, 0xA0	; 160
    6224:	ff 4f       	sbci	r31, 0xFF	; 255
    6226:	80 83       	st	Z, r24
    6228:	ce 01       	movw	r24, r28
    622a:	85 5a       	subi	r24, 0xA5	; 165
    622c:	9f 4f       	sbci	r25, 0xFF	; 255
    622e:	9e 01       	movw	r18, r28
    6230:	22 5a       	subi	r18, 0xA2	; 162
    6232:	3f 4f       	sbci	r19, 0xFF	; 255
    6234:	a3 96       	adiw	r28, 0x23	; 35
    6236:	9f af       	std	Y+63, r25	; 0x3f
    6238:	8e af       	std	Y+62, r24	; 0x3e
    623a:	a3 97       	sbiw	r28, 0x23	; 35
    623c:	a5 96       	adiw	r28, 0x25	; 37
    623e:	3f af       	std	Y+63, r19	; 0x3f
    6240:	2e af       	std	Y+62, r18	; 0x3e
    6242:	a5 97       	sbiw	r28, 0x25	; 37
    6244:	83 e0       	ldi	r24, 0x03	; 3
    6246:	a6 96       	adiw	r28, 0x26	; 38
    6248:	8f af       	std	Y+63, r24	; 0x3f
    624a:	a6 97       	sbiw	r28, 0x26	; 38
    624c:	a5 96       	adiw	r28, 0x25	; 37
    624e:	ee ad       	ldd	r30, Y+62	; 0x3e
    6250:	ff ad       	ldd	r31, Y+63	; 0x3f
    6252:	a5 97       	sbiw	r28, 0x25	; 37
    6254:	00 80       	ld	r0, Z
    6256:	a5 96       	adiw	r28, 0x25	; 37
    6258:	8e ad       	ldd	r24, Y+62	; 0x3e
    625a:	9f ad       	ldd	r25, Y+63	; 0x3f
    625c:	a5 97       	sbiw	r28, 0x25	; 37
    625e:	01 96       	adiw	r24, 0x01	; 1
    6260:	a5 96       	adiw	r28, 0x25	; 37
    6262:	9f af       	std	Y+63, r25	; 0x3f
    6264:	8e af       	std	Y+62, r24	; 0x3e
    6266:	a5 97       	sbiw	r28, 0x25	; 37
    6268:	a3 96       	adiw	r28, 0x23	; 35
    626a:	ee ad       	ldd	r30, Y+62	; 0x3e
    626c:	ff ad       	ldd	r31, Y+63	; 0x3f
    626e:	a3 97       	sbiw	r28, 0x23	; 35
    6270:	00 82       	st	Z, r0
    6272:	a3 96       	adiw	r28, 0x23	; 35
    6274:	8e ad       	ldd	r24, Y+62	; 0x3e
    6276:	9f ad       	ldd	r25, Y+63	; 0x3f
    6278:	a3 97       	sbiw	r28, 0x23	; 35
    627a:	01 96       	adiw	r24, 0x01	; 1
    627c:	a3 96       	adiw	r28, 0x23	; 35
    627e:	9f af       	std	Y+63, r25	; 0x3f
    6280:	8e af       	std	Y+62, r24	; 0x3e
    6282:	a3 97       	sbiw	r28, 0x23	; 35
    6284:	a6 96       	adiw	r28, 0x26	; 38
    6286:	9f ad       	ldd	r25, Y+63	; 0x3f
    6288:	a6 97       	sbiw	r28, 0x26	; 38
    628a:	91 50       	subi	r25, 0x01	; 1
    628c:	a6 96       	adiw	r28, 0x26	; 38
    628e:	9f af       	std	Y+63, r25	; 0x3f
    6290:	a6 97       	sbiw	r28, 0x26	; 38
    6292:	a6 96       	adiw	r28, 0x26	; 38
    6294:	ef ad       	ldd	r30, Y+63	; 0x3f
    6296:	a6 97       	sbiw	r28, 0x26	; 38
    6298:	ee 23       	and	r30, r30
    629a:	c1 f6       	brne	.-80     	; 0x624c <Show_Time_Processing+0x82>
    629c:	fe 01       	movw	r30, r28
    629e:	e5 5a       	subi	r30, 0xA5	; 165
    62a0:	ff 4f       	sbci	r31, 0xFF	; 255
    62a2:	80 81       	ld	r24, Z
    62a4:	88 2f       	mov	r24, r24
    62a6:	90 e0       	ldi	r25, 0x00	; 0
    62a8:	a0 e0       	ldi	r26, 0x00	; 0
    62aa:	b0 e0       	ldi	r27, 0x00	; 0
    62ac:	bc 01       	movw	r22, r24
    62ae:	cd 01       	movw	r24, r26
    62b0:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>
	H_LCD_void_sendData('/');
    62b4:	8f e2       	ldi	r24, 0x2F	; 47
    62b6:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
    62ba:	fe 01       	movw	r30, r28
    62bc:	ef 5a       	subi	r30, 0xAF	; 175
    62be:	ff 4f       	sbci	r31, 0xFF	; 255
    62c0:	80 e0       	ldi	r24, 0x00	; 0
    62c2:	90 e0       	ldi	r25, 0x00	; 0
    62c4:	a8 e4       	ldi	r26, 0x48	; 72
    62c6:	b3 e4       	ldi	r27, 0x43	; 67
    62c8:	80 83       	st	Z, r24
    62ca:	91 83       	std	Z+1, r25	; 0x01
    62cc:	a2 83       	std	Z+2, r26	; 0x02
    62ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    62d0:	8e 01       	movw	r16, r28
    62d2:	03 5b       	subi	r16, 0xB3	; 179
    62d4:	1f 4f       	sbci	r17, 0xFF	; 255
    62d6:	fe 01       	movw	r30, r28
    62d8:	ef 5a       	subi	r30, 0xAF	; 175
    62da:	ff 4f       	sbci	r31, 0xFF	; 255
    62dc:	60 81       	ld	r22, Z
    62de:	71 81       	ldd	r23, Z+1	; 0x01
    62e0:	82 81       	ldd	r24, Z+2	; 0x02
    62e2:	93 81       	ldd	r25, Z+3	; 0x03
    62e4:	20 e0       	ldi	r18, 0x00	; 0
    62e6:	30 e0       	ldi	r19, 0x00	; 0
    62e8:	4a e7       	ldi	r20, 0x7A	; 122
    62ea:	55 e4       	ldi	r21, 0x45	; 69
    62ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62f0:	dc 01       	movw	r26, r24
    62f2:	cb 01       	movw	r24, r22
    62f4:	f8 01       	movw	r30, r16
    62f6:	80 83       	st	Z, r24
    62f8:	91 83       	std	Z+1, r25	; 0x01
    62fa:	a2 83       	std	Z+2, r26	; 0x02
    62fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    62fe:	fe 01       	movw	r30, r28
    6300:	e3 5b       	subi	r30, 0xB3	; 179
    6302:	ff 4f       	sbci	r31, 0xFF	; 255
    6304:	60 81       	ld	r22, Z
    6306:	71 81       	ldd	r23, Z+1	; 0x01
    6308:	82 81       	ldd	r24, Z+2	; 0x02
    630a:	93 81       	ldd	r25, Z+3	; 0x03
    630c:	20 e0       	ldi	r18, 0x00	; 0
    630e:	30 e0       	ldi	r19, 0x00	; 0
    6310:	40 e8       	ldi	r20, 0x80	; 128
    6312:	5f e3       	ldi	r21, 0x3F	; 63
    6314:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6318:	88 23       	and	r24, r24
    631a:	44 f4       	brge	.+16     	; 0x632c <Show_Time_Processing+0x162>
		__ticks = 1;
    631c:	fe 01       	movw	r30, r28
    631e:	e5 5b       	subi	r30, 0xB5	; 181
    6320:	ff 4f       	sbci	r31, 0xFF	; 255
    6322:	81 e0       	ldi	r24, 0x01	; 1
    6324:	90 e0       	ldi	r25, 0x00	; 0
    6326:	91 83       	std	Z+1, r25	; 0x01
    6328:	80 83       	st	Z, r24
    632a:	64 c0       	rjmp	.+200    	; 0x63f4 <Show_Time_Processing+0x22a>
	else if (__tmp > 65535)
    632c:	fe 01       	movw	r30, r28
    632e:	e3 5b       	subi	r30, 0xB3	; 179
    6330:	ff 4f       	sbci	r31, 0xFF	; 255
    6332:	60 81       	ld	r22, Z
    6334:	71 81       	ldd	r23, Z+1	; 0x01
    6336:	82 81       	ldd	r24, Z+2	; 0x02
    6338:	93 81       	ldd	r25, Z+3	; 0x03
    633a:	20 e0       	ldi	r18, 0x00	; 0
    633c:	3f ef       	ldi	r19, 0xFF	; 255
    633e:	4f e7       	ldi	r20, 0x7F	; 127
    6340:	57 e4       	ldi	r21, 0x47	; 71
    6342:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6346:	18 16       	cp	r1, r24
    6348:	0c f0       	brlt	.+2      	; 0x634c <Show_Time_Processing+0x182>
    634a:	43 c0       	rjmp	.+134    	; 0x63d2 <Show_Time_Processing+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    634c:	fe 01       	movw	r30, r28
    634e:	ef 5a       	subi	r30, 0xAF	; 175
    6350:	ff 4f       	sbci	r31, 0xFF	; 255
    6352:	60 81       	ld	r22, Z
    6354:	71 81       	ldd	r23, Z+1	; 0x01
    6356:	82 81       	ldd	r24, Z+2	; 0x02
    6358:	93 81       	ldd	r25, Z+3	; 0x03
    635a:	20 e0       	ldi	r18, 0x00	; 0
    635c:	30 e0       	ldi	r19, 0x00	; 0
    635e:	40 e2       	ldi	r20, 0x20	; 32
    6360:	51 e4       	ldi	r21, 0x41	; 65
    6362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6366:	dc 01       	movw	r26, r24
    6368:	cb 01       	movw	r24, r22
    636a:	8e 01       	movw	r16, r28
    636c:	05 5b       	subi	r16, 0xB5	; 181
    636e:	1f 4f       	sbci	r17, 0xFF	; 255
    6370:	bc 01       	movw	r22, r24
    6372:	cd 01       	movw	r24, r26
    6374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6378:	dc 01       	movw	r26, r24
    637a:	cb 01       	movw	r24, r22
    637c:	f8 01       	movw	r30, r16
    637e:	91 83       	std	Z+1, r25	; 0x01
    6380:	80 83       	st	Z, r24
    6382:	1f c0       	rjmp	.+62     	; 0x63c2 <Show_Time_Processing+0x1f8>
    6384:	fe 01       	movw	r30, r28
    6386:	e7 5b       	subi	r30, 0xB7	; 183
    6388:	ff 4f       	sbci	r31, 0xFF	; 255
    638a:	80 e9       	ldi	r24, 0x90	; 144
    638c:	91 e0       	ldi	r25, 0x01	; 1
    638e:	91 83       	std	Z+1, r25	; 0x01
    6390:	80 83       	st	Z, r24
    6392:	fe 01       	movw	r30, r28
    6394:	e7 5b       	subi	r30, 0xB7	; 183
    6396:	ff 4f       	sbci	r31, 0xFF	; 255
    6398:	80 81       	ld	r24, Z
    639a:	91 81       	ldd	r25, Z+1	; 0x01
    639c:	01 97       	sbiw	r24, 0x01	; 1
    639e:	f1 f7       	brne	.-4      	; 0x639c <Show_Time_Processing+0x1d2>
    63a0:	fe 01       	movw	r30, r28
    63a2:	e7 5b       	subi	r30, 0xB7	; 183
    63a4:	ff 4f       	sbci	r31, 0xFF	; 255
    63a6:	91 83       	std	Z+1, r25	; 0x01
    63a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63aa:	de 01       	movw	r26, r28
    63ac:	a5 5b       	subi	r26, 0xB5	; 181
    63ae:	bf 4f       	sbci	r27, 0xFF	; 255
    63b0:	fe 01       	movw	r30, r28
    63b2:	e5 5b       	subi	r30, 0xB5	; 181
    63b4:	ff 4f       	sbci	r31, 0xFF	; 255
    63b6:	80 81       	ld	r24, Z
    63b8:	91 81       	ldd	r25, Z+1	; 0x01
    63ba:	01 97       	sbiw	r24, 0x01	; 1
    63bc:	11 96       	adiw	r26, 0x01	; 1
    63be:	9c 93       	st	X, r25
    63c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63c2:	fe 01       	movw	r30, r28
    63c4:	e5 5b       	subi	r30, 0xB5	; 181
    63c6:	ff 4f       	sbci	r31, 0xFF	; 255
    63c8:	80 81       	ld	r24, Z
    63ca:	91 81       	ldd	r25, Z+1	; 0x01
    63cc:	00 97       	sbiw	r24, 0x00	; 0
    63ce:	d1 f6       	brne	.-76     	; 0x6384 <Show_Time_Processing+0x1ba>
    63d0:	27 c0       	rjmp	.+78     	; 0x6420 <Show_Time_Processing+0x256>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63d2:	8e 01       	movw	r16, r28
    63d4:	05 5b       	subi	r16, 0xB5	; 181
    63d6:	1f 4f       	sbci	r17, 0xFF	; 255
    63d8:	fe 01       	movw	r30, r28
    63da:	e3 5b       	subi	r30, 0xB3	; 179
    63dc:	ff 4f       	sbci	r31, 0xFF	; 255
    63de:	60 81       	ld	r22, Z
    63e0:	71 81       	ldd	r23, Z+1	; 0x01
    63e2:	82 81       	ldd	r24, Z+2	; 0x02
    63e4:	93 81       	ldd	r25, Z+3	; 0x03
    63e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63ea:	dc 01       	movw	r26, r24
    63ec:	cb 01       	movw	r24, r22
    63ee:	f8 01       	movw	r30, r16
    63f0:	91 83       	std	Z+1, r25	; 0x01
    63f2:	80 83       	st	Z, r24
    63f4:	de 01       	movw	r26, r28
    63f6:	a9 5b       	subi	r26, 0xB9	; 185
    63f8:	bf 4f       	sbci	r27, 0xFF	; 255
    63fa:	fe 01       	movw	r30, r28
    63fc:	e5 5b       	subi	r30, 0xB5	; 181
    63fe:	ff 4f       	sbci	r31, 0xFF	; 255
    6400:	80 81       	ld	r24, Z
    6402:	91 81       	ldd	r25, Z+1	; 0x01
    6404:	8d 93       	st	X+, r24
    6406:	9c 93       	st	X, r25
    6408:	fe 01       	movw	r30, r28
    640a:	e9 5b       	subi	r30, 0xB9	; 185
    640c:	ff 4f       	sbci	r31, 0xFF	; 255
    640e:	80 81       	ld	r24, Z
    6410:	91 81       	ldd	r25, Z+1	; 0x01
    6412:	01 97       	sbiw	r24, 0x01	; 1
    6414:	f1 f7       	brne	.-4      	; 0x6412 <Show_Time_Processing+0x248>
    6416:	fe 01       	movw	r30, r28
    6418:	e9 5b       	subi	r30, 0xB9	; 185
    641a:	ff 4f       	sbci	r31, 0xFF	; 255
    641c:	91 83       	std	Z+1, r25	; 0x01
    641e:	80 83       	st	Z, r24
	_delay_ms(200);
	H_LCD_void_sendIntNum((u16)H_RTC_Void_GetDate().RTC_Month);
    6420:	0e 94 d6 12 	call	0x25ac	; 0x25ac <H_RTC_Void_GetDate>
    6424:	fe 01       	movw	r30, r28
    6426:	e2 5a       	subi	r30, 0xA2	; 162
    6428:	ff 4f       	sbci	r31, 0xFF	; 255
    642a:	60 83       	st	Z, r22
    642c:	fe 01       	movw	r30, r28
    642e:	e1 5a       	subi	r30, 0xA1	; 161
    6430:	ff 4f       	sbci	r31, 0xFF	; 255
    6432:	70 83       	st	Z, r23
    6434:	fe 01       	movw	r30, r28
    6436:	e0 5a       	subi	r30, 0xA0	; 160
    6438:	ff 4f       	sbci	r31, 0xFF	; 255
    643a:	80 83       	st	Z, r24
    643c:	ce 01       	movw	r24, r28
    643e:	88 5a       	subi	r24, 0xA8	; 168
    6440:	9f 4f       	sbci	r25, 0xFF	; 255
    6442:	9e 01       	movw	r18, r28
    6444:	22 5a       	subi	r18, 0xA2	; 162
    6446:	3f 4f       	sbci	r19, 0xFF	; 255
    6448:	a8 96       	adiw	r28, 0x28	; 40
    644a:	9f af       	std	Y+63, r25	; 0x3f
    644c:	8e af       	std	Y+62, r24	; 0x3e
    644e:	a8 97       	sbiw	r28, 0x28	; 40
    6450:	aa 96       	adiw	r28, 0x2a	; 42
    6452:	3f af       	std	Y+63, r19	; 0x3f
    6454:	2e af       	std	Y+62, r18	; 0x3e
    6456:	aa 97       	sbiw	r28, 0x2a	; 42
    6458:	f3 e0       	ldi	r31, 0x03	; 3
    645a:	ab 96       	adiw	r28, 0x2b	; 43
    645c:	ff af       	std	Y+63, r31	; 0x3f
    645e:	ab 97       	sbiw	r28, 0x2b	; 43
    6460:	aa 96       	adiw	r28, 0x2a	; 42
    6462:	ee ad       	ldd	r30, Y+62	; 0x3e
    6464:	ff ad       	ldd	r31, Y+63	; 0x3f
    6466:	aa 97       	sbiw	r28, 0x2a	; 42
    6468:	00 80       	ld	r0, Z
    646a:	aa 96       	adiw	r28, 0x2a	; 42
    646c:	8e ad       	ldd	r24, Y+62	; 0x3e
    646e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6470:	aa 97       	sbiw	r28, 0x2a	; 42
    6472:	01 96       	adiw	r24, 0x01	; 1
    6474:	aa 96       	adiw	r28, 0x2a	; 42
    6476:	9f af       	std	Y+63, r25	; 0x3f
    6478:	8e af       	std	Y+62, r24	; 0x3e
    647a:	aa 97       	sbiw	r28, 0x2a	; 42
    647c:	a8 96       	adiw	r28, 0x28	; 40
    647e:	ee ad       	ldd	r30, Y+62	; 0x3e
    6480:	ff ad       	ldd	r31, Y+63	; 0x3f
    6482:	a8 97       	sbiw	r28, 0x28	; 40
    6484:	00 82       	st	Z, r0
    6486:	a8 96       	adiw	r28, 0x28	; 40
    6488:	8e ad       	ldd	r24, Y+62	; 0x3e
    648a:	9f ad       	ldd	r25, Y+63	; 0x3f
    648c:	a8 97       	sbiw	r28, 0x28	; 40
    648e:	01 96       	adiw	r24, 0x01	; 1
    6490:	a8 96       	adiw	r28, 0x28	; 40
    6492:	9f af       	std	Y+63, r25	; 0x3f
    6494:	8e af       	std	Y+62, r24	; 0x3e
    6496:	a8 97       	sbiw	r28, 0x28	; 40
    6498:	ab 96       	adiw	r28, 0x2b	; 43
    649a:	9f ad       	ldd	r25, Y+63	; 0x3f
    649c:	ab 97       	sbiw	r28, 0x2b	; 43
    649e:	91 50       	subi	r25, 0x01	; 1
    64a0:	ab 96       	adiw	r28, 0x2b	; 43
    64a2:	9f af       	std	Y+63, r25	; 0x3f
    64a4:	ab 97       	sbiw	r28, 0x2b	; 43
    64a6:	ab 96       	adiw	r28, 0x2b	; 43
    64a8:	ef ad       	ldd	r30, Y+63	; 0x3f
    64aa:	ab 97       	sbiw	r28, 0x2b	; 43
    64ac:	ee 23       	and	r30, r30
    64ae:	c1 f6       	brne	.-80     	; 0x6460 <Show_Time_Processing+0x296>
    64b0:	fe 01       	movw	r30, r28
    64b2:	e8 5a       	subi	r30, 0xA8	; 168
    64b4:	ff 4f       	sbci	r31, 0xFF	; 255
    64b6:	81 81       	ldd	r24, Z+1	; 0x01
    64b8:	88 2f       	mov	r24, r24
    64ba:	90 e0       	ldi	r25, 0x00	; 0
    64bc:	a0 e0       	ldi	r26, 0x00	; 0
    64be:	b0 e0       	ldi	r27, 0x00	; 0
    64c0:	bc 01       	movw	r22, r24
    64c2:	cd 01       	movw	r24, r26
    64c4:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>
	H_LCD_void_sendData('/');
    64c8:	8f e2       	ldi	r24, 0x2F	; 47
    64ca:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
    64ce:	fe 01       	movw	r30, r28
    64d0:	ed 5b       	subi	r30, 0xBD	; 189
    64d2:	ff 4f       	sbci	r31, 0xFF	; 255
    64d4:	80 e0       	ldi	r24, 0x00	; 0
    64d6:	90 e0       	ldi	r25, 0x00	; 0
    64d8:	a8 e4       	ldi	r26, 0x48	; 72
    64da:	b3 e4       	ldi	r27, 0x43	; 67
    64dc:	80 83       	st	Z, r24
    64de:	91 83       	std	Z+1, r25	; 0x01
    64e0:	a2 83       	std	Z+2, r26	; 0x02
    64e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64e4:	8e 01       	movw	r16, r28
    64e6:	01 5c       	subi	r16, 0xC1	; 193
    64e8:	1f 4f       	sbci	r17, 0xFF	; 255
    64ea:	fe 01       	movw	r30, r28
    64ec:	ed 5b       	subi	r30, 0xBD	; 189
    64ee:	ff 4f       	sbci	r31, 0xFF	; 255
    64f0:	60 81       	ld	r22, Z
    64f2:	71 81       	ldd	r23, Z+1	; 0x01
    64f4:	82 81       	ldd	r24, Z+2	; 0x02
    64f6:	93 81       	ldd	r25, Z+3	; 0x03
    64f8:	20 e0       	ldi	r18, 0x00	; 0
    64fa:	30 e0       	ldi	r19, 0x00	; 0
    64fc:	4a e7       	ldi	r20, 0x7A	; 122
    64fe:	55 e4       	ldi	r21, 0x45	; 69
    6500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6504:	dc 01       	movw	r26, r24
    6506:	cb 01       	movw	r24, r22
    6508:	f8 01       	movw	r30, r16
    650a:	80 83       	st	Z, r24
    650c:	91 83       	std	Z+1, r25	; 0x01
    650e:	a2 83       	std	Z+2, r26	; 0x02
    6510:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6512:	fe 01       	movw	r30, r28
    6514:	ff 96       	adiw	r30, 0x3f	; 63
    6516:	60 81       	ld	r22, Z
    6518:	71 81       	ldd	r23, Z+1	; 0x01
    651a:	82 81       	ldd	r24, Z+2	; 0x02
    651c:	93 81       	ldd	r25, Z+3	; 0x03
    651e:	20 e0       	ldi	r18, 0x00	; 0
    6520:	30 e0       	ldi	r19, 0x00	; 0
    6522:	40 e8       	ldi	r20, 0x80	; 128
    6524:	5f e3       	ldi	r21, 0x3F	; 63
    6526:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    652a:	88 23       	and	r24, r24
    652c:	2c f4       	brge	.+10     	; 0x6538 <Show_Time_Processing+0x36e>
		__ticks = 1;
    652e:	81 e0       	ldi	r24, 0x01	; 1
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	9e af       	std	Y+62, r25	; 0x3e
    6534:	8d af       	std	Y+61, r24	; 0x3d
    6536:	46 c0       	rjmp	.+140    	; 0x65c4 <Show_Time_Processing+0x3fa>
	else if (__tmp > 65535)
    6538:	fe 01       	movw	r30, r28
    653a:	ff 96       	adiw	r30, 0x3f	; 63
    653c:	60 81       	ld	r22, Z
    653e:	71 81       	ldd	r23, Z+1	; 0x01
    6540:	82 81       	ldd	r24, Z+2	; 0x02
    6542:	93 81       	ldd	r25, Z+3	; 0x03
    6544:	20 e0       	ldi	r18, 0x00	; 0
    6546:	3f ef       	ldi	r19, 0xFF	; 255
    6548:	4f e7       	ldi	r20, 0x7F	; 127
    654a:	57 e4       	ldi	r21, 0x47	; 71
    654c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6550:	18 16       	cp	r1, r24
    6552:	64 f5       	brge	.+88     	; 0x65ac <Show_Time_Processing+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6554:	fe 01       	movw	r30, r28
    6556:	ed 5b       	subi	r30, 0xBD	; 189
    6558:	ff 4f       	sbci	r31, 0xFF	; 255
    655a:	60 81       	ld	r22, Z
    655c:	71 81       	ldd	r23, Z+1	; 0x01
    655e:	82 81       	ldd	r24, Z+2	; 0x02
    6560:	93 81       	ldd	r25, Z+3	; 0x03
    6562:	20 e0       	ldi	r18, 0x00	; 0
    6564:	30 e0       	ldi	r19, 0x00	; 0
    6566:	40 e2       	ldi	r20, 0x20	; 32
    6568:	51 e4       	ldi	r21, 0x41	; 65
    656a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    656e:	dc 01       	movw	r26, r24
    6570:	cb 01       	movw	r24, r22
    6572:	bc 01       	movw	r22, r24
    6574:	cd 01       	movw	r24, r26
    6576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    657a:	dc 01       	movw	r26, r24
    657c:	cb 01       	movw	r24, r22
    657e:	9e af       	std	Y+62, r25	; 0x3e
    6580:	8d af       	std	Y+61, r24	; 0x3d
    6582:	0f c0       	rjmp	.+30     	; 0x65a2 <Show_Time_Processing+0x3d8>
    6584:	80 e9       	ldi	r24, 0x90	; 144
    6586:	91 e0       	ldi	r25, 0x01	; 1
    6588:	9c af       	std	Y+60, r25	; 0x3c
    658a:	8b af       	std	Y+59, r24	; 0x3b
    658c:	8b ad       	ldd	r24, Y+59	; 0x3b
    658e:	9c ad       	ldd	r25, Y+60	; 0x3c
    6590:	01 97       	sbiw	r24, 0x01	; 1
    6592:	f1 f7       	brne	.-4      	; 0x6590 <Show_Time_Processing+0x3c6>
    6594:	9c af       	std	Y+60, r25	; 0x3c
    6596:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6598:	8d ad       	ldd	r24, Y+61	; 0x3d
    659a:	9e ad       	ldd	r25, Y+62	; 0x3e
    659c:	01 97       	sbiw	r24, 0x01	; 1
    659e:	9e af       	std	Y+62, r25	; 0x3e
    65a0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    65a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    65a6:	00 97       	sbiw	r24, 0x00	; 0
    65a8:	69 f7       	brne	.-38     	; 0x6584 <Show_Time_Processing+0x3ba>
    65aa:	16 c0       	rjmp	.+44     	; 0x65d8 <Show_Time_Processing+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65ac:	fe 01       	movw	r30, r28
    65ae:	ff 96       	adiw	r30, 0x3f	; 63
    65b0:	60 81       	ld	r22, Z
    65b2:	71 81       	ldd	r23, Z+1	; 0x01
    65b4:	82 81       	ldd	r24, Z+2	; 0x02
    65b6:	93 81       	ldd	r25, Z+3	; 0x03
    65b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65bc:	dc 01       	movw	r26, r24
    65be:	cb 01       	movw	r24, r22
    65c0:	9e af       	std	Y+62, r25	; 0x3e
    65c2:	8d af       	std	Y+61, r24	; 0x3d
    65c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    65c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    65c8:	9a af       	std	Y+58, r25	; 0x3a
    65ca:	89 af       	std	Y+57, r24	; 0x39
    65cc:	89 ad       	ldd	r24, Y+57	; 0x39
    65ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    65d0:	01 97       	sbiw	r24, 0x01	; 1
    65d2:	f1 f7       	brne	.-4      	; 0x65d0 <Show_Time_Processing+0x406>
    65d4:	9a af       	std	Y+58, r25	; 0x3a
    65d6:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(200);
	H_LCD_void_sendIntNum((u16)H_RTC_Void_GetDate().RTC_Year);
    65d8:	0e 94 d6 12 	call	0x25ac	; 0x25ac <H_RTC_Void_GetDate>
    65dc:	fe 01       	movw	r30, r28
    65de:	e2 5a       	subi	r30, 0xA2	; 162
    65e0:	ff 4f       	sbci	r31, 0xFF	; 255
    65e2:	60 83       	st	Z, r22
    65e4:	fe 01       	movw	r30, r28
    65e6:	e1 5a       	subi	r30, 0xA1	; 161
    65e8:	ff 4f       	sbci	r31, 0xFF	; 255
    65ea:	70 83       	st	Z, r23
    65ec:	fe 01       	movw	r30, r28
    65ee:	e0 5a       	subi	r30, 0xA0	; 160
    65f0:	ff 4f       	sbci	r31, 0xFF	; 255
    65f2:	80 83       	st	Z, r24
    65f4:	ce 01       	movw	r24, r28
    65f6:	8b 5a       	subi	r24, 0xAB	; 171
    65f8:	9f 4f       	sbci	r25, 0xFF	; 255
    65fa:	9e 01       	movw	r18, r28
    65fc:	22 5a       	subi	r18, 0xA2	; 162
    65fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6600:	ad 96       	adiw	r28, 0x2d	; 45
    6602:	9f af       	std	Y+63, r25	; 0x3f
    6604:	8e af       	std	Y+62, r24	; 0x3e
    6606:	ad 97       	sbiw	r28, 0x2d	; 45
    6608:	af 96       	adiw	r28, 0x2f	; 47
    660a:	3f af       	std	Y+63, r19	; 0x3f
    660c:	2e af       	std	Y+62, r18	; 0x3e
    660e:	af 97       	sbiw	r28, 0x2f	; 47
    6610:	f3 e0       	ldi	r31, 0x03	; 3
    6612:	e0 96       	adiw	r28, 0x30	; 48
    6614:	ff af       	std	Y+63, r31	; 0x3f
    6616:	e0 97       	sbiw	r28, 0x30	; 48
    6618:	af 96       	adiw	r28, 0x2f	; 47
    661a:	ee ad       	ldd	r30, Y+62	; 0x3e
    661c:	ff ad       	ldd	r31, Y+63	; 0x3f
    661e:	af 97       	sbiw	r28, 0x2f	; 47
    6620:	00 80       	ld	r0, Z
    6622:	af 96       	adiw	r28, 0x2f	; 47
    6624:	8e ad       	ldd	r24, Y+62	; 0x3e
    6626:	9f ad       	ldd	r25, Y+63	; 0x3f
    6628:	af 97       	sbiw	r28, 0x2f	; 47
    662a:	01 96       	adiw	r24, 0x01	; 1
    662c:	af 96       	adiw	r28, 0x2f	; 47
    662e:	9f af       	std	Y+63, r25	; 0x3f
    6630:	8e af       	std	Y+62, r24	; 0x3e
    6632:	af 97       	sbiw	r28, 0x2f	; 47
    6634:	ad 96       	adiw	r28, 0x2d	; 45
    6636:	ee ad       	ldd	r30, Y+62	; 0x3e
    6638:	ff ad       	ldd	r31, Y+63	; 0x3f
    663a:	ad 97       	sbiw	r28, 0x2d	; 45
    663c:	00 82       	st	Z, r0
    663e:	ad 96       	adiw	r28, 0x2d	; 45
    6640:	8e ad       	ldd	r24, Y+62	; 0x3e
    6642:	9f ad       	ldd	r25, Y+63	; 0x3f
    6644:	ad 97       	sbiw	r28, 0x2d	; 45
    6646:	01 96       	adiw	r24, 0x01	; 1
    6648:	ad 96       	adiw	r28, 0x2d	; 45
    664a:	9f af       	std	Y+63, r25	; 0x3f
    664c:	8e af       	std	Y+62, r24	; 0x3e
    664e:	ad 97       	sbiw	r28, 0x2d	; 45
    6650:	e0 96       	adiw	r28, 0x30	; 48
    6652:	9f ad       	ldd	r25, Y+63	; 0x3f
    6654:	e0 97       	sbiw	r28, 0x30	; 48
    6656:	91 50       	subi	r25, 0x01	; 1
    6658:	e0 96       	adiw	r28, 0x30	; 48
    665a:	9f af       	std	Y+63, r25	; 0x3f
    665c:	e0 97       	sbiw	r28, 0x30	; 48
    665e:	e0 96       	adiw	r28, 0x30	; 48
    6660:	ef ad       	ldd	r30, Y+63	; 0x3f
    6662:	e0 97       	sbiw	r28, 0x30	; 48
    6664:	ee 23       	and	r30, r30
    6666:	c1 f6       	brne	.-80     	; 0x6618 <Show_Time_Processing+0x44e>
    6668:	fe 01       	movw	r30, r28
    666a:	eb 5a       	subi	r30, 0xAB	; 171
    666c:	ff 4f       	sbci	r31, 0xFF	; 255
    666e:	82 81       	ldd	r24, Z+2	; 0x02
    6670:	88 2f       	mov	r24, r24
    6672:	90 e0       	ldi	r25, 0x00	; 0
    6674:	a0 e0       	ldi	r26, 0x00	; 0
    6676:	b0 e0       	ldi	r27, 0x00	; 0
    6678:	bc 01       	movw	r22, r24
    667a:	cd 01       	movw	r24, r26
    667c:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>

		H_LCD_void_gotoXY(3, 9);
    6680:	83 e0       	ldi	r24, 0x03	; 3
    6682:	69 e0       	ldi	r22, 0x09	; 9
    6684:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
		H_LCD_void_sendIntNum((u16)H_RTC_Void_GetTime().RTC_Hours);
    6688:	0e 94 5e 12 	call	0x24bc	; 0x24bc <H_RTC_Void_GetTime>
    668c:	dc 01       	movw	r26, r24
    668e:	cb 01       	movw	r24, r22
    6690:	88 2f       	mov	r24, r24
    6692:	90 e0       	ldi	r25, 0x00	; 0
    6694:	a0 e0       	ldi	r26, 0x00	; 0
    6696:	b0 e0       	ldi	r27, 0x00	; 0
    6698:	bc 01       	movw	r22, r24
    669a:	cd 01       	movw	r24, r26
    669c:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>
		H_LCD_void_sendData(':');
    66a0:	8a e3       	ldi	r24, 0x3A	; 58
    66a2:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
    66a6:	80 e0       	ldi	r24, 0x00	; 0
    66a8:	90 e0       	ldi	r25, 0x00	; 0
    66aa:	a8 e4       	ldi	r26, 0x48	; 72
    66ac:	b3 e4       	ldi	r27, 0x43	; 67
    66ae:	8d ab       	std	Y+53, r24	; 0x35
    66b0:	9e ab       	std	Y+54, r25	; 0x36
    66b2:	af ab       	std	Y+55, r26	; 0x37
    66b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66b6:	6d a9       	ldd	r22, Y+53	; 0x35
    66b8:	7e a9       	ldd	r23, Y+54	; 0x36
    66ba:	8f a9       	ldd	r24, Y+55	; 0x37
    66bc:	98 ad       	ldd	r25, Y+56	; 0x38
    66be:	20 e0       	ldi	r18, 0x00	; 0
    66c0:	30 e0       	ldi	r19, 0x00	; 0
    66c2:	4a e7       	ldi	r20, 0x7A	; 122
    66c4:	55 e4       	ldi	r21, 0x45	; 69
    66c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66ca:	dc 01       	movw	r26, r24
    66cc:	cb 01       	movw	r24, r22
    66ce:	89 ab       	std	Y+49, r24	; 0x31
    66d0:	9a ab       	std	Y+50, r25	; 0x32
    66d2:	ab ab       	std	Y+51, r26	; 0x33
    66d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    66d6:	69 a9       	ldd	r22, Y+49	; 0x31
    66d8:	7a a9       	ldd	r23, Y+50	; 0x32
    66da:	8b a9       	ldd	r24, Y+51	; 0x33
    66dc:	9c a9       	ldd	r25, Y+52	; 0x34
    66de:	20 e0       	ldi	r18, 0x00	; 0
    66e0:	30 e0       	ldi	r19, 0x00	; 0
    66e2:	40 e8       	ldi	r20, 0x80	; 128
    66e4:	5f e3       	ldi	r21, 0x3F	; 63
    66e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    66ea:	88 23       	and	r24, r24
    66ec:	2c f4       	brge	.+10     	; 0x66f8 <Show_Time_Processing+0x52e>
		__ticks = 1;
    66ee:	81 e0       	ldi	r24, 0x01	; 1
    66f0:	90 e0       	ldi	r25, 0x00	; 0
    66f2:	98 ab       	std	Y+48, r25	; 0x30
    66f4:	8f a7       	std	Y+47, r24	; 0x2f
    66f6:	3f c0       	rjmp	.+126    	; 0x6776 <Show_Time_Processing+0x5ac>
	else if (__tmp > 65535)
    66f8:	69 a9       	ldd	r22, Y+49	; 0x31
    66fa:	7a a9       	ldd	r23, Y+50	; 0x32
    66fc:	8b a9       	ldd	r24, Y+51	; 0x33
    66fe:	9c a9       	ldd	r25, Y+52	; 0x34
    6700:	20 e0       	ldi	r18, 0x00	; 0
    6702:	3f ef       	ldi	r19, 0xFF	; 255
    6704:	4f e7       	ldi	r20, 0x7F	; 127
    6706:	57 e4       	ldi	r21, 0x47	; 71
    6708:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    670c:	18 16       	cp	r1, r24
    670e:	4c f5       	brge	.+82     	; 0x6762 <Show_Time_Processing+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6710:	6d a9       	ldd	r22, Y+53	; 0x35
    6712:	7e a9       	ldd	r23, Y+54	; 0x36
    6714:	8f a9       	ldd	r24, Y+55	; 0x37
    6716:	98 ad       	ldd	r25, Y+56	; 0x38
    6718:	20 e0       	ldi	r18, 0x00	; 0
    671a:	30 e0       	ldi	r19, 0x00	; 0
    671c:	40 e2       	ldi	r20, 0x20	; 32
    671e:	51 e4       	ldi	r21, 0x41	; 65
    6720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6724:	dc 01       	movw	r26, r24
    6726:	cb 01       	movw	r24, r22
    6728:	bc 01       	movw	r22, r24
    672a:	cd 01       	movw	r24, r26
    672c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6730:	dc 01       	movw	r26, r24
    6732:	cb 01       	movw	r24, r22
    6734:	98 ab       	std	Y+48, r25	; 0x30
    6736:	8f a7       	std	Y+47, r24	; 0x2f
    6738:	0f c0       	rjmp	.+30     	; 0x6758 <Show_Time_Processing+0x58e>
    673a:	80 e9       	ldi	r24, 0x90	; 144
    673c:	91 e0       	ldi	r25, 0x01	; 1
    673e:	9e a7       	std	Y+46, r25	; 0x2e
    6740:	8d a7       	std	Y+45, r24	; 0x2d
    6742:	8d a5       	ldd	r24, Y+45	; 0x2d
    6744:	9e a5       	ldd	r25, Y+46	; 0x2e
    6746:	01 97       	sbiw	r24, 0x01	; 1
    6748:	f1 f7       	brne	.-4      	; 0x6746 <Show_Time_Processing+0x57c>
    674a:	9e a7       	std	Y+46, r25	; 0x2e
    674c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    674e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6750:	98 a9       	ldd	r25, Y+48	; 0x30
    6752:	01 97       	sbiw	r24, 0x01	; 1
    6754:	98 ab       	std	Y+48, r25	; 0x30
    6756:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6758:	8f a5       	ldd	r24, Y+47	; 0x2f
    675a:	98 a9       	ldd	r25, Y+48	; 0x30
    675c:	00 97       	sbiw	r24, 0x00	; 0
    675e:	69 f7       	brne	.-38     	; 0x673a <Show_Time_Processing+0x570>
    6760:	14 c0       	rjmp	.+40     	; 0x678a <Show_Time_Processing+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6762:	69 a9       	ldd	r22, Y+49	; 0x31
    6764:	7a a9       	ldd	r23, Y+50	; 0x32
    6766:	8b a9       	ldd	r24, Y+51	; 0x33
    6768:	9c a9       	ldd	r25, Y+52	; 0x34
    676a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    676e:	dc 01       	movw	r26, r24
    6770:	cb 01       	movw	r24, r22
    6772:	98 ab       	std	Y+48, r25	; 0x30
    6774:	8f a7       	std	Y+47, r24	; 0x2f
    6776:	8f a5       	ldd	r24, Y+47	; 0x2f
    6778:	98 a9       	ldd	r25, Y+48	; 0x30
    677a:	9c a7       	std	Y+44, r25	; 0x2c
    677c:	8b a7       	std	Y+43, r24	; 0x2b
    677e:	8b a5       	ldd	r24, Y+43	; 0x2b
    6780:	9c a5       	ldd	r25, Y+44	; 0x2c
    6782:	01 97       	sbiw	r24, 0x01	; 1
    6784:	f1 f7       	brne	.-4      	; 0x6782 <Show_Time_Processing+0x5b8>
    6786:	9c a7       	std	Y+44, r25	; 0x2c
    6788:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(200);
		H_LCD_void_sendIntNum((u16)H_RTC_Void_GetTime().RTC_Minutes);
    678a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <H_RTC_Void_GetTime>
    678e:	dc 01       	movw	r26, r24
    6790:	cb 01       	movw	r24, r22
    6792:	89 2f       	mov	r24, r25
    6794:	88 2f       	mov	r24, r24
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	a0 e0       	ldi	r26, 0x00	; 0
    679a:	b0 e0       	ldi	r27, 0x00	; 0
    679c:	bc 01       	movw	r22, r24
    679e:	cd 01       	movw	r24, r26
    67a0:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>
		H_LCD_void_sendData(':');
    67a4:	8a e3       	ldi	r24, 0x3A	; 58
    67a6:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
    67aa:	80 e0       	ldi	r24, 0x00	; 0
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	a8 e4       	ldi	r26, 0x48	; 72
    67b0:	b3 e4       	ldi	r27, 0x43	; 67
    67b2:	8f a3       	std	Y+39, r24	; 0x27
    67b4:	98 a7       	std	Y+40, r25	; 0x28
    67b6:	a9 a7       	std	Y+41, r26	; 0x29
    67b8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67ba:	6f a1       	ldd	r22, Y+39	; 0x27
    67bc:	78 a5       	ldd	r23, Y+40	; 0x28
    67be:	89 a5       	ldd	r24, Y+41	; 0x29
    67c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    67c2:	20 e0       	ldi	r18, 0x00	; 0
    67c4:	30 e0       	ldi	r19, 0x00	; 0
    67c6:	4a e7       	ldi	r20, 0x7A	; 122
    67c8:	55 e4       	ldi	r21, 0x45	; 69
    67ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    67ce:	dc 01       	movw	r26, r24
    67d0:	cb 01       	movw	r24, r22
    67d2:	8b a3       	std	Y+35, r24	; 0x23
    67d4:	9c a3       	std	Y+36, r25	; 0x24
    67d6:	ad a3       	std	Y+37, r26	; 0x25
    67d8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    67da:	6b a1       	ldd	r22, Y+35	; 0x23
    67dc:	7c a1       	ldd	r23, Y+36	; 0x24
    67de:	8d a1       	ldd	r24, Y+37	; 0x25
    67e0:	9e a1       	ldd	r25, Y+38	; 0x26
    67e2:	20 e0       	ldi	r18, 0x00	; 0
    67e4:	30 e0       	ldi	r19, 0x00	; 0
    67e6:	40 e8       	ldi	r20, 0x80	; 128
    67e8:	5f e3       	ldi	r21, 0x3F	; 63
    67ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    67ee:	88 23       	and	r24, r24
    67f0:	2c f4       	brge	.+10     	; 0x67fc <Show_Time_Processing+0x632>
		__ticks = 1;
    67f2:	81 e0       	ldi	r24, 0x01	; 1
    67f4:	90 e0       	ldi	r25, 0x00	; 0
    67f6:	9a a3       	std	Y+34, r25	; 0x22
    67f8:	89 a3       	std	Y+33, r24	; 0x21
    67fa:	3f c0       	rjmp	.+126    	; 0x687a <Show_Time_Processing+0x6b0>
	else if (__tmp > 65535)
    67fc:	6b a1       	ldd	r22, Y+35	; 0x23
    67fe:	7c a1       	ldd	r23, Y+36	; 0x24
    6800:	8d a1       	ldd	r24, Y+37	; 0x25
    6802:	9e a1       	ldd	r25, Y+38	; 0x26
    6804:	20 e0       	ldi	r18, 0x00	; 0
    6806:	3f ef       	ldi	r19, 0xFF	; 255
    6808:	4f e7       	ldi	r20, 0x7F	; 127
    680a:	57 e4       	ldi	r21, 0x47	; 71
    680c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6810:	18 16       	cp	r1, r24
    6812:	4c f5       	brge	.+82     	; 0x6866 <Show_Time_Processing+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6814:	6f a1       	ldd	r22, Y+39	; 0x27
    6816:	78 a5       	ldd	r23, Y+40	; 0x28
    6818:	89 a5       	ldd	r24, Y+41	; 0x29
    681a:	9a a5       	ldd	r25, Y+42	; 0x2a
    681c:	20 e0       	ldi	r18, 0x00	; 0
    681e:	30 e0       	ldi	r19, 0x00	; 0
    6820:	40 e2       	ldi	r20, 0x20	; 32
    6822:	51 e4       	ldi	r21, 0x41	; 65
    6824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6828:	dc 01       	movw	r26, r24
    682a:	cb 01       	movw	r24, r22
    682c:	bc 01       	movw	r22, r24
    682e:	cd 01       	movw	r24, r26
    6830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6834:	dc 01       	movw	r26, r24
    6836:	cb 01       	movw	r24, r22
    6838:	9a a3       	std	Y+34, r25	; 0x22
    683a:	89 a3       	std	Y+33, r24	; 0x21
    683c:	0f c0       	rjmp	.+30     	; 0x685c <Show_Time_Processing+0x692>
    683e:	80 e9       	ldi	r24, 0x90	; 144
    6840:	91 e0       	ldi	r25, 0x01	; 1
    6842:	98 a3       	std	Y+32, r25	; 0x20
    6844:	8f 8f       	std	Y+31, r24	; 0x1f
    6846:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6848:	98 a1       	ldd	r25, Y+32	; 0x20
    684a:	01 97       	sbiw	r24, 0x01	; 1
    684c:	f1 f7       	brne	.-4      	; 0x684a <Show_Time_Processing+0x680>
    684e:	98 a3       	std	Y+32, r25	; 0x20
    6850:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6852:	89 a1       	ldd	r24, Y+33	; 0x21
    6854:	9a a1       	ldd	r25, Y+34	; 0x22
    6856:	01 97       	sbiw	r24, 0x01	; 1
    6858:	9a a3       	std	Y+34, r25	; 0x22
    685a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    685c:	89 a1       	ldd	r24, Y+33	; 0x21
    685e:	9a a1       	ldd	r25, Y+34	; 0x22
    6860:	00 97       	sbiw	r24, 0x00	; 0
    6862:	69 f7       	brne	.-38     	; 0x683e <Show_Time_Processing+0x674>
    6864:	14 c0       	rjmp	.+40     	; 0x688e <Show_Time_Processing+0x6c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6866:	6b a1       	ldd	r22, Y+35	; 0x23
    6868:	7c a1       	ldd	r23, Y+36	; 0x24
    686a:	8d a1       	ldd	r24, Y+37	; 0x25
    686c:	9e a1       	ldd	r25, Y+38	; 0x26
    686e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6872:	dc 01       	movw	r26, r24
    6874:	cb 01       	movw	r24, r22
    6876:	9a a3       	std	Y+34, r25	; 0x22
    6878:	89 a3       	std	Y+33, r24	; 0x21
    687a:	89 a1       	ldd	r24, Y+33	; 0x21
    687c:	9a a1       	ldd	r25, Y+34	; 0x22
    687e:	9e 8f       	std	Y+30, r25	; 0x1e
    6880:	8d 8f       	std	Y+29, r24	; 0x1d
    6882:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6884:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6886:	01 97       	sbiw	r24, 0x01	; 1
    6888:	f1 f7       	brne	.-4      	; 0x6886 <Show_Time_Processing+0x6bc>
    688a:	9e 8f       	std	Y+30, r25	; 0x1e
    688c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
		H_LCD_void_sendIntNum((u16)H_RTC_Void_GetTime().RTC_Seconed);
    688e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <H_RTC_Void_GetTime>
    6892:	dc 01       	movw	r26, r24
    6894:	cb 01       	movw	r24, r22
    6896:	8a 2f       	mov	r24, r26
    6898:	88 2f       	mov	r24, r24
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	a0 e0       	ldi	r26, 0x00	; 0
    689e:	b0 e0       	ldi	r27, 0x00	; 0
    68a0:	bc 01       	movw	r22, r24
    68a2:	cd 01       	movw	r24, r26
    68a4:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>
    68a8:	80 e0       	ldi	r24, 0x00	; 0
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	a8 e4       	ldi	r26, 0x48	; 72
    68ae:	b3 e4       	ldi	r27, 0x43	; 67
    68b0:	89 8f       	std	Y+25, r24	; 0x19
    68b2:	9a 8f       	std	Y+26, r25	; 0x1a
    68b4:	ab 8f       	std	Y+27, r26	; 0x1b
    68b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68b8:	69 8d       	ldd	r22, Y+25	; 0x19
    68ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    68bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    68be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    68c0:	20 e0       	ldi	r18, 0x00	; 0
    68c2:	30 e0       	ldi	r19, 0x00	; 0
    68c4:	4a e7       	ldi	r20, 0x7A	; 122
    68c6:	55 e4       	ldi	r21, 0x45	; 69
    68c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68cc:	dc 01       	movw	r26, r24
    68ce:	cb 01       	movw	r24, r22
    68d0:	8d 8b       	std	Y+21, r24	; 0x15
    68d2:	9e 8b       	std	Y+22, r25	; 0x16
    68d4:	af 8b       	std	Y+23, r26	; 0x17
    68d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    68d8:	6d 89       	ldd	r22, Y+21	; 0x15
    68da:	7e 89       	ldd	r23, Y+22	; 0x16
    68dc:	8f 89       	ldd	r24, Y+23	; 0x17
    68de:	98 8d       	ldd	r25, Y+24	; 0x18
    68e0:	20 e0       	ldi	r18, 0x00	; 0
    68e2:	30 e0       	ldi	r19, 0x00	; 0
    68e4:	40 e8       	ldi	r20, 0x80	; 128
    68e6:	5f e3       	ldi	r21, 0x3F	; 63
    68e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    68ec:	88 23       	and	r24, r24
    68ee:	2c f4       	brge	.+10     	; 0x68fa <Show_Time_Processing+0x730>
		__ticks = 1;
    68f0:	81 e0       	ldi	r24, 0x01	; 1
    68f2:	90 e0       	ldi	r25, 0x00	; 0
    68f4:	9c 8b       	std	Y+20, r25	; 0x14
    68f6:	8b 8b       	std	Y+19, r24	; 0x13
    68f8:	3f c0       	rjmp	.+126    	; 0x6978 <Show_Time_Processing+0x7ae>
	else if (__tmp > 65535)
    68fa:	6d 89       	ldd	r22, Y+21	; 0x15
    68fc:	7e 89       	ldd	r23, Y+22	; 0x16
    68fe:	8f 89       	ldd	r24, Y+23	; 0x17
    6900:	98 8d       	ldd	r25, Y+24	; 0x18
    6902:	20 e0       	ldi	r18, 0x00	; 0
    6904:	3f ef       	ldi	r19, 0xFF	; 255
    6906:	4f e7       	ldi	r20, 0x7F	; 127
    6908:	57 e4       	ldi	r21, 0x47	; 71
    690a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    690e:	18 16       	cp	r1, r24
    6910:	4c f5       	brge	.+82     	; 0x6964 <Show_Time_Processing+0x79a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6912:	69 8d       	ldd	r22, Y+25	; 0x19
    6914:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6918:	9c 8d       	ldd	r25, Y+28	; 0x1c
    691a:	20 e0       	ldi	r18, 0x00	; 0
    691c:	30 e0       	ldi	r19, 0x00	; 0
    691e:	40 e2       	ldi	r20, 0x20	; 32
    6920:	51 e4       	ldi	r21, 0x41	; 65
    6922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6926:	dc 01       	movw	r26, r24
    6928:	cb 01       	movw	r24, r22
    692a:	bc 01       	movw	r22, r24
    692c:	cd 01       	movw	r24, r26
    692e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6932:	dc 01       	movw	r26, r24
    6934:	cb 01       	movw	r24, r22
    6936:	9c 8b       	std	Y+20, r25	; 0x14
    6938:	8b 8b       	std	Y+19, r24	; 0x13
    693a:	0f c0       	rjmp	.+30     	; 0x695a <Show_Time_Processing+0x790>
    693c:	80 e9       	ldi	r24, 0x90	; 144
    693e:	91 e0       	ldi	r25, 0x01	; 1
    6940:	9a 8b       	std	Y+18, r25	; 0x12
    6942:	89 8b       	std	Y+17, r24	; 0x11
    6944:	89 89       	ldd	r24, Y+17	; 0x11
    6946:	9a 89       	ldd	r25, Y+18	; 0x12
    6948:	01 97       	sbiw	r24, 0x01	; 1
    694a:	f1 f7       	brne	.-4      	; 0x6948 <Show_Time_Processing+0x77e>
    694c:	9a 8b       	std	Y+18, r25	; 0x12
    694e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6950:	8b 89       	ldd	r24, Y+19	; 0x13
    6952:	9c 89       	ldd	r25, Y+20	; 0x14
    6954:	01 97       	sbiw	r24, 0x01	; 1
    6956:	9c 8b       	std	Y+20, r25	; 0x14
    6958:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    695a:	8b 89       	ldd	r24, Y+19	; 0x13
    695c:	9c 89       	ldd	r25, Y+20	; 0x14
    695e:	00 97       	sbiw	r24, 0x00	; 0
    6960:	69 f7       	brne	.-38     	; 0x693c <Show_Time_Processing+0x772>
    6962:	14 c0       	rjmp	.+40     	; 0x698c <Show_Time_Processing+0x7c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6964:	6d 89       	ldd	r22, Y+21	; 0x15
    6966:	7e 89       	ldd	r23, Y+22	; 0x16
    6968:	8f 89       	ldd	r24, Y+23	; 0x17
    696a:	98 8d       	ldd	r25, Y+24	; 0x18
    696c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6970:	dc 01       	movw	r26, r24
    6972:	cb 01       	movw	r24, r22
    6974:	9c 8b       	std	Y+20, r25	; 0x14
    6976:	8b 8b       	std	Y+19, r24	; 0x13
    6978:	8b 89       	ldd	r24, Y+19	; 0x13
    697a:	9c 89       	ldd	r25, Y+20	; 0x14
    697c:	98 8b       	std	Y+16, r25	; 0x10
    697e:	8f 87       	std	Y+15, r24	; 0x0f
    6980:	8f 85       	ldd	r24, Y+15	; 0x0f
    6982:	98 89       	ldd	r25, Y+16	; 0x10
    6984:	01 97       	sbiw	r24, 0x01	; 1
    6986:	f1 f7       	brne	.-4      	; 0x6984 <Show_Time_Processing+0x7ba>
    6988:	98 8b       	std	Y+16, r25	; 0x10
    698a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		if(H_RTC_Void_GetTime().RTC_DayTime == RTC_AM)
    698c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <H_RTC_Void_GetTime>
    6990:	dc 01       	movw	r26, r24
    6992:	cb 01       	movw	r24, r22
    6994:	8b 2f       	mov	r24, r27
    6996:	88 32       	cpi	r24, 0x28	; 40
    6998:	49 f4       	brne	.+18     	; 0x69ac <Show_Time_Processing+0x7e2>
		{
			H_LCD_void_gotoXY(3, 16);
    699a:	83 e0       	ldi	r24, 0x03	; 3
    699c:	60 e1       	ldi	r22, 0x10	; 16
    699e:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
			H_LCD_void_sendString(" AM");
    69a2:	86 e7       	ldi	r24, 0x76	; 118
    69a4:	92 e0       	ldi	r25, 0x02	; 2
    69a6:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    69aa:	0f c0       	rjmp	.+30     	; 0x69ca <Show_Time_Processing+0x800>
		}
		else if(H_RTC_Void_GetTime().RTC_DayTime == RTC_PM)
    69ac:	0e 94 5e 12 	call	0x24bc	; 0x24bc <H_RTC_Void_GetTime>
    69b0:	dc 01       	movw	r26, r24
    69b2:	cb 01       	movw	r24, r22
    69b4:	8b 2f       	mov	r24, r27
    69b6:	8c 33       	cpi	r24, 0x3C	; 60
    69b8:	41 f4       	brne	.+16     	; 0x69ca <Show_Time_Processing+0x800>
		{
			H_LCD_void_gotoXY(3, 16);
    69ba:	83 e0       	ldi	r24, 0x03	; 3
    69bc:	60 e1       	ldi	r22, 0x10	; 16
    69be:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
			H_LCD_void_sendString(" PM");
    69c2:	8a e7       	ldi	r24, 0x7A	; 122
    69c4:	92 e0       	ldi	r25, 0x02	; 2
    69c6:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    69ca:	80 e0       	ldi	r24, 0x00	; 0
    69cc:	90 e0       	ldi	r25, 0x00	; 0
    69ce:	a8 e4       	ldi	r26, 0x48	; 72
    69d0:	b3 e4       	ldi	r27, 0x43	; 67
    69d2:	8b 87       	std	Y+11, r24	; 0x0b
    69d4:	9c 87       	std	Y+12, r25	; 0x0c
    69d6:	ad 87       	std	Y+13, r26	; 0x0d
    69d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69da:	6b 85       	ldd	r22, Y+11	; 0x0b
    69dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    69de:	8d 85       	ldd	r24, Y+13	; 0x0d
    69e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    69e2:	20 e0       	ldi	r18, 0x00	; 0
    69e4:	30 e0       	ldi	r19, 0x00	; 0
    69e6:	4a e7       	ldi	r20, 0x7A	; 122
    69e8:	55 e4       	ldi	r21, 0x45	; 69
    69ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69ee:	dc 01       	movw	r26, r24
    69f0:	cb 01       	movw	r24, r22
    69f2:	8f 83       	std	Y+7, r24	; 0x07
    69f4:	98 87       	std	Y+8, r25	; 0x08
    69f6:	a9 87       	std	Y+9, r26	; 0x09
    69f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    69fa:	6f 81       	ldd	r22, Y+7	; 0x07
    69fc:	78 85       	ldd	r23, Y+8	; 0x08
    69fe:	89 85       	ldd	r24, Y+9	; 0x09
    6a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a02:	20 e0       	ldi	r18, 0x00	; 0
    6a04:	30 e0       	ldi	r19, 0x00	; 0
    6a06:	40 e8       	ldi	r20, 0x80	; 128
    6a08:	5f e3       	ldi	r21, 0x3F	; 63
    6a0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a0e:	88 23       	and	r24, r24
    6a10:	2c f4       	brge	.+10     	; 0x6a1c <Show_Time_Processing+0x852>
		__ticks = 1;
    6a12:	81 e0       	ldi	r24, 0x01	; 1
    6a14:	90 e0       	ldi	r25, 0x00	; 0
    6a16:	9e 83       	std	Y+6, r25	; 0x06
    6a18:	8d 83       	std	Y+5, r24	; 0x05
    6a1a:	3f c0       	rjmp	.+126    	; 0x6a9a <Show_Time_Processing+0x8d0>
	else if (__tmp > 65535)
    6a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    6a1e:	78 85       	ldd	r23, Y+8	; 0x08
    6a20:	89 85       	ldd	r24, Y+9	; 0x09
    6a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a24:	20 e0       	ldi	r18, 0x00	; 0
    6a26:	3f ef       	ldi	r19, 0xFF	; 255
    6a28:	4f e7       	ldi	r20, 0x7F	; 127
    6a2a:	57 e4       	ldi	r21, 0x47	; 71
    6a2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a30:	18 16       	cp	r1, r24
    6a32:	4c f5       	brge	.+82     	; 0x6a86 <Show_Time_Processing+0x8bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a3c:	20 e0       	ldi	r18, 0x00	; 0
    6a3e:	30 e0       	ldi	r19, 0x00	; 0
    6a40:	40 e2       	ldi	r20, 0x20	; 32
    6a42:	51 e4       	ldi	r21, 0x41	; 65
    6a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a48:	dc 01       	movw	r26, r24
    6a4a:	cb 01       	movw	r24, r22
    6a4c:	bc 01       	movw	r22, r24
    6a4e:	cd 01       	movw	r24, r26
    6a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a54:	dc 01       	movw	r26, r24
    6a56:	cb 01       	movw	r24, r22
    6a58:	9e 83       	std	Y+6, r25	; 0x06
    6a5a:	8d 83       	std	Y+5, r24	; 0x05
    6a5c:	0f c0       	rjmp	.+30     	; 0x6a7c <Show_Time_Processing+0x8b2>
    6a5e:	80 e9       	ldi	r24, 0x90	; 144
    6a60:	91 e0       	ldi	r25, 0x01	; 1
    6a62:	9c 83       	std	Y+4, r25	; 0x04
    6a64:	8b 83       	std	Y+3, r24	; 0x03
    6a66:	8b 81       	ldd	r24, Y+3	; 0x03
    6a68:	9c 81       	ldd	r25, Y+4	; 0x04
    6a6a:	01 97       	sbiw	r24, 0x01	; 1
    6a6c:	f1 f7       	brne	.-4      	; 0x6a6a <Show_Time_Processing+0x8a0>
    6a6e:	9c 83       	std	Y+4, r25	; 0x04
    6a70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a72:	8d 81       	ldd	r24, Y+5	; 0x05
    6a74:	9e 81       	ldd	r25, Y+6	; 0x06
    6a76:	01 97       	sbiw	r24, 0x01	; 1
    6a78:	9e 83       	std	Y+6, r25	; 0x06
    6a7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    6a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    6a80:	00 97       	sbiw	r24, 0x00	; 0
    6a82:	69 f7       	brne	.-38     	; 0x6a5e <Show_Time_Processing+0x894>
    6a84:	14 c0       	rjmp	.+40     	; 0x6aae <Show_Time_Processing+0x8e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a86:	6f 81       	ldd	r22, Y+7	; 0x07
    6a88:	78 85       	ldd	r23, Y+8	; 0x08
    6a8a:	89 85       	ldd	r24, Y+9	; 0x09
    6a8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a92:	dc 01       	movw	r26, r24
    6a94:	cb 01       	movw	r24, r22
    6a96:	9e 83       	std	Y+6, r25	; 0x06
    6a98:	8d 83       	std	Y+5, r24	; 0x05
    6a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    6a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    6a9e:	9a 83       	std	Y+2, r25	; 0x02
    6aa0:	89 83       	std	Y+1, r24	; 0x01
    6aa2:	89 81       	ldd	r24, Y+1	; 0x01
    6aa4:	9a 81       	ldd	r25, Y+2	; 0x02
    6aa6:	01 97       	sbiw	r24, 0x01	; 1
    6aa8:	f1 f7       	brne	.-4      	; 0x6aa6 <Show_Time_Processing+0x8dc>
    6aaa:	9a 83       	std	Y+2, r25	; 0x02
    6aac:	89 83       	std	Y+1, r24	; 0x01
		}
		_delay_ms(200);
}
    6aae:	c1 59       	subi	r28, 0x91	; 145
    6ab0:	df 4f       	sbci	r29, 0xFF	; 255
    6ab2:	0f b6       	in	r0, 0x3f	; 63
    6ab4:	f8 94       	cli
    6ab6:	de bf       	out	0x3e, r29	; 62
    6ab8:	0f be       	out	0x3f, r0	; 63
    6aba:	cd bf       	out	0x3d, r28	; 61
    6abc:	cf 91       	pop	r28
    6abe:	df 91       	pop	r29
    6ac0:	1f 91       	pop	r17
    6ac2:	0f 91       	pop	r16
    6ac4:	08 95       	ret

00006ac6 <Save_Time_Processing>:

void Save_Time_Processing(void)
{
    6ac6:	0f 93       	push	r16
    6ac8:	1f 93       	push	r17
    6aca:	df 93       	push	r29
    6acc:	cf 93       	push	r28
    6ace:	cd b7       	in	r28, 0x3d	; 61
    6ad0:	de b7       	in	r29, 0x3e	; 62
    6ad2:	cd 57       	subi	r28, 0x7D	; 125
    6ad4:	d0 40       	sbci	r29, 0x00	; 0
    6ad6:	0f b6       	in	r0, 0x3f	; 63
    6ad8:	f8 94       	cli
    6ada:	de bf       	out	0x3e, r29	; 62
    6adc:	0f be       	out	0x3f, r0	; 63
    6ade:	cd bf       	out	0x3d, r28	; 61
   H_LCD_void_gotoXY(2,0);
    6ae0:	82 e0       	ldi	r24, 0x02	; 2
    6ae2:	60 e0       	ldi	r22, 0x00	; 0
    6ae4:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
   H_EEPROM_Void_WriteByte(20,H_RTC_Void_GetTime().RTC_Hours);
    6ae8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <H_RTC_Void_GetTime>
    6aec:	dc 01       	movw	r26, r24
    6aee:	cb 01       	movw	r24, r22
    6af0:	28 2f       	mov	r18, r24
    6af2:	84 e1       	ldi	r24, 0x14	; 20
    6af4:	90 e0       	ldi	r25, 0x00	; 0
    6af6:	62 2f       	mov	r22, r18
    6af8:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <H_EEPROM_Void_WriteByte>
    6afc:	fe 01       	movw	r30, r28
    6afe:	e1 5a       	subi	r30, 0xA1	; 161
    6b00:	ff 4f       	sbci	r31, 0xFF	; 255
    6b02:	80 e0       	ldi	r24, 0x00	; 0
    6b04:	90 e0       	ldi	r25, 0x00	; 0
    6b06:	a8 e4       	ldi	r26, 0x48	; 72
    6b08:	b3 e4       	ldi	r27, 0x43	; 67
    6b0a:	80 83       	st	Z, r24
    6b0c:	91 83       	std	Z+1, r25	; 0x01
    6b0e:	a2 83       	std	Z+2, r26	; 0x02
    6b10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6b12:	8e 01       	movw	r16, r28
    6b14:	05 5a       	subi	r16, 0xA5	; 165
    6b16:	1f 4f       	sbci	r17, 0xFF	; 255
    6b18:	fe 01       	movw	r30, r28
    6b1a:	e1 5a       	subi	r30, 0xA1	; 161
    6b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    6b1e:	60 81       	ld	r22, Z
    6b20:	71 81       	ldd	r23, Z+1	; 0x01
    6b22:	82 81       	ldd	r24, Z+2	; 0x02
    6b24:	93 81       	ldd	r25, Z+3	; 0x03
    6b26:	20 e0       	ldi	r18, 0x00	; 0
    6b28:	30 e0       	ldi	r19, 0x00	; 0
    6b2a:	4a e7       	ldi	r20, 0x7A	; 122
    6b2c:	55 e4       	ldi	r21, 0x45	; 69
    6b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b32:	dc 01       	movw	r26, r24
    6b34:	cb 01       	movw	r24, r22
    6b36:	f8 01       	movw	r30, r16
    6b38:	80 83       	st	Z, r24
    6b3a:	91 83       	std	Z+1, r25	; 0x01
    6b3c:	a2 83       	std	Z+2, r26	; 0x02
    6b3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6b40:	fe 01       	movw	r30, r28
    6b42:	e5 5a       	subi	r30, 0xA5	; 165
    6b44:	ff 4f       	sbci	r31, 0xFF	; 255
    6b46:	60 81       	ld	r22, Z
    6b48:	71 81       	ldd	r23, Z+1	; 0x01
    6b4a:	82 81       	ldd	r24, Z+2	; 0x02
    6b4c:	93 81       	ldd	r25, Z+3	; 0x03
    6b4e:	20 e0       	ldi	r18, 0x00	; 0
    6b50:	30 e0       	ldi	r19, 0x00	; 0
    6b52:	40 e8       	ldi	r20, 0x80	; 128
    6b54:	5f e3       	ldi	r21, 0x3F	; 63
    6b56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6b5a:	88 23       	and	r24, r24
    6b5c:	44 f4       	brge	.+16     	; 0x6b6e <Save_Time_Processing+0xa8>
		__ticks = 1;
    6b5e:	fe 01       	movw	r30, r28
    6b60:	e7 5a       	subi	r30, 0xA7	; 167
    6b62:	ff 4f       	sbci	r31, 0xFF	; 255
    6b64:	81 e0       	ldi	r24, 0x01	; 1
    6b66:	90 e0       	ldi	r25, 0x00	; 0
    6b68:	91 83       	std	Z+1, r25	; 0x01
    6b6a:	80 83       	st	Z, r24
    6b6c:	64 c0       	rjmp	.+200    	; 0x6c36 <Save_Time_Processing+0x170>
	else if (__tmp > 65535)
    6b6e:	fe 01       	movw	r30, r28
    6b70:	e5 5a       	subi	r30, 0xA5	; 165
    6b72:	ff 4f       	sbci	r31, 0xFF	; 255
    6b74:	60 81       	ld	r22, Z
    6b76:	71 81       	ldd	r23, Z+1	; 0x01
    6b78:	82 81       	ldd	r24, Z+2	; 0x02
    6b7a:	93 81       	ldd	r25, Z+3	; 0x03
    6b7c:	20 e0       	ldi	r18, 0x00	; 0
    6b7e:	3f ef       	ldi	r19, 0xFF	; 255
    6b80:	4f e7       	ldi	r20, 0x7F	; 127
    6b82:	57 e4       	ldi	r21, 0x47	; 71
    6b84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6b88:	18 16       	cp	r1, r24
    6b8a:	0c f0       	brlt	.+2      	; 0x6b8e <Save_Time_Processing+0xc8>
    6b8c:	43 c0       	rjmp	.+134    	; 0x6c14 <Save_Time_Processing+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b8e:	fe 01       	movw	r30, r28
    6b90:	e1 5a       	subi	r30, 0xA1	; 161
    6b92:	ff 4f       	sbci	r31, 0xFF	; 255
    6b94:	60 81       	ld	r22, Z
    6b96:	71 81       	ldd	r23, Z+1	; 0x01
    6b98:	82 81       	ldd	r24, Z+2	; 0x02
    6b9a:	93 81       	ldd	r25, Z+3	; 0x03
    6b9c:	20 e0       	ldi	r18, 0x00	; 0
    6b9e:	30 e0       	ldi	r19, 0x00	; 0
    6ba0:	40 e2       	ldi	r20, 0x20	; 32
    6ba2:	51 e4       	ldi	r21, 0x41	; 65
    6ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ba8:	dc 01       	movw	r26, r24
    6baa:	cb 01       	movw	r24, r22
    6bac:	8e 01       	movw	r16, r28
    6bae:	07 5a       	subi	r16, 0xA7	; 167
    6bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    6bb2:	bc 01       	movw	r22, r24
    6bb4:	cd 01       	movw	r24, r26
    6bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6bba:	dc 01       	movw	r26, r24
    6bbc:	cb 01       	movw	r24, r22
    6bbe:	f8 01       	movw	r30, r16
    6bc0:	91 83       	std	Z+1, r25	; 0x01
    6bc2:	80 83       	st	Z, r24
    6bc4:	1f c0       	rjmp	.+62     	; 0x6c04 <Save_Time_Processing+0x13e>
    6bc6:	fe 01       	movw	r30, r28
    6bc8:	e9 5a       	subi	r30, 0xA9	; 169
    6bca:	ff 4f       	sbci	r31, 0xFF	; 255
    6bcc:	80 e9       	ldi	r24, 0x90	; 144
    6bce:	91 e0       	ldi	r25, 0x01	; 1
    6bd0:	91 83       	std	Z+1, r25	; 0x01
    6bd2:	80 83       	st	Z, r24
    6bd4:	fe 01       	movw	r30, r28
    6bd6:	e9 5a       	subi	r30, 0xA9	; 169
    6bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    6bda:	80 81       	ld	r24, Z
    6bdc:	91 81       	ldd	r25, Z+1	; 0x01
    6bde:	01 97       	sbiw	r24, 0x01	; 1
    6be0:	f1 f7       	brne	.-4      	; 0x6bde <Save_Time_Processing+0x118>
    6be2:	fe 01       	movw	r30, r28
    6be4:	e9 5a       	subi	r30, 0xA9	; 169
    6be6:	ff 4f       	sbci	r31, 0xFF	; 255
    6be8:	91 83       	std	Z+1, r25	; 0x01
    6bea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6bec:	de 01       	movw	r26, r28
    6bee:	a7 5a       	subi	r26, 0xA7	; 167
    6bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    6bf2:	fe 01       	movw	r30, r28
    6bf4:	e7 5a       	subi	r30, 0xA7	; 167
    6bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    6bf8:	80 81       	ld	r24, Z
    6bfa:	91 81       	ldd	r25, Z+1	; 0x01
    6bfc:	01 97       	sbiw	r24, 0x01	; 1
    6bfe:	11 96       	adiw	r26, 0x01	; 1
    6c00:	9c 93       	st	X, r25
    6c02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c04:	fe 01       	movw	r30, r28
    6c06:	e7 5a       	subi	r30, 0xA7	; 167
    6c08:	ff 4f       	sbci	r31, 0xFF	; 255
    6c0a:	80 81       	ld	r24, Z
    6c0c:	91 81       	ldd	r25, Z+1	; 0x01
    6c0e:	00 97       	sbiw	r24, 0x00	; 0
    6c10:	d1 f6       	brne	.-76     	; 0x6bc6 <Save_Time_Processing+0x100>
    6c12:	27 c0       	rjmp	.+78     	; 0x6c62 <Save_Time_Processing+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c14:	8e 01       	movw	r16, r28
    6c16:	07 5a       	subi	r16, 0xA7	; 167
    6c18:	1f 4f       	sbci	r17, 0xFF	; 255
    6c1a:	fe 01       	movw	r30, r28
    6c1c:	e5 5a       	subi	r30, 0xA5	; 165
    6c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c20:	60 81       	ld	r22, Z
    6c22:	71 81       	ldd	r23, Z+1	; 0x01
    6c24:	82 81       	ldd	r24, Z+2	; 0x02
    6c26:	93 81       	ldd	r25, Z+3	; 0x03
    6c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c2c:	dc 01       	movw	r26, r24
    6c2e:	cb 01       	movw	r24, r22
    6c30:	f8 01       	movw	r30, r16
    6c32:	91 83       	std	Z+1, r25	; 0x01
    6c34:	80 83       	st	Z, r24
    6c36:	de 01       	movw	r26, r28
    6c38:	ab 5a       	subi	r26, 0xAB	; 171
    6c3a:	bf 4f       	sbci	r27, 0xFF	; 255
    6c3c:	fe 01       	movw	r30, r28
    6c3e:	e7 5a       	subi	r30, 0xA7	; 167
    6c40:	ff 4f       	sbci	r31, 0xFF	; 255
    6c42:	80 81       	ld	r24, Z
    6c44:	91 81       	ldd	r25, Z+1	; 0x01
    6c46:	8d 93       	st	X+, r24
    6c48:	9c 93       	st	X, r25
    6c4a:	fe 01       	movw	r30, r28
    6c4c:	eb 5a       	subi	r30, 0xAB	; 171
    6c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    6c50:	80 81       	ld	r24, Z
    6c52:	91 81       	ldd	r25, Z+1	; 0x01
    6c54:	01 97       	sbiw	r24, 0x01	; 1
    6c56:	f1 f7       	brne	.-4      	; 0x6c54 <Save_Time_Processing+0x18e>
    6c58:	fe 01       	movw	r30, r28
    6c5a:	eb 5a       	subi	r30, 0xAB	; 171
    6c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    6c5e:	91 83       	std	Z+1, r25	; 0x01
    6c60:	80 83       	st	Z, r24
   _delay_ms(200);
   H_EEPROM_Void_WriteByte(21,H_RTC_Void_GetTime().RTC_Minutes);
    6c62:	0e 94 5e 12 	call	0x24bc	; 0x24bc <H_RTC_Void_GetTime>
    6c66:	dc 01       	movw	r26, r24
    6c68:	cb 01       	movw	r24, r22
    6c6a:	29 2f       	mov	r18, r25
    6c6c:	85 e1       	ldi	r24, 0x15	; 21
    6c6e:	90 e0       	ldi	r25, 0x00	; 0
    6c70:	62 2f       	mov	r22, r18
    6c72:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <H_EEPROM_Void_WriteByte>
    6c76:	fe 01       	movw	r30, r28
    6c78:	ef 5a       	subi	r30, 0xAF	; 175
    6c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    6c7c:	80 e0       	ldi	r24, 0x00	; 0
    6c7e:	90 e0       	ldi	r25, 0x00	; 0
    6c80:	a8 e4       	ldi	r26, 0x48	; 72
    6c82:	b3 e4       	ldi	r27, 0x43	; 67
    6c84:	80 83       	st	Z, r24
    6c86:	91 83       	std	Z+1, r25	; 0x01
    6c88:	a2 83       	std	Z+2, r26	; 0x02
    6c8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6c8c:	8e 01       	movw	r16, r28
    6c8e:	03 5b       	subi	r16, 0xB3	; 179
    6c90:	1f 4f       	sbci	r17, 0xFF	; 255
    6c92:	fe 01       	movw	r30, r28
    6c94:	ef 5a       	subi	r30, 0xAF	; 175
    6c96:	ff 4f       	sbci	r31, 0xFF	; 255
    6c98:	60 81       	ld	r22, Z
    6c9a:	71 81       	ldd	r23, Z+1	; 0x01
    6c9c:	82 81       	ldd	r24, Z+2	; 0x02
    6c9e:	93 81       	ldd	r25, Z+3	; 0x03
    6ca0:	20 e0       	ldi	r18, 0x00	; 0
    6ca2:	30 e0       	ldi	r19, 0x00	; 0
    6ca4:	4a e7       	ldi	r20, 0x7A	; 122
    6ca6:	55 e4       	ldi	r21, 0x45	; 69
    6ca8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6cac:	dc 01       	movw	r26, r24
    6cae:	cb 01       	movw	r24, r22
    6cb0:	f8 01       	movw	r30, r16
    6cb2:	80 83       	st	Z, r24
    6cb4:	91 83       	std	Z+1, r25	; 0x01
    6cb6:	a2 83       	std	Z+2, r26	; 0x02
    6cb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6cba:	fe 01       	movw	r30, r28
    6cbc:	e3 5b       	subi	r30, 0xB3	; 179
    6cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    6cc0:	60 81       	ld	r22, Z
    6cc2:	71 81       	ldd	r23, Z+1	; 0x01
    6cc4:	82 81       	ldd	r24, Z+2	; 0x02
    6cc6:	93 81       	ldd	r25, Z+3	; 0x03
    6cc8:	20 e0       	ldi	r18, 0x00	; 0
    6cca:	30 e0       	ldi	r19, 0x00	; 0
    6ccc:	40 e8       	ldi	r20, 0x80	; 128
    6cce:	5f e3       	ldi	r21, 0x3F	; 63
    6cd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6cd4:	88 23       	and	r24, r24
    6cd6:	44 f4       	brge	.+16     	; 0x6ce8 <Save_Time_Processing+0x222>
		__ticks = 1;
    6cd8:	fe 01       	movw	r30, r28
    6cda:	e5 5b       	subi	r30, 0xB5	; 181
    6cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    6cde:	81 e0       	ldi	r24, 0x01	; 1
    6ce0:	90 e0       	ldi	r25, 0x00	; 0
    6ce2:	91 83       	std	Z+1, r25	; 0x01
    6ce4:	80 83       	st	Z, r24
    6ce6:	64 c0       	rjmp	.+200    	; 0x6db0 <Save_Time_Processing+0x2ea>
	else if (__tmp > 65535)
    6ce8:	fe 01       	movw	r30, r28
    6cea:	e3 5b       	subi	r30, 0xB3	; 179
    6cec:	ff 4f       	sbci	r31, 0xFF	; 255
    6cee:	60 81       	ld	r22, Z
    6cf0:	71 81       	ldd	r23, Z+1	; 0x01
    6cf2:	82 81       	ldd	r24, Z+2	; 0x02
    6cf4:	93 81       	ldd	r25, Z+3	; 0x03
    6cf6:	20 e0       	ldi	r18, 0x00	; 0
    6cf8:	3f ef       	ldi	r19, 0xFF	; 255
    6cfa:	4f e7       	ldi	r20, 0x7F	; 127
    6cfc:	57 e4       	ldi	r21, 0x47	; 71
    6cfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6d02:	18 16       	cp	r1, r24
    6d04:	0c f0       	brlt	.+2      	; 0x6d08 <Save_Time_Processing+0x242>
    6d06:	43 c0       	rjmp	.+134    	; 0x6d8e <Save_Time_Processing+0x2c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d08:	fe 01       	movw	r30, r28
    6d0a:	ef 5a       	subi	r30, 0xAF	; 175
    6d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    6d0e:	60 81       	ld	r22, Z
    6d10:	71 81       	ldd	r23, Z+1	; 0x01
    6d12:	82 81       	ldd	r24, Z+2	; 0x02
    6d14:	93 81       	ldd	r25, Z+3	; 0x03
    6d16:	20 e0       	ldi	r18, 0x00	; 0
    6d18:	30 e0       	ldi	r19, 0x00	; 0
    6d1a:	40 e2       	ldi	r20, 0x20	; 32
    6d1c:	51 e4       	ldi	r21, 0x41	; 65
    6d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d22:	dc 01       	movw	r26, r24
    6d24:	cb 01       	movw	r24, r22
    6d26:	8e 01       	movw	r16, r28
    6d28:	05 5b       	subi	r16, 0xB5	; 181
    6d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    6d2c:	bc 01       	movw	r22, r24
    6d2e:	cd 01       	movw	r24, r26
    6d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d34:	dc 01       	movw	r26, r24
    6d36:	cb 01       	movw	r24, r22
    6d38:	f8 01       	movw	r30, r16
    6d3a:	91 83       	std	Z+1, r25	; 0x01
    6d3c:	80 83       	st	Z, r24
    6d3e:	1f c0       	rjmp	.+62     	; 0x6d7e <Save_Time_Processing+0x2b8>
    6d40:	fe 01       	movw	r30, r28
    6d42:	e7 5b       	subi	r30, 0xB7	; 183
    6d44:	ff 4f       	sbci	r31, 0xFF	; 255
    6d46:	80 e9       	ldi	r24, 0x90	; 144
    6d48:	91 e0       	ldi	r25, 0x01	; 1
    6d4a:	91 83       	std	Z+1, r25	; 0x01
    6d4c:	80 83       	st	Z, r24
    6d4e:	fe 01       	movw	r30, r28
    6d50:	e7 5b       	subi	r30, 0xB7	; 183
    6d52:	ff 4f       	sbci	r31, 0xFF	; 255
    6d54:	80 81       	ld	r24, Z
    6d56:	91 81       	ldd	r25, Z+1	; 0x01
    6d58:	01 97       	sbiw	r24, 0x01	; 1
    6d5a:	f1 f7       	brne	.-4      	; 0x6d58 <Save_Time_Processing+0x292>
    6d5c:	fe 01       	movw	r30, r28
    6d5e:	e7 5b       	subi	r30, 0xB7	; 183
    6d60:	ff 4f       	sbci	r31, 0xFF	; 255
    6d62:	91 83       	std	Z+1, r25	; 0x01
    6d64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d66:	de 01       	movw	r26, r28
    6d68:	a5 5b       	subi	r26, 0xB5	; 181
    6d6a:	bf 4f       	sbci	r27, 0xFF	; 255
    6d6c:	fe 01       	movw	r30, r28
    6d6e:	e5 5b       	subi	r30, 0xB5	; 181
    6d70:	ff 4f       	sbci	r31, 0xFF	; 255
    6d72:	80 81       	ld	r24, Z
    6d74:	91 81       	ldd	r25, Z+1	; 0x01
    6d76:	01 97       	sbiw	r24, 0x01	; 1
    6d78:	11 96       	adiw	r26, 0x01	; 1
    6d7a:	9c 93       	st	X, r25
    6d7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d7e:	fe 01       	movw	r30, r28
    6d80:	e5 5b       	subi	r30, 0xB5	; 181
    6d82:	ff 4f       	sbci	r31, 0xFF	; 255
    6d84:	80 81       	ld	r24, Z
    6d86:	91 81       	ldd	r25, Z+1	; 0x01
    6d88:	00 97       	sbiw	r24, 0x00	; 0
    6d8a:	d1 f6       	brne	.-76     	; 0x6d40 <Save_Time_Processing+0x27a>
    6d8c:	27 c0       	rjmp	.+78     	; 0x6ddc <Save_Time_Processing+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d8e:	8e 01       	movw	r16, r28
    6d90:	05 5b       	subi	r16, 0xB5	; 181
    6d92:	1f 4f       	sbci	r17, 0xFF	; 255
    6d94:	fe 01       	movw	r30, r28
    6d96:	e3 5b       	subi	r30, 0xB3	; 179
    6d98:	ff 4f       	sbci	r31, 0xFF	; 255
    6d9a:	60 81       	ld	r22, Z
    6d9c:	71 81       	ldd	r23, Z+1	; 0x01
    6d9e:	82 81       	ldd	r24, Z+2	; 0x02
    6da0:	93 81       	ldd	r25, Z+3	; 0x03
    6da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6da6:	dc 01       	movw	r26, r24
    6da8:	cb 01       	movw	r24, r22
    6daa:	f8 01       	movw	r30, r16
    6dac:	91 83       	std	Z+1, r25	; 0x01
    6dae:	80 83       	st	Z, r24
    6db0:	de 01       	movw	r26, r28
    6db2:	a9 5b       	subi	r26, 0xB9	; 185
    6db4:	bf 4f       	sbci	r27, 0xFF	; 255
    6db6:	fe 01       	movw	r30, r28
    6db8:	e5 5b       	subi	r30, 0xB5	; 181
    6dba:	ff 4f       	sbci	r31, 0xFF	; 255
    6dbc:	80 81       	ld	r24, Z
    6dbe:	91 81       	ldd	r25, Z+1	; 0x01
    6dc0:	8d 93       	st	X+, r24
    6dc2:	9c 93       	st	X, r25
    6dc4:	fe 01       	movw	r30, r28
    6dc6:	e9 5b       	subi	r30, 0xB9	; 185
    6dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    6dca:	80 81       	ld	r24, Z
    6dcc:	91 81       	ldd	r25, Z+1	; 0x01
    6dce:	01 97       	sbiw	r24, 0x01	; 1
    6dd0:	f1 f7       	brne	.-4      	; 0x6dce <Save_Time_Processing+0x308>
    6dd2:	fe 01       	movw	r30, r28
    6dd4:	e9 5b       	subi	r30, 0xB9	; 185
    6dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    6dd8:	91 83       	std	Z+1, r25	; 0x01
    6dda:	80 83       	st	Z, r24
   _delay_ms(200);
   H_EEPROM_Void_WriteByte(22,H_RTC_Void_GetTime().RTC_Seconed);
    6ddc:	0e 94 5e 12 	call	0x24bc	; 0x24bc <H_RTC_Void_GetTime>
    6de0:	dc 01       	movw	r26, r24
    6de2:	cb 01       	movw	r24, r22
    6de4:	2a 2f       	mov	r18, r26
    6de6:	86 e1       	ldi	r24, 0x16	; 22
    6de8:	90 e0       	ldi	r25, 0x00	; 0
    6dea:	62 2f       	mov	r22, r18
    6dec:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <H_EEPROM_Void_WriteByte>
    6df0:	fe 01       	movw	r30, r28
    6df2:	ed 5b       	subi	r30, 0xBD	; 189
    6df4:	ff 4f       	sbci	r31, 0xFF	; 255
    6df6:	80 e0       	ldi	r24, 0x00	; 0
    6df8:	90 e0       	ldi	r25, 0x00	; 0
    6dfa:	a8 e4       	ldi	r26, 0x48	; 72
    6dfc:	b3 e4       	ldi	r27, 0x43	; 67
    6dfe:	80 83       	st	Z, r24
    6e00:	91 83       	std	Z+1, r25	; 0x01
    6e02:	a2 83       	std	Z+2, r26	; 0x02
    6e04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6e06:	8e 01       	movw	r16, r28
    6e08:	01 5c       	subi	r16, 0xC1	; 193
    6e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    6e0c:	fe 01       	movw	r30, r28
    6e0e:	ed 5b       	subi	r30, 0xBD	; 189
    6e10:	ff 4f       	sbci	r31, 0xFF	; 255
    6e12:	60 81       	ld	r22, Z
    6e14:	71 81       	ldd	r23, Z+1	; 0x01
    6e16:	82 81       	ldd	r24, Z+2	; 0x02
    6e18:	93 81       	ldd	r25, Z+3	; 0x03
    6e1a:	20 e0       	ldi	r18, 0x00	; 0
    6e1c:	30 e0       	ldi	r19, 0x00	; 0
    6e1e:	4a e7       	ldi	r20, 0x7A	; 122
    6e20:	55 e4       	ldi	r21, 0x45	; 69
    6e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e26:	dc 01       	movw	r26, r24
    6e28:	cb 01       	movw	r24, r22
    6e2a:	f8 01       	movw	r30, r16
    6e2c:	80 83       	st	Z, r24
    6e2e:	91 83       	std	Z+1, r25	; 0x01
    6e30:	a2 83       	std	Z+2, r26	; 0x02
    6e32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6e34:	fe 01       	movw	r30, r28
    6e36:	ff 96       	adiw	r30, 0x3f	; 63
    6e38:	60 81       	ld	r22, Z
    6e3a:	71 81       	ldd	r23, Z+1	; 0x01
    6e3c:	82 81       	ldd	r24, Z+2	; 0x02
    6e3e:	93 81       	ldd	r25, Z+3	; 0x03
    6e40:	20 e0       	ldi	r18, 0x00	; 0
    6e42:	30 e0       	ldi	r19, 0x00	; 0
    6e44:	40 e8       	ldi	r20, 0x80	; 128
    6e46:	5f e3       	ldi	r21, 0x3F	; 63
    6e48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6e4c:	88 23       	and	r24, r24
    6e4e:	2c f4       	brge	.+10     	; 0x6e5a <Save_Time_Processing+0x394>
		__ticks = 1;
    6e50:	81 e0       	ldi	r24, 0x01	; 1
    6e52:	90 e0       	ldi	r25, 0x00	; 0
    6e54:	9e af       	std	Y+62, r25	; 0x3e
    6e56:	8d af       	std	Y+61, r24	; 0x3d
    6e58:	46 c0       	rjmp	.+140    	; 0x6ee6 <Save_Time_Processing+0x420>
	else if (__tmp > 65535)
    6e5a:	fe 01       	movw	r30, r28
    6e5c:	ff 96       	adiw	r30, 0x3f	; 63
    6e5e:	60 81       	ld	r22, Z
    6e60:	71 81       	ldd	r23, Z+1	; 0x01
    6e62:	82 81       	ldd	r24, Z+2	; 0x02
    6e64:	93 81       	ldd	r25, Z+3	; 0x03
    6e66:	20 e0       	ldi	r18, 0x00	; 0
    6e68:	3f ef       	ldi	r19, 0xFF	; 255
    6e6a:	4f e7       	ldi	r20, 0x7F	; 127
    6e6c:	57 e4       	ldi	r21, 0x47	; 71
    6e6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6e72:	18 16       	cp	r1, r24
    6e74:	64 f5       	brge	.+88     	; 0x6ece <Save_Time_Processing+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e76:	fe 01       	movw	r30, r28
    6e78:	ed 5b       	subi	r30, 0xBD	; 189
    6e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e7c:	60 81       	ld	r22, Z
    6e7e:	71 81       	ldd	r23, Z+1	; 0x01
    6e80:	82 81       	ldd	r24, Z+2	; 0x02
    6e82:	93 81       	ldd	r25, Z+3	; 0x03
    6e84:	20 e0       	ldi	r18, 0x00	; 0
    6e86:	30 e0       	ldi	r19, 0x00	; 0
    6e88:	40 e2       	ldi	r20, 0x20	; 32
    6e8a:	51 e4       	ldi	r21, 0x41	; 65
    6e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e90:	dc 01       	movw	r26, r24
    6e92:	cb 01       	movw	r24, r22
    6e94:	bc 01       	movw	r22, r24
    6e96:	cd 01       	movw	r24, r26
    6e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e9c:	dc 01       	movw	r26, r24
    6e9e:	cb 01       	movw	r24, r22
    6ea0:	9e af       	std	Y+62, r25	; 0x3e
    6ea2:	8d af       	std	Y+61, r24	; 0x3d
    6ea4:	0f c0       	rjmp	.+30     	; 0x6ec4 <Save_Time_Processing+0x3fe>
    6ea6:	80 e9       	ldi	r24, 0x90	; 144
    6ea8:	91 e0       	ldi	r25, 0x01	; 1
    6eaa:	9c af       	std	Y+60, r25	; 0x3c
    6eac:	8b af       	std	Y+59, r24	; 0x3b
    6eae:	8b ad       	ldd	r24, Y+59	; 0x3b
    6eb0:	9c ad       	ldd	r25, Y+60	; 0x3c
    6eb2:	01 97       	sbiw	r24, 0x01	; 1
    6eb4:	f1 f7       	brne	.-4      	; 0x6eb2 <Save_Time_Processing+0x3ec>
    6eb6:	9c af       	std	Y+60, r25	; 0x3c
    6eb8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6eba:	8d ad       	ldd	r24, Y+61	; 0x3d
    6ebc:	9e ad       	ldd	r25, Y+62	; 0x3e
    6ebe:	01 97       	sbiw	r24, 0x01	; 1
    6ec0:	9e af       	std	Y+62, r25	; 0x3e
    6ec2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6ec4:	8d ad       	ldd	r24, Y+61	; 0x3d
    6ec6:	9e ad       	ldd	r25, Y+62	; 0x3e
    6ec8:	00 97       	sbiw	r24, 0x00	; 0
    6eca:	69 f7       	brne	.-38     	; 0x6ea6 <Save_Time_Processing+0x3e0>
    6ecc:	16 c0       	rjmp	.+44     	; 0x6efa <Save_Time_Processing+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ece:	fe 01       	movw	r30, r28
    6ed0:	ff 96       	adiw	r30, 0x3f	; 63
    6ed2:	60 81       	ld	r22, Z
    6ed4:	71 81       	ldd	r23, Z+1	; 0x01
    6ed6:	82 81       	ldd	r24, Z+2	; 0x02
    6ed8:	93 81       	ldd	r25, Z+3	; 0x03
    6eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ede:	dc 01       	movw	r26, r24
    6ee0:	cb 01       	movw	r24, r22
    6ee2:	9e af       	std	Y+62, r25	; 0x3e
    6ee4:	8d af       	std	Y+61, r24	; 0x3d
    6ee6:	8d ad       	ldd	r24, Y+61	; 0x3d
    6ee8:	9e ad       	ldd	r25, Y+62	; 0x3e
    6eea:	9a af       	std	Y+58, r25	; 0x3a
    6eec:	89 af       	std	Y+57, r24	; 0x39
    6eee:	89 ad       	ldd	r24, Y+57	; 0x39
    6ef0:	9a ad       	ldd	r25, Y+58	; 0x3a
    6ef2:	01 97       	sbiw	r24, 0x01	; 1
    6ef4:	f1 f7       	brne	.-4      	; 0x6ef2 <Save_Time_Processing+0x42c>
    6ef6:	9a af       	std	Y+58, r25	; 0x3a
    6ef8:	89 af       	std	Y+57, r24	; 0x39
   _delay_ms(200);
   H_LCD_void_gotoXY(1,0);
    6efa:	81 e0       	ldi	r24, 0x01	; 1
    6efc:	60 e0       	ldi	r22, 0x00	; 0
    6efe:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
   H_EEPROM_Void_WriteByte(23,H_RTC_Void_GetTime().RTC_DayTime);
    6f02:	0e 94 5e 12 	call	0x24bc	; 0x24bc <H_RTC_Void_GetTime>
    6f06:	dc 01       	movw	r26, r24
    6f08:	cb 01       	movw	r24, r22
    6f0a:	2b 2f       	mov	r18, r27
    6f0c:	87 e1       	ldi	r24, 0x17	; 23
    6f0e:	90 e0       	ldi	r25, 0x00	; 0
    6f10:	62 2f       	mov	r22, r18
    6f12:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <H_EEPROM_Void_WriteByte>
    6f16:	80 e0       	ldi	r24, 0x00	; 0
    6f18:	90 e0       	ldi	r25, 0x00	; 0
    6f1a:	a8 e4       	ldi	r26, 0x48	; 72
    6f1c:	b3 e4       	ldi	r27, 0x43	; 67
    6f1e:	8d ab       	std	Y+53, r24	; 0x35
    6f20:	9e ab       	std	Y+54, r25	; 0x36
    6f22:	af ab       	std	Y+55, r26	; 0x37
    6f24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f26:	6d a9       	ldd	r22, Y+53	; 0x35
    6f28:	7e a9       	ldd	r23, Y+54	; 0x36
    6f2a:	8f a9       	ldd	r24, Y+55	; 0x37
    6f2c:	98 ad       	ldd	r25, Y+56	; 0x38
    6f2e:	20 e0       	ldi	r18, 0x00	; 0
    6f30:	30 e0       	ldi	r19, 0x00	; 0
    6f32:	4a e7       	ldi	r20, 0x7A	; 122
    6f34:	55 e4       	ldi	r21, 0x45	; 69
    6f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f3a:	dc 01       	movw	r26, r24
    6f3c:	cb 01       	movw	r24, r22
    6f3e:	89 ab       	std	Y+49, r24	; 0x31
    6f40:	9a ab       	std	Y+50, r25	; 0x32
    6f42:	ab ab       	std	Y+51, r26	; 0x33
    6f44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6f46:	69 a9       	ldd	r22, Y+49	; 0x31
    6f48:	7a a9       	ldd	r23, Y+50	; 0x32
    6f4a:	8b a9       	ldd	r24, Y+51	; 0x33
    6f4c:	9c a9       	ldd	r25, Y+52	; 0x34
    6f4e:	20 e0       	ldi	r18, 0x00	; 0
    6f50:	30 e0       	ldi	r19, 0x00	; 0
    6f52:	40 e8       	ldi	r20, 0x80	; 128
    6f54:	5f e3       	ldi	r21, 0x3F	; 63
    6f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6f5a:	88 23       	and	r24, r24
    6f5c:	2c f4       	brge	.+10     	; 0x6f68 <Save_Time_Processing+0x4a2>
		__ticks = 1;
    6f5e:	81 e0       	ldi	r24, 0x01	; 1
    6f60:	90 e0       	ldi	r25, 0x00	; 0
    6f62:	98 ab       	std	Y+48, r25	; 0x30
    6f64:	8f a7       	std	Y+47, r24	; 0x2f
    6f66:	3f c0       	rjmp	.+126    	; 0x6fe6 <Save_Time_Processing+0x520>
	else if (__tmp > 65535)
    6f68:	69 a9       	ldd	r22, Y+49	; 0x31
    6f6a:	7a a9       	ldd	r23, Y+50	; 0x32
    6f6c:	8b a9       	ldd	r24, Y+51	; 0x33
    6f6e:	9c a9       	ldd	r25, Y+52	; 0x34
    6f70:	20 e0       	ldi	r18, 0x00	; 0
    6f72:	3f ef       	ldi	r19, 0xFF	; 255
    6f74:	4f e7       	ldi	r20, 0x7F	; 127
    6f76:	57 e4       	ldi	r21, 0x47	; 71
    6f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6f7c:	18 16       	cp	r1, r24
    6f7e:	4c f5       	brge	.+82     	; 0x6fd2 <Save_Time_Processing+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6f80:	6d a9       	ldd	r22, Y+53	; 0x35
    6f82:	7e a9       	ldd	r23, Y+54	; 0x36
    6f84:	8f a9       	ldd	r24, Y+55	; 0x37
    6f86:	98 ad       	ldd	r25, Y+56	; 0x38
    6f88:	20 e0       	ldi	r18, 0x00	; 0
    6f8a:	30 e0       	ldi	r19, 0x00	; 0
    6f8c:	40 e2       	ldi	r20, 0x20	; 32
    6f8e:	51 e4       	ldi	r21, 0x41	; 65
    6f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f94:	dc 01       	movw	r26, r24
    6f96:	cb 01       	movw	r24, r22
    6f98:	bc 01       	movw	r22, r24
    6f9a:	cd 01       	movw	r24, r26
    6f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6fa0:	dc 01       	movw	r26, r24
    6fa2:	cb 01       	movw	r24, r22
    6fa4:	98 ab       	std	Y+48, r25	; 0x30
    6fa6:	8f a7       	std	Y+47, r24	; 0x2f
    6fa8:	0f c0       	rjmp	.+30     	; 0x6fc8 <Save_Time_Processing+0x502>
    6faa:	80 e9       	ldi	r24, 0x90	; 144
    6fac:	91 e0       	ldi	r25, 0x01	; 1
    6fae:	9e a7       	std	Y+46, r25	; 0x2e
    6fb0:	8d a7       	std	Y+45, r24	; 0x2d
    6fb2:	8d a5       	ldd	r24, Y+45	; 0x2d
    6fb4:	9e a5       	ldd	r25, Y+46	; 0x2e
    6fb6:	01 97       	sbiw	r24, 0x01	; 1
    6fb8:	f1 f7       	brne	.-4      	; 0x6fb6 <Save_Time_Processing+0x4f0>
    6fba:	9e a7       	std	Y+46, r25	; 0x2e
    6fbc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6fbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    6fc0:	98 a9       	ldd	r25, Y+48	; 0x30
    6fc2:	01 97       	sbiw	r24, 0x01	; 1
    6fc4:	98 ab       	std	Y+48, r25	; 0x30
    6fc6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6fc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    6fca:	98 a9       	ldd	r25, Y+48	; 0x30
    6fcc:	00 97       	sbiw	r24, 0x00	; 0
    6fce:	69 f7       	brne	.-38     	; 0x6faa <Save_Time_Processing+0x4e4>
    6fd0:	14 c0       	rjmp	.+40     	; 0x6ffa <Save_Time_Processing+0x534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6fd2:	69 a9       	ldd	r22, Y+49	; 0x31
    6fd4:	7a a9       	ldd	r23, Y+50	; 0x32
    6fd6:	8b a9       	ldd	r24, Y+51	; 0x33
    6fd8:	9c a9       	ldd	r25, Y+52	; 0x34
    6fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6fde:	dc 01       	movw	r26, r24
    6fe0:	cb 01       	movw	r24, r22
    6fe2:	98 ab       	std	Y+48, r25	; 0x30
    6fe4:	8f a7       	std	Y+47, r24	; 0x2f
    6fe6:	8f a5       	ldd	r24, Y+47	; 0x2f
    6fe8:	98 a9       	ldd	r25, Y+48	; 0x30
    6fea:	9c a7       	std	Y+44, r25	; 0x2c
    6fec:	8b a7       	std	Y+43, r24	; 0x2b
    6fee:	8b a5       	ldd	r24, Y+43	; 0x2b
    6ff0:	9c a5       	ldd	r25, Y+44	; 0x2c
    6ff2:	01 97       	sbiw	r24, 0x01	; 1
    6ff4:	f1 f7       	brne	.-4      	; 0x6ff2 <Save_Time_Processing+0x52c>
    6ff6:	9c a7       	std	Y+44, r25	; 0x2c
    6ff8:	8b a7       	std	Y+43, r24	; 0x2b
   _delay_ms(200);
   H_EEPROM_Void_WriteByte(24,H_RTC_Void_GetDate().RTC_Day);
    6ffa:	0e 94 d6 12 	call	0x25ac	; 0x25ac <H_RTC_Void_GetDate>
    6ffe:	fe 01       	movw	r30, r28
    7000:	e4 59       	subi	r30, 0x94	; 148
    7002:	ff 4f       	sbci	r31, 0xFF	; 255
    7004:	60 83       	st	Z, r22
    7006:	fe 01       	movw	r30, r28
    7008:	e3 59       	subi	r30, 0x93	; 147
    700a:	ff 4f       	sbci	r31, 0xFF	; 255
    700c:	70 83       	st	Z, r23
    700e:	fe 01       	movw	r30, r28
    7010:	e2 59       	subi	r30, 0x92	; 146
    7012:	ff 4f       	sbci	r31, 0xFF	; 255
    7014:	80 83       	st	Z, r24
    7016:	ce 01       	movw	r24, r28
    7018:	87 59       	subi	r24, 0x97	; 151
    701a:	9f 4f       	sbci	r25, 0xFF	; 255
    701c:	9e 01       	movw	r18, r28
    701e:	24 59       	subi	r18, 0x94	; 148
    7020:	3f 4f       	sbci	r19, 0xFF	; 255
    7022:	e1 96       	adiw	r28, 0x31	; 49
    7024:	9f af       	std	Y+63, r25	; 0x3f
    7026:	8e af       	std	Y+62, r24	; 0x3e
    7028:	e1 97       	sbiw	r28, 0x31	; 49
    702a:	e3 96       	adiw	r28, 0x33	; 51
    702c:	3f af       	std	Y+63, r19	; 0x3f
    702e:	2e af       	std	Y+62, r18	; 0x3e
    7030:	e3 97       	sbiw	r28, 0x33	; 51
    7032:	f3 e0       	ldi	r31, 0x03	; 3
    7034:	e4 96       	adiw	r28, 0x34	; 52
    7036:	ff af       	std	Y+63, r31	; 0x3f
    7038:	e4 97       	sbiw	r28, 0x34	; 52
    703a:	e3 96       	adiw	r28, 0x33	; 51
    703c:	ee ad       	ldd	r30, Y+62	; 0x3e
    703e:	ff ad       	ldd	r31, Y+63	; 0x3f
    7040:	e3 97       	sbiw	r28, 0x33	; 51
    7042:	00 80       	ld	r0, Z
    7044:	e3 96       	adiw	r28, 0x33	; 51
    7046:	8e ad       	ldd	r24, Y+62	; 0x3e
    7048:	9f ad       	ldd	r25, Y+63	; 0x3f
    704a:	e3 97       	sbiw	r28, 0x33	; 51
    704c:	01 96       	adiw	r24, 0x01	; 1
    704e:	e3 96       	adiw	r28, 0x33	; 51
    7050:	9f af       	std	Y+63, r25	; 0x3f
    7052:	8e af       	std	Y+62, r24	; 0x3e
    7054:	e3 97       	sbiw	r28, 0x33	; 51
    7056:	e1 96       	adiw	r28, 0x31	; 49
    7058:	ee ad       	ldd	r30, Y+62	; 0x3e
    705a:	ff ad       	ldd	r31, Y+63	; 0x3f
    705c:	e1 97       	sbiw	r28, 0x31	; 49
    705e:	00 82       	st	Z, r0
    7060:	e1 96       	adiw	r28, 0x31	; 49
    7062:	8e ad       	ldd	r24, Y+62	; 0x3e
    7064:	9f ad       	ldd	r25, Y+63	; 0x3f
    7066:	e1 97       	sbiw	r28, 0x31	; 49
    7068:	01 96       	adiw	r24, 0x01	; 1
    706a:	e1 96       	adiw	r28, 0x31	; 49
    706c:	9f af       	std	Y+63, r25	; 0x3f
    706e:	8e af       	std	Y+62, r24	; 0x3e
    7070:	e1 97       	sbiw	r28, 0x31	; 49
    7072:	e4 96       	adiw	r28, 0x34	; 52
    7074:	9f ad       	ldd	r25, Y+63	; 0x3f
    7076:	e4 97       	sbiw	r28, 0x34	; 52
    7078:	91 50       	subi	r25, 0x01	; 1
    707a:	e4 96       	adiw	r28, 0x34	; 52
    707c:	9f af       	std	Y+63, r25	; 0x3f
    707e:	e4 97       	sbiw	r28, 0x34	; 52
    7080:	e4 96       	adiw	r28, 0x34	; 52
    7082:	ef ad       	ldd	r30, Y+63	; 0x3f
    7084:	e4 97       	sbiw	r28, 0x34	; 52
    7086:	ee 23       	and	r30, r30
    7088:	c1 f6       	brne	.-80     	; 0x703a <Save_Time_Processing+0x574>
    708a:	fe 01       	movw	r30, r28
    708c:	e7 59       	subi	r30, 0x97	; 151
    708e:	ff 4f       	sbci	r31, 0xFF	; 255
    7090:	20 81       	ld	r18, Z
    7092:	88 e1       	ldi	r24, 0x18	; 24
    7094:	90 e0       	ldi	r25, 0x00	; 0
    7096:	62 2f       	mov	r22, r18
    7098:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <H_EEPROM_Void_WriteByte>
    709c:	80 e0       	ldi	r24, 0x00	; 0
    709e:	90 e0       	ldi	r25, 0x00	; 0
    70a0:	a8 e4       	ldi	r26, 0x48	; 72
    70a2:	b3 e4       	ldi	r27, 0x43	; 67
    70a4:	8f a3       	std	Y+39, r24	; 0x27
    70a6:	98 a7       	std	Y+40, r25	; 0x28
    70a8:	a9 a7       	std	Y+41, r26	; 0x29
    70aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    70ac:	6f a1       	ldd	r22, Y+39	; 0x27
    70ae:	78 a5       	ldd	r23, Y+40	; 0x28
    70b0:	89 a5       	ldd	r24, Y+41	; 0x29
    70b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    70b4:	20 e0       	ldi	r18, 0x00	; 0
    70b6:	30 e0       	ldi	r19, 0x00	; 0
    70b8:	4a e7       	ldi	r20, 0x7A	; 122
    70ba:	55 e4       	ldi	r21, 0x45	; 69
    70bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    70c0:	dc 01       	movw	r26, r24
    70c2:	cb 01       	movw	r24, r22
    70c4:	8b a3       	std	Y+35, r24	; 0x23
    70c6:	9c a3       	std	Y+36, r25	; 0x24
    70c8:	ad a3       	std	Y+37, r26	; 0x25
    70ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    70cc:	6b a1       	ldd	r22, Y+35	; 0x23
    70ce:	7c a1       	ldd	r23, Y+36	; 0x24
    70d0:	8d a1       	ldd	r24, Y+37	; 0x25
    70d2:	9e a1       	ldd	r25, Y+38	; 0x26
    70d4:	20 e0       	ldi	r18, 0x00	; 0
    70d6:	30 e0       	ldi	r19, 0x00	; 0
    70d8:	40 e8       	ldi	r20, 0x80	; 128
    70da:	5f e3       	ldi	r21, 0x3F	; 63
    70dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    70e0:	88 23       	and	r24, r24
    70e2:	2c f4       	brge	.+10     	; 0x70ee <Save_Time_Processing+0x628>
		__ticks = 1;
    70e4:	81 e0       	ldi	r24, 0x01	; 1
    70e6:	90 e0       	ldi	r25, 0x00	; 0
    70e8:	9a a3       	std	Y+34, r25	; 0x22
    70ea:	89 a3       	std	Y+33, r24	; 0x21
    70ec:	3f c0       	rjmp	.+126    	; 0x716c <Save_Time_Processing+0x6a6>
	else if (__tmp > 65535)
    70ee:	6b a1       	ldd	r22, Y+35	; 0x23
    70f0:	7c a1       	ldd	r23, Y+36	; 0x24
    70f2:	8d a1       	ldd	r24, Y+37	; 0x25
    70f4:	9e a1       	ldd	r25, Y+38	; 0x26
    70f6:	20 e0       	ldi	r18, 0x00	; 0
    70f8:	3f ef       	ldi	r19, 0xFF	; 255
    70fa:	4f e7       	ldi	r20, 0x7F	; 127
    70fc:	57 e4       	ldi	r21, 0x47	; 71
    70fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7102:	18 16       	cp	r1, r24
    7104:	4c f5       	brge	.+82     	; 0x7158 <Save_Time_Processing+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7106:	6f a1       	ldd	r22, Y+39	; 0x27
    7108:	78 a5       	ldd	r23, Y+40	; 0x28
    710a:	89 a5       	ldd	r24, Y+41	; 0x29
    710c:	9a a5       	ldd	r25, Y+42	; 0x2a
    710e:	20 e0       	ldi	r18, 0x00	; 0
    7110:	30 e0       	ldi	r19, 0x00	; 0
    7112:	40 e2       	ldi	r20, 0x20	; 32
    7114:	51 e4       	ldi	r21, 0x41	; 65
    7116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    711a:	dc 01       	movw	r26, r24
    711c:	cb 01       	movw	r24, r22
    711e:	bc 01       	movw	r22, r24
    7120:	cd 01       	movw	r24, r26
    7122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7126:	dc 01       	movw	r26, r24
    7128:	cb 01       	movw	r24, r22
    712a:	9a a3       	std	Y+34, r25	; 0x22
    712c:	89 a3       	std	Y+33, r24	; 0x21
    712e:	0f c0       	rjmp	.+30     	; 0x714e <Save_Time_Processing+0x688>
    7130:	80 e9       	ldi	r24, 0x90	; 144
    7132:	91 e0       	ldi	r25, 0x01	; 1
    7134:	98 a3       	std	Y+32, r25	; 0x20
    7136:	8f 8f       	std	Y+31, r24	; 0x1f
    7138:	8f 8d       	ldd	r24, Y+31	; 0x1f
    713a:	98 a1       	ldd	r25, Y+32	; 0x20
    713c:	01 97       	sbiw	r24, 0x01	; 1
    713e:	f1 f7       	brne	.-4      	; 0x713c <Save_Time_Processing+0x676>
    7140:	98 a3       	std	Y+32, r25	; 0x20
    7142:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7144:	89 a1       	ldd	r24, Y+33	; 0x21
    7146:	9a a1       	ldd	r25, Y+34	; 0x22
    7148:	01 97       	sbiw	r24, 0x01	; 1
    714a:	9a a3       	std	Y+34, r25	; 0x22
    714c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    714e:	89 a1       	ldd	r24, Y+33	; 0x21
    7150:	9a a1       	ldd	r25, Y+34	; 0x22
    7152:	00 97       	sbiw	r24, 0x00	; 0
    7154:	69 f7       	brne	.-38     	; 0x7130 <Save_Time_Processing+0x66a>
    7156:	14 c0       	rjmp	.+40     	; 0x7180 <Save_Time_Processing+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7158:	6b a1       	ldd	r22, Y+35	; 0x23
    715a:	7c a1       	ldd	r23, Y+36	; 0x24
    715c:	8d a1       	ldd	r24, Y+37	; 0x25
    715e:	9e a1       	ldd	r25, Y+38	; 0x26
    7160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7164:	dc 01       	movw	r26, r24
    7166:	cb 01       	movw	r24, r22
    7168:	9a a3       	std	Y+34, r25	; 0x22
    716a:	89 a3       	std	Y+33, r24	; 0x21
    716c:	89 a1       	ldd	r24, Y+33	; 0x21
    716e:	9a a1       	ldd	r25, Y+34	; 0x22
    7170:	9e 8f       	std	Y+30, r25	; 0x1e
    7172:	8d 8f       	std	Y+29, r24	; 0x1d
    7174:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7176:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7178:	01 97       	sbiw	r24, 0x01	; 1
    717a:	f1 f7       	brne	.-4      	; 0x7178 <Save_Time_Processing+0x6b2>
    717c:	9e 8f       	std	Y+30, r25	; 0x1e
    717e:	8d 8f       	std	Y+29, r24	; 0x1d
   _delay_ms(200);
   H_EEPROM_Void_WriteByte(25,H_RTC_Void_GetDate().RTC_Month);
    7180:	0e 94 d6 12 	call	0x25ac	; 0x25ac <H_RTC_Void_GetDate>
    7184:	fe 01       	movw	r30, r28
    7186:	e4 59       	subi	r30, 0x94	; 148
    7188:	ff 4f       	sbci	r31, 0xFF	; 255
    718a:	60 83       	st	Z, r22
    718c:	fe 01       	movw	r30, r28
    718e:	e3 59       	subi	r30, 0x93	; 147
    7190:	ff 4f       	sbci	r31, 0xFF	; 255
    7192:	70 83       	st	Z, r23
    7194:	fe 01       	movw	r30, r28
    7196:	e2 59       	subi	r30, 0x92	; 146
    7198:	ff 4f       	sbci	r31, 0xFF	; 255
    719a:	80 83       	st	Z, r24
    719c:	ce 01       	movw	r24, r28
    719e:	8a 59       	subi	r24, 0x9A	; 154
    71a0:	9f 4f       	sbci	r25, 0xFF	; 255
    71a2:	9e 01       	movw	r18, r28
    71a4:	24 59       	subi	r18, 0x94	; 148
    71a6:	3f 4f       	sbci	r19, 0xFF	; 255
    71a8:	e6 96       	adiw	r28, 0x36	; 54
    71aa:	9f af       	std	Y+63, r25	; 0x3f
    71ac:	8e af       	std	Y+62, r24	; 0x3e
    71ae:	e6 97       	sbiw	r28, 0x36	; 54
    71b0:	e8 96       	adiw	r28, 0x38	; 56
    71b2:	3f af       	std	Y+63, r19	; 0x3f
    71b4:	2e af       	std	Y+62, r18	; 0x3e
    71b6:	e8 97       	sbiw	r28, 0x38	; 56
    71b8:	f3 e0       	ldi	r31, 0x03	; 3
    71ba:	e9 96       	adiw	r28, 0x39	; 57
    71bc:	ff af       	std	Y+63, r31	; 0x3f
    71be:	e9 97       	sbiw	r28, 0x39	; 57
    71c0:	e8 96       	adiw	r28, 0x38	; 56
    71c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    71c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    71c6:	e8 97       	sbiw	r28, 0x38	; 56
    71c8:	00 80       	ld	r0, Z
    71ca:	e8 96       	adiw	r28, 0x38	; 56
    71cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    71ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    71d0:	e8 97       	sbiw	r28, 0x38	; 56
    71d2:	01 96       	adiw	r24, 0x01	; 1
    71d4:	e8 96       	adiw	r28, 0x38	; 56
    71d6:	9f af       	std	Y+63, r25	; 0x3f
    71d8:	8e af       	std	Y+62, r24	; 0x3e
    71da:	e8 97       	sbiw	r28, 0x38	; 56
    71dc:	e6 96       	adiw	r28, 0x36	; 54
    71de:	ee ad       	ldd	r30, Y+62	; 0x3e
    71e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    71e2:	e6 97       	sbiw	r28, 0x36	; 54
    71e4:	00 82       	st	Z, r0
    71e6:	e6 96       	adiw	r28, 0x36	; 54
    71e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    71ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    71ec:	e6 97       	sbiw	r28, 0x36	; 54
    71ee:	01 96       	adiw	r24, 0x01	; 1
    71f0:	e6 96       	adiw	r28, 0x36	; 54
    71f2:	9f af       	std	Y+63, r25	; 0x3f
    71f4:	8e af       	std	Y+62, r24	; 0x3e
    71f6:	e6 97       	sbiw	r28, 0x36	; 54
    71f8:	e9 96       	adiw	r28, 0x39	; 57
    71fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    71fc:	e9 97       	sbiw	r28, 0x39	; 57
    71fe:	91 50       	subi	r25, 0x01	; 1
    7200:	e9 96       	adiw	r28, 0x39	; 57
    7202:	9f af       	std	Y+63, r25	; 0x3f
    7204:	e9 97       	sbiw	r28, 0x39	; 57
    7206:	e9 96       	adiw	r28, 0x39	; 57
    7208:	ef ad       	ldd	r30, Y+63	; 0x3f
    720a:	e9 97       	sbiw	r28, 0x39	; 57
    720c:	ee 23       	and	r30, r30
    720e:	c1 f6       	brne	.-80     	; 0x71c0 <Save_Time_Processing+0x6fa>
    7210:	fe 01       	movw	r30, r28
    7212:	ea 59       	subi	r30, 0x9A	; 154
    7214:	ff 4f       	sbci	r31, 0xFF	; 255
    7216:	21 81       	ldd	r18, Z+1	; 0x01
    7218:	89 e1       	ldi	r24, 0x19	; 25
    721a:	90 e0       	ldi	r25, 0x00	; 0
    721c:	62 2f       	mov	r22, r18
    721e:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <H_EEPROM_Void_WriteByte>
    7222:	80 e0       	ldi	r24, 0x00	; 0
    7224:	90 e0       	ldi	r25, 0x00	; 0
    7226:	a8 e4       	ldi	r26, 0x48	; 72
    7228:	b3 e4       	ldi	r27, 0x43	; 67
    722a:	89 8f       	std	Y+25, r24	; 0x19
    722c:	9a 8f       	std	Y+26, r25	; 0x1a
    722e:	ab 8f       	std	Y+27, r26	; 0x1b
    7230:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7232:	69 8d       	ldd	r22, Y+25	; 0x19
    7234:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7236:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7238:	9c 8d       	ldd	r25, Y+28	; 0x1c
    723a:	20 e0       	ldi	r18, 0x00	; 0
    723c:	30 e0       	ldi	r19, 0x00	; 0
    723e:	4a e7       	ldi	r20, 0x7A	; 122
    7240:	55 e4       	ldi	r21, 0x45	; 69
    7242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7246:	dc 01       	movw	r26, r24
    7248:	cb 01       	movw	r24, r22
    724a:	8d 8b       	std	Y+21, r24	; 0x15
    724c:	9e 8b       	std	Y+22, r25	; 0x16
    724e:	af 8b       	std	Y+23, r26	; 0x17
    7250:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7252:	6d 89       	ldd	r22, Y+21	; 0x15
    7254:	7e 89       	ldd	r23, Y+22	; 0x16
    7256:	8f 89       	ldd	r24, Y+23	; 0x17
    7258:	98 8d       	ldd	r25, Y+24	; 0x18
    725a:	20 e0       	ldi	r18, 0x00	; 0
    725c:	30 e0       	ldi	r19, 0x00	; 0
    725e:	40 e8       	ldi	r20, 0x80	; 128
    7260:	5f e3       	ldi	r21, 0x3F	; 63
    7262:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7266:	88 23       	and	r24, r24
    7268:	2c f4       	brge	.+10     	; 0x7274 <Save_Time_Processing+0x7ae>
		__ticks = 1;
    726a:	81 e0       	ldi	r24, 0x01	; 1
    726c:	90 e0       	ldi	r25, 0x00	; 0
    726e:	9c 8b       	std	Y+20, r25	; 0x14
    7270:	8b 8b       	std	Y+19, r24	; 0x13
    7272:	3f c0       	rjmp	.+126    	; 0x72f2 <Save_Time_Processing+0x82c>
	else if (__tmp > 65535)
    7274:	6d 89       	ldd	r22, Y+21	; 0x15
    7276:	7e 89       	ldd	r23, Y+22	; 0x16
    7278:	8f 89       	ldd	r24, Y+23	; 0x17
    727a:	98 8d       	ldd	r25, Y+24	; 0x18
    727c:	20 e0       	ldi	r18, 0x00	; 0
    727e:	3f ef       	ldi	r19, 0xFF	; 255
    7280:	4f e7       	ldi	r20, 0x7F	; 127
    7282:	57 e4       	ldi	r21, 0x47	; 71
    7284:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7288:	18 16       	cp	r1, r24
    728a:	4c f5       	brge	.+82     	; 0x72de <Save_Time_Processing+0x818>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    728c:	69 8d       	ldd	r22, Y+25	; 0x19
    728e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7290:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7292:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7294:	20 e0       	ldi	r18, 0x00	; 0
    7296:	30 e0       	ldi	r19, 0x00	; 0
    7298:	40 e2       	ldi	r20, 0x20	; 32
    729a:	51 e4       	ldi	r21, 0x41	; 65
    729c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    72a0:	dc 01       	movw	r26, r24
    72a2:	cb 01       	movw	r24, r22
    72a4:	bc 01       	movw	r22, r24
    72a6:	cd 01       	movw	r24, r26
    72a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72ac:	dc 01       	movw	r26, r24
    72ae:	cb 01       	movw	r24, r22
    72b0:	9c 8b       	std	Y+20, r25	; 0x14
    72b2:	8b 8b       	std	Y+19, r24	; 0x13
    72b4:	0f c0       	rjmp	.+30     	; 0x72d4 <Save_Time_Processing+0x80e>
    72b6:	80 e9       	ldi	r24, 0x90	; 144
    72b8:	91 e0       	ldi	r25, 0x01	; 1
    72ba:	9a 8b       	std	Y+18, r25	; 0x12
    72bc:	89 8b       	std	Y+17, r24	; 0x11
    72be:	89 89       	ldd	r24, Y+17	; 0x11
    72c0:	9a 89       	ldd	r25, Y+18	; 0x12
    72c2:	01 97       	sbiw	r24, 0x01	; 1
    72c4:	f1 f7       	brne	.-4      	; 0x72c2 <Save_Time_Processing+0x7fc>
    72c6:	9a 8b       	std	Y+18, r25	; 0x12
    72c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    72ca:	8b 89       	ldd	r24, Y+19	; 0x13
    72cc:	9c 89       	ldd	r25, Y+20	; 0x14
    72ce:	01 97       	sbiw	r24, 0x01	; 1
    72d0:	9c 8b       	std	Y+20, r25	; 0x14
    72d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    72d4:	8b 89       	ldd	r24, Y+19	; 0x13
    72d6:	9c 89       	ldd	r25, Y+20	; 0x14
    72d8:	00 97       	sbiw	r24, 0x00	; 0
    72da:	69 f7       	brne	.-38     	; 0x72b6 <Save_Time_Processing+0x7f0>
    72dc:	14 c0       	rjmp	.+40     	; 0x7306 <Save_Time_Processing+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    72de:	6d 89       	ldd	r22, Y+21	; 0x15
    72e0:	7e 89       	ldd	r23, Y+22	; 0x16
    72e2:	8f 89       	ldd	r24, Y+23	; 0x17
    72e4:	98 8d       	ldd	r25, Y+24	; 0x18
    72e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    72ea:	dc 01       	movw	r26, r24
    72ec:	cb 01       	movw	r24, r22
    72ee:	9c 8b       	std	Y+20, r25	; 0x14
    72f0:	8b 8b       	std	Y+19, r24	; 0x13
    72f2:	8b 89       	ldd	r24, Y+19	; 0x13
    72f4:	9c 89       	ldd	r25, Y+20	; 0x14
    72f6:	98 8b       	std	Y+16, r25	; 0x10
    72f8:	8f 87       	std	Y+15, r24	; 0x0f
    72fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    72fc:	98 89       	ldd	r25, Y+16	; 0x10
    72fe:	01 97       	sbiw	r24, 0x01	; 1
    7300:	f1 f7       	brne	.-4      	; 0x72fe <Save_Time_Processing+0x838>
    7302:	98 8b       	std	Y+16, r25	; 0x10
    7304:	8f 87       	std	Y+15, r24	; 0x0f
   _delay_ms(200);
   H_EEPROM_Void_WriteByte(26,H_RTC_Void_GetDate().RTC_Year);
    7306:	0e 94 d6 12 	call	0x25ac	; 0x25ac <H_RTC_Void_GetDate>
    730a:	fe 01       	movw	r30, r28
    730c:	e4 59       	subi	r30, 0x94	; 148
    730e:	ff 4f       	sbci	r31, 0xFF	; 255
    7310:	60 83       	st	Z, r22
    7312:	fe 01       	movw	r30, r28
    7314:	e3 59       	subi	r30, 0x93	; 147
    7316:	ff 4f       	sbci	r31, 0xFF	; 255
    7318:	70 83       	st	Z, r23
    731a:	fe 01       	movw	r30, r28
    731c:	e2 59       	subi	r30, 0x92	; 146
    731e:	ff 4f       	sbci	r31, 0xFF	; 255
    7320:	80 83       	st	Z, r24
    7322:	ce 01       	movw	r24, r28
    7324:	8d 59       	subi	r24, 0x9D	; 157
    7326:	9f 4f       	sbci	r25, 0xFF	; 255
    7328:	9e 01       	movw	r18, r28
    732a:	24 59       	subi	r18, 0x94	; 148
    732c:	3f 4f       	sbci	r19, 0xFF	; 255
    732e:	eb 96       	adiw	r28, 0x3b	; 59
    7330:	9f af       	std	Y+63, r25	; 0x3f
    7332:	8e af       	std	Y+62, r24	; 0x3e
    7334:	eb 97       	sbiw	r28, 0x3b	; 59
    7336:	ed 96       	adiw	r28, 0x3d	; 61
    7338:	3f af       	std	Y+63, r19	; 0x3f
    733a:	2e af       	std	Y+62, r18	; 0x3e
    733c:	ed 97       	sbiw	r28, 0x3d	; 61
    733e:	f3 e0       	ldi	r31, 0x03	; 3
    7340:	ee 96       	adiw	r28, 0x3e	; 62
    7342:	ff af       	std	Y+63, r31	; 0x3f
    7344:	ee 97       	sbiw	r28, 0x3e	; 62
    7346:	ed 96       	adiw	r28, 0x3d	; 61
    7348:	ee ad       	ldd	r30, Y+62	; 0x3e
    734a:	ff ad       	ldd	r31, Y+63	; 0x3f
    734c:	ed 97       	sbiw	r28, 0x3d	; 61
    734e:	00 80       	ld	r0, Z
    7350:	ed 96       	adiw	r28, 0x3d	; 61
    7352:	8e ad       	ldd	r24, Y+62	; 0x3e
    7354:	9f ad       	ldd	r25, Y+63	; 0x3f
    7356:	ed 97       	sbiw	r28, 0x3d	; 61
    7358:	01 96       	adiw	r24, 0x01	; 1
    735a:	ed 96       	adiw	r28, 0x3d	; 61
    735c:	9f af       	std	Y+63, r25	; 0x3f
    735e:	8e af       	std	Y+62, r24	; 0x3e
    7360:	ed 97       	sbiw	r28, 0x3d	; 61
    7362:	eb 96       	adiw	r28, 0x3b	; 59
    7364:	ee ad       	ldd	r30, Y+62	; 0x3e
    7366:	ff ad       	ldd	r31, Y+63	; 0x3f
    7368:	eb 97       	sbiw	r28, 0x3b	; 59
    736a:	00 82       	st	Z, r0
    736c:	eb 96       	adiw	r28, 0x3b	; 59
    736e:	8e ad       	ldd	r24, Y+62	; 0x3e
    7370:	9f ad       	ldd	r25, Y+63	; 0x3f
    7372:	eb 97       	sbiw	r28, 0x3b	; 59
    7374:	01 96       	adiw	r24, 0x01	; 1
    7376:	eb 96       	adiw	r28, 0x3b	; 59
    7378:	9f af       	std	Y+63, r25	; 0x3f
    737a:	8e af       	std	Y+62, r24	; 0x3e
    737c:	eb 97       	sbiw	r28, 0x3b	; 59
    737e:	ee 96       	adiw	r28, 0x3e	; 62
    7380:	9f ad       	ldd	r25, Y+63	; 0x3f
    7382:	ee 97       	sbiw	r28, 0x3e	; 62
    7384:	91 50       	subi	r25, 0x01	; 1
    7386:	ee 96       	adiw	r28, 0x3e	; 62
    7388:	9f af       	std	Y+63, r25	; 0x3f
    738a:	ee 97       	sbiw	r28, 0x3e	; 62
    738c:	ee 96       	adiw	r28, 0x3e	; 62
    738e:	ef ad       	ldd	r30, Y+63	; 0x3f
    7390:	ee 97       	sbiw	r28, 0x3e	; 62
    7392:	ee 23       	and	r30, r30
    7394:	c1 f6       	brne	.-80     	; 0x7346 <Save_Time_Processing+0x880>
    7396:	fe 01       	movw	r30, r28
    7398:	ed 59       	subi	r30, 0x9D	; 157
    739a:	ff 4f       	sbci	r31, 0xFF	; 255
    739c:	22 81       	ldd	r18, Z+2	; 0x02
    739e:	8a e1       	ldi	r24, 0x1A	; 26
    73a0:	90 e0       	ldi	r25, 0x00	; 0
    73a2:	62 2f       	mov	r22, r18
    73a4:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <H_EEPROM_Void_WriteByte>
    73a8:	80 e0       	ldi	r24, 0x00	; 0
    73aa:	90 e0       	ldi	r25, 0x00	; 0
    73ac:	a8 e4       	ldi	r26, 0x48	; 72
    73ae:	b3 e4       	ldi	r27, 0x43	; 67
    73b0:	8b 87       	std	Y+11, r24	; 0x0b
    73b2:	9c 87       	std	Y+12, r25	; 0x0c
    73b4:	ad 87       	std	Y+13, r26	; 0x0d
    73b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    73b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    73ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    73bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    73be:	9e 85       	ldd	r25, Y+14	; 0x0e
    73c0:	20 e0       	ldi	r18, 0x00	; 0
    73c2:	30 e0       	ldi	r19, 0x00	; 0
    73c4:	4a e7       	ldi	r20, 0x7A	; 122
    73c6:	55 e4       	ldi	r21, 0x45	; 69
    73c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    73cc:	dc 01       	movw	r26, r24
    73ce:	cb 01       	movw	r24, r22
    73d0:	8f 83       	std	Y+7, r24	; 0x07
    73d2:	98 87       	std	Y+8, r25	; 0x08
    73d4:	a9 87       	std	Y+9, r26	; 0x09
    73d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    73d8:	6f 81       	ldd	r22, Y+7	; 0x07
    73da:	78 85       	ldd	r23, Y+8	; 0x08
    73dc:	89 85       	ldd	r24, Y+9	; 0x09
    73de:	9a 85       	ldd	r25, Y+10	; 0x0a
    73e0:	20 e0       	ldi	r18, 0x00	; 0
    73e2:	30 e0       	ldi	r19, 0x00	; 0
    73e4:	40 e8       	ldi	r20, 0x80	; 128
    73e6:	5f e3       	ldi	r21, 0x3F	; 63
    73e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    73ec:	88 23       	and	r24, r24
    73ee:	2c f4       	brge	.+10     	; 0x73fa <Save_Time_Processing+0x934>
		__ticks = 1;
    73f0:	81 e0       	ldi	r24, 0x01	; 1
    73f2:	90 e0       	ldi	r25, 0x00	; 0
    73f4:	9e 83       	std	Y+6, r25	; 0x06
    73f6:	8d 83       	std	Y+5, r24	; 0x05
    73f8:	3f c0       	rjmp	.+126    	; 0x7478 <Save_Time_Processing+0x9b2>
	else if (__tmp > 65535)
    73fa:	6f 81       	ldd	r22, Y+7	; 0x07
    73fc:	78 85       	ldd	r23, Y+8	; 0x08
    73fe:	89 85       	ldd	r24, Y+9	; 0x09
    7400:	9a 85       	ldd	r25, Y+10	; 0x0a
    7402:	20 e0       	ldi	r18, 0x00	; 0
    7404:	3f ef       	ldi	r19, 0xFF	; 255
    7406:	4f e7       	ldi	r20, 0x7F	; 127
    7408:	57 e4       	ldi	r21, 0x47	; 71
    740a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    740e:	18 16       	cp	r1, r24
    7410:	4c f5       	brge	.+82     	; 0x7464 <Save_Time_Processing+0x99e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7412:	6b 85       	ldd	r22, Y+11	; 0x0b
    7414:	7c 85       	ldd	r23, Y+12	; 0x0c
    7416:	8d 85       	ldd	r24, Y+13	; 0x0d
    7418:	9e 85       	ldd	r25, Y+14	; 0x0e
    741a:	20 e0       	ldi	r18, 0x00	; 0
    741c:	30 e0       	ldi	r19, 0x00	; 0
    741e:	40 e2       	ldi	r20, 0x20	; 32
    7420:	51 e4       	ldi	r21, 0x41	; 65
    7422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7426:	dc 01       	movw	r26, r24
    7428:	cb 01       	movw	r24, r22
    742a:	bc 01       	movw	r22, r24
    742c:	cd 01       	movw	r24, r26
    742e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7432:	dc 01       	movw	r26, r24
    7434:	cb 01       	movw	r24, r22
    7436:	9e 83       	std	Y+6, r25	; 0x06
    7438:	8d 83       	std	Y+5, r24	; 0x05
    743a:	0f c0       	rjmp	.+30     	; 0x745a <Save_Time_Processing+0x994>
    743c:	80 e9       	ldi	r24, 0x90	; 144
    743e:	91 e0       	ldi	r25, 0x01	; 1
    7440:	9c 83       	std	Y+4, r25	; 0x04
    7442:	8b 83       	std	Y+3, r24	; 0x03
    7444:	8b 81       	ldd	r24, Y+3	; 0x03
    7446:	9c 81       	ldd	r25, Y+4	; 0x04
    7448:	01 97       	sbiw	r24, 0x01	; 1
    744a:	f1 f7       	brne	.-4      	; 0x7448 <Save_Time_Processing+0x982>
    744c:	9c 83       	std	Y+4, r25	; 0x04
    744e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7450:	8d 81       	ldd	r24, Y+5	; 0x05
    7452:	9e 81       	ldd	r25, Y+6	; 0x06
    7454:	01 97       	sbiw	r24, 0x01	; 1
    7456:	9e 83       	std	Y+6, r25	; 0x06
    7458:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    745a:	8d 81       	ldd	r24, Y+5	; 0x05
    745c:	9e 81       	ldd	r25, Y+6	; 0x06
    745e:	00 97       	sbiw	r24, 0x00	; 0
    7460:	69 f7       	brne	.-38     	; 0x743c <Save_Time_Processing+0x976>
    7462:	14 c0       	rjmp	.+40     	; 0x748c <Save_Time_Processing+0x9c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7464:	6f 81       	ldd	r22, Y+7	; 0x07
    7466:	78 85       	ldd	r23, Y+8	; 0x08
    7468:	89 85       	ldd	r24, Y+9	; 0x09
    746a:	9a 85       	ldd	r25, Y+10	; 0x0a
    746c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7470:	dc 01       	movw	r26, r24
    7472:	cb 01       	movw	r24, r22
    7474:	9e 83       	std	Y+6, r25	; 0x06
    7476:	8d 83       	std	Y+5, r24	; 0x05
    7478:	8d 81       	ldd	r24, Y+5	; 0x05
    747a:	9e 81       	ldd	r25, Y+6	; 0x06
    747c:	9a 83       	std	Y+2, r25	; 0x02
    747e:	89 83       	std	Y+1, r24	; 0x01
    7480:	89 81       	ldd	r24, Y+1	; 0x01
    7482:	9a 81       	ldd	r25, Y+2	; 0x02
    7484:	01 97       	sbiw	r24, 0x01	; 1
    7486:	f1 f7       	brne	.-4      	; 0x7484 <Save_Time_Processing+0x9be>
    7488:	9a 83       	std	Y+2, r25	; 0x02
    748a:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(200);
}
    748c:	c3 58       	subi	r28, 0x83	; 131
    748e:	df 4f       	sbci	r29, 0xFF	; 255
    7490:	0f b6       	in	r0, 0x3f	; 63
    7492:	f8 94       	cli
    7494:	de bf       	out	0x3e, r29	; 62
    7496:	0f be       	out	0x3f, r0	; 63
    7498:	cd bf       	out	0x3d, r28	; 61
    749a:	cf 91       	pop	r28
    749c:	df 91       	pop	r29
    749e:	1f 91       	pop	r17
    74a0:	0f 91       	pop	r16
    74a2:	08 95       	ret

000074a4 <Display_Time_Processing>:

void Display_Time_Processing(void)
{
    74a4:	0f 93       	push	r16
    74a6:	1f 93       	push	r17
    74a8:	df 93       	push	r29
    74aa:	cf 93       	push	r28
    74ac:	cd b7       	in	r28, 0x3d	; 61
    74ae:	de b7       	in	r29, 0x3e	; 62
    74b0:	c1 57       	subi	r28, 0x71	; 113
    74b2:	d0 40       	sbci	r29, 0x00	; 0
    74b4:	0f b6       	in	r0, 0x3f	; 63
    74b6:	f8 94       	cli
    74b8:	de bf       	out	0x3e, r29	; 62
    74ba:	0f be       	out	0x3f, r0	; 63
    74bc:	cd bf       	out	0x3d, r28	; 61
		u8 datat;
		H_LCD_void_gotoXY(3,0);
    74be:	83 e0       	ldi	r24, 0x03	; 3
    74c0:	60 e0       	ldi	r22, 0x00	; 0
    74c2:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
    74c6:	fe 01       	movw	r30, r28
    74c8:	e3 59       	subi	r30, 0x93	; 147
    74ca:	ff 4f       	sbci	r31, 0xFF	; 255
    74cc:	80 e0       	ldi	r24, 0x00	; 0
    74ce:	90 e0       	ldi	r25, 0x00	; 0
    74d0:	a8 e4       	ldi	r26, 0x48	; 72
    74d2:	b3 e4       	ldi	r27, 0x43	; 67
    74d4:	80 83       	st	Z, r24
    74d6:	91 83       	std	Z+1, r25	; 0x01
    74d8:	a2 83       	std	Z+2, r26	; 0x02
    74da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    74dc:	8e 01       	movw	r16, r28
    74de:	07 59       	subi	r16, 0x97	; 151
    74e0:	1f 4f       	sbci	r17, 0xFF	; 255
    74e2:	fe 01       	movw	r30, r28
    74e4:	e3 59       	subi	r30, 0x93	; 147
    74e6:	ff 4f       	sbci	r31, 0xFF	; 255
    74e8:	60 81       	ld	r22, Z
    74ea:	71 81       	ldd	r23, Z+1	; 0x01
    74ec:	82 81       	ldd	r24, Z+2	; 0x02
    74ee:	93 81       	ldd	r25, Z+3	; 0x03
    74f0:	20 e0       	ldi	r18, 0x00	; 0
    74f2:	30 e0       	ldi	r19, 0x00	; 0
    74f4:	4a e7       	ldi	r20, 0x7A	; 122
    74f6:	55 e4       	ldi	r21, 0x45	; 69
    74f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    74fc:	dc 01       	movw	r26, r24
    74fe:	cb 01       	movw	r24, r22
    7500:	f8 01       	movw	r30, r16
    7502:	80 83       	st	Z, r24
    7504:	91 83       	std	Z+1, r25	; 0x01
    7506:	a2 83       	std	Z+2, r26	; 0x02
    7508:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    750a:	fe 01       	movw	r30, r28
    750c:	e7 59       	subi	r30, 0x97	; 151
    750e:	ff 4f       	sbci	r31, 0xFF	; 255
    7510:	60 81       	ld	r22, Z
    7512:	71 81       	ldd	r23, Z+1	; 0x01
    7514:	82 81       	ldd	r24, Z+2	; 0x02
    7516:	93 81       	ldd	r25, Z+3	; 0x03
    7518:	20 e0       	ldi	r18, 0x00	; 0
    751a:	30 e0       	ldi	r19, 0x00	; 0
    751c:	40 e8       	ldi	r20, 0x80	; 128
    751e:	5f e3       	ldi	r21, 0x3F	; 63
    7520:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7524:	88 23       	and	r24, r24
    7526:	44 f4       	brge	.+16     	; 0x7538 <Display_Time_Processing+0x94>
		__ticks = 1;
    7528:	fe 01       	movw	r30, r28
    752a:	e9 59       	subi	r30, 0x99	; 153
    752c:	ff 4f       	sbci	r31, 0xFF	; 255
    752e:	81 e0       	ldi	r24, 0x01	; 1
    7530:	90 e0       	ldi	r25, 0x00	; 0
    7532:	91 83       	std	Z+1, r25	; 0x01
    7534:	80 83       	st	Z, r24
    7536:	64 c0       	rjmp	.+200    	; 0x7600 <Display_Time_Processing+0x15c>
	else if (__tmp > 65535)
    7538:	fe 01       	movw	r30, r28
    753a:	e7 59       	subi	r30, 0x97	; 151
    753c:	ff 4f       	sbci	r31, 0xFF	; 255
    753e:	60 81       	ld	r22, Z
    7540:	71 81       	ldd	r23, Z+1	; 0x01
    7542:	82 81       	ldd	r24, Z+2	; 0x02
    7544:	93 81       	ldd	r25, Z+3	; 0x03
    7546:	20 e0       	ldi	r18, 0x00	; 0
    7548:	3f ef       	ldi	r19, 0xFF	; 255
    754a:	4f e7       	ldi	r20, 0x7F	; 127
    754c:	57 e4       	ldi	r21, 0x47	; 71
    754e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7552:	18 16       	cp	r1, r24
    7554:	0c f0       	brlt	.+2      	; 0x7558 <Display_Time_Processing+0xb4>
    7556:	43 c0       	rjmp	.+134    	; 0x75de <Display_Time_Processing+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7558:	fe 01       	movw	r30, r28
    755a:	e3 59       	subi	r30, 0x93	; 147
    755c:	ff 4f       	sbci	r31, 0xFF	; 255
    755e:	60 81       	ld	r22, Z
    7560:	71 81       	ldd	r23, Z+1	; 0x01
    7562:	82 81       	ldd	r24, Z+2	; 0x02
    7564:	93 81       	ldd	r25, Z+3	; 0x03
    7566:	20 e0       	ldi	r18, 0x00	; 0
    7568:	30 e0       	ldi	r19, 0x00	; 0
    756a:	40 e2       	ldi	r20, 0x20	; 32
    756c:	51 e4       	ldi	r21, 0x41	; 65
    756e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7572:	dc 01       	movw	r26, r24
    7574:	cb 01       	movw	r24, r22
    7576:	8e 01       	movw	r16, r28
    7578:	09 59       	subi	r16, 0x99	; 153
    757a:	1f 4f       	sbci	r17, 0xFF	; 255
    757c:	bc 01       	movw	r22, r24
    757e:	cd 01       	movw	r24, r26
    7580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7584:	dc 01       	movw	r26, r24
    7586:	cb 01       	movw	r24, r22
    7588:	f8 01       	movw	r30, r16
    758a:	91 83       	std	Z+1, r25	; 0x01
    758c:	80 83       	st	Z, r24
    758e:	1f c0       	rjmp	.+62     	; 0x75ce <Display_Time_Processing+0x12a>
    7590:	fe 01       	movw	r30, r28
    7592:	eb 59       	subi	r30, 0x9B	; 155
    7594:	ff 4f       	sbci	r31, 0xFF	; 255
    7596:	80 e9       	ldi	r24, 0x90	; 144
    7598:	91 e0       	ldi	r25, 0x01	; 1
    759a:	91 83       	std	Z+1, r25	; 0x01
    759c:	80 83       	st	Z, r24
    759e:	fe 01       	movw	r30, r28
    75a0:	eb 59       	subi	r30, 0x9B	; 155
    75a2:	ff 4f       	sbci	r31, 0xFF	; 255
    75a4:	80 81       	ld	r24, Z
    75a6:	91 81       	ldd	r25, Z+1	; 0x01
    75a8:	01 97       	sbiw	r24, 0x01	; 1
    75aa:	f1 f7       	brne	.-4      	; 0x75a8 <Display_Time_Processing+0x104>
    75ac:	fe 01       	movw	r30, r28
    75ae:	eb 59       	subi	r30, 0x9B	; 155
    75b0:	ff 4f       	sbci	r31, 0xFF	; 255
    75b2:	91 83       	std	Z+1, r25	; 0x01
    75b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    75b6:	de 01       	movw	r26, r28
    75b8:	a9 59       	subi	r26, 0x99	; 153
    75ba:	bf 4f       	sbci	r27, 0xFF	; 255
    75bc:	fe 01       	movw	r30, r28
    75be:	e9 59       	subi	r30, 0x99	; 153
    75c0:	ff 4f       	sbci	r31, 0xFF	; 255
    75c2:	80 81       	ld	r24, Z
    75c4:	91 81       	ldd	r25, Z+1	; 0x01
    75c6:	01 97       	sbiw	r24, 0x01	; 1
    75c8:	11 96       	adiw	r26, 0x01	; 1
    75ca:	9c 93       	st	X, r25
    75cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    75ce:	fe 01       	movw	r30, r28
    75d0:	e9 59       	subi	r30, 0x99	; 153
    75d2:	ff 4f       	sbci	r31, 0xFF	; 255
    75d4:	80 81       	ld	r24, Z
    75d6:	91 81       	ldd	r25, Z+1	; 0x01
    75d8:	00 97       	sbiw	r24, 0x00	; 0
    75da:	d1 f6       	brne	.-76     	; 0x7590 <Display_Time_Processing+0xec>
    75dc:	27 c0       	rjmp	.+78     	; 0x762c <Display_Time_Processing+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    75de:	8e 01       	movw	r16, r28
    75e0:	09 59       	subi	r16, 0x99	; 153
    75e2:	1f 4f       	sbci	r17, 0xFF	; 255
    75e4:	fe 01       	movw	r30, r28
    75e6:	e7 59       	subi	r30, 0x97	; 151
    75e8:	ff 4f       	sbci	r31, 0xFF	; 255
    75ea:	60 81       	ld	r22, Z
    75ec:	71 81       	ldd	r23, Z+1	; 0x01
    75ee:	82 81       	ldd	r24, Z+2	; 0x02
    75f0:	93 81       	ldd	r25, Z+3	; 0x03
    75f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75f6:	dc 01       	movw	r26, r24
    75f8:	cb 01       	movw	r24, r22
    75fa:	f8 01       	movw	r30, r16
    75fc:	91 83       	std	Z+1, r25	; 0x01
    75fe:	80 83       	st	Z, r24
    7600:	de 01       	movw	r26, r28
    7602:	ad 59       	subi	r26, 0x9D	; 157
    7604:	bf 4f       	sbci	r27, 0xFF	; 255
    7606:	fe 01       	movw	r30, r28
    7608:	e9 59       	subi	r30, 0x99	; 153
    760a:	ff 4f       	sbci	r31, 0xFF	; 255
    760c:	80 81       	ld	r24, Z
    760e:	91 81       	ldd	r25, Z+1	; 0x01
    7610:	8d 93       	st	X+, r24
    7612:	9c 93       	st	X, r25
    7614:	fe 01       	movw	r30, r28
    7616:	ed 59       	subi	r30, 0x9D	; 157
    7618:	ff 4f       	sbci	r31, 0xFF	; 255
    761a:	80 81       	ld	r24, Z
    761c:	91 81       	ldd	r25, Z+1	; 0x01
    761e:	01 97       	sbiw	r24, 0x01	; 1
    7620:	f1 f7       	brne	.-4      	; 0x761e <Display_Time_Processing+0x17a>
    7622:	fe 01       	movw	r30, r28
    7624:	ed 59       	subi	r30, 0x9D	; 157
    7626:	ff 4f       	sbci	r31, 0xFF	; 255
    7628:	91 83       	std	Z+1, r25	; 0x01
    762a:	80 83       	st	Z, r24
		_delay_ms(200);
		   H_EEPROM_Void_ReadByte(24,&datat);
    762c:	9e 01       	movw	r18, r28
    762e:	2f 58       	subi	r18, 0x8F	; 143
    7630:	3f 4f       	sbci	r19, 0xFF	; 255
    7632:	88 e1       	ldi	r24, 0x18	; 24
    7634:	90 e0       	ldi	r25, 0x00	; 0
    7636:	b9 01       	movw	r22, r18
    7638:	0e 94 18 26 	call	0x4c30	; 0x4c30 <H_EEPROM_Void_ReadByte>
			H_LCD_void_sendIntNum((u16)datat);
    763c:	fe 01       	movw	r30, r28
    763e:	ef 58       	subi	r30, 0x8F	; 143
    7640:	ff 4f       	sbci	r31, 0xFF	; 255
    7642:	80 81       	ld	r24, Z
    7644:	88 2f       	mov	r24, r24
    7646:	90 e0       	ldi	r25, 0x00	; 0
    7648:	a0 e0       	ldi	r26, 0x00	; 0
    764a:	b0 e0       	ldi	r27, 0x00	; 0
    764c:	bc 01       	movw	r22, r24
    764e:	cd 01       	movw	r24, r26
    7650:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>
			H_LCD_void_sendData('/');
    7654:	8f e2       	ldi	r24, 0x2F	; 47
    7656:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
    765a:	fe 01       	movw	r30, r28
    765c:	e1 5a       	subi	r30, 0xA1	; 161
    765e:	ff 4f       	sbci	r31, 0xFF	; 255
    7660:	80 e0       	ldi	r24, 0x00	; 0
    7662:	90 e0       	ldi	r25, 0x00	; 0
    7664:	a8 e4       	ldi	r26, 0x48	; 72
    7666:	b3 e4       	ldi	r27, 0x43	; 67
    7668:	80 83       	st	Z, r24
    766a:	91 83       	std	Z+1, r25	; 0x01
    766c:	a2 83       	std	Z+2, r26	; 0x02
    766e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7670:	8e 01       	movw	r16, r28
    7672:	05 5a       	subi	r16, 0xA5	; 165
    7674:	1f 4f       	sbci	r17, 0xFF	; 255
    7676:	fe 01       	movw	r30, r28
    7678:	e1 5a       	subi	r30, 0xA1	; 161
    767a:	ff 4f       	sbci	r31, 0xFF	; 255
    767c:	60 81       	ld	r22, Z
    767e:	71 81       	ldd	r23, Z+1	; 0x01
    7680:	82 81       	ldd	r24, Z+2	; 0x02
    7682:	93 81       	ldd	r25, Z+3	; 0x03
    7684:	20 e0       	ldi	r18, 0x00	; 0
    7686:	30 e0       	ldi	r19, 0x00	; 0
    7688:	4a e7       	ldi	r20, 0x7A	; 122
    768a:	55 e4       	ldi	r21, 0x45	; 69
    768c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7690:	dc 01       	movw	r26, r24
    7692:	cb 01       	movw	r24, r22
    7694:	f8 01       	movw	r30, r16
    7696:	80 83       	st	Z, r24
    7698:	91 83       	std	Z+1, r25	; 0x01
    769a:	a2 83       	std	Z+2, r26	; 0x02
    769c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    769e:	fe 01       	movw	r30, r28
    76a0:	e5 5a       	subi	r30, 0xA5	; 165
    76a2:	ff 4f       	sbci	r31, 0xFF	; 255
    76a4:	60 81       	ld	r22, Z
    76a6:	71 81       	ldd	r23, Z+1	; 0x01
    76a8:	82 81       	ldd	r24, Z+2	; 0x02
    76aa:	93 81       	ldd	r25, Z+3	; 0x03
    76ac:	20 e0       	ldi	r18, 0x00	; 0
    76ae:	30 e0       	ldi	r19, 0x00	; 0
    76b0:	40 e8       	ldi	r20, 0x80	; 128
    76b2:	5f e3       	ldi	r21, 0x3F	; 63
    76b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    76b8:	88 23       	and	r24, r24
    76ba:	44 f4       	brge	.+16     	; 0x76cc <Display_Time_Processing+0x228>
		__ticks = 1;
    76bc:	fe 01       	movw	r30, r28
    76be:	e7 5a       	subi	r30, 0xA7	; 167
    76c0:	ff 4f       	sbci	r31, 0xFF	; 255
    76c2:	81 e0       	ldi	r24, 0x01	; 1
    76c4:	90 e0       	ldi	r25, 0x00	; 0
    76c6:	91 83       	std	Z+1, r25	; 0x01
    76c8:	80 83       	st	Z, r24
    76ca:	64 c0       	rjmp	.+200    	; 0x7794 <Display_Time_Processing+0x2f0>
	else if (__tmp > 65535)
    76cc:	fe 01       	movw	r30, r28
    76ce:	e5 5a       	subi	r30, 0xA5	; 165
    76d0:	ff 4f       	sbci	r31, 0xFF	; 255
    76d2:	60 81       	ld	r22, Z
    76d4:	71 81       	ldd	r23, Z+1	; 0x01
    76d6:	82 81       	ldd	r24, Z+2	; 0x02
    76d8:	93 81       	ldd	r25, Z+3	; 0x03
    76da:	20 e0       	ldi	r18, 0x00	; 0
    76dc:	3f ef       	ldi	r19, 0xFF	; 255
    76de:	4f e7       	ldi	r20, 0x7F	; 127
    76e0:	57 e4       	ldi	r21, 0x47	; 71
    76e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    76e6:	18 16       	cp	r1, r24
    76e8:	0c f0       	brlt	.+2      	; 0x76ec <Display_Time_Processing+0x248>
    76ea:	43 c0       	rjmp	.+134    	; 0x7772 <Display_Time_Processing+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    76ec:	fe 01       	movw	r30, r28
    76ee:	e1 5a       	subi	r30, 0xA1	; 161
    76f0:	ff 4f       	sbci	r31, 0xFF	; 255
    76f2:	60 81       	ld	r22, Z
    76f4:	71 81       	ldd	r23, Z+1	; 0x01
    76f6:	82 81       	ldd	r24, Z+2	; 0x02
    76f8:	93 81       	ldd	r25, Z+3	; 0x03
    76fa:	20 e0       	ldi	r18, 0x00	; 0
    76fc:	30 e0       	ldi	r19, 0x00	; 0
    76fe:	40 e2       	ldi	r20, 0x20	; 32
    7700:	51 e4       	ldi	r21, 0x41	; 65
    7702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7706:	dc 01       	movw	r26, r24
    7708:	cb 01       	movw	r24, r22
    770a:	8e 01       	movw	r16, r28
    770c:	07 5a       	subi	r16, 0xA7	; 167
    770e:	1f 4f       	sbci	r17, 0xFF	; 255
    7710:	bc 01       	movw	r22, r24
    7712:	cd 01       	movw	r24, r26
    7714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7718:	dc 01       	movw	r26, r24
    771a:	cb 01       	movw	r24, r22
    771c:	f8 01       	movw	r30, r16
    771e:	91 83       	std	Z+1, r25	; 0x01
    7720:	80 83       	st	Z, r24
    7722:	1f c0       	rjmp	.+62     	; 0x7762 <Display_Time_Processing+0x2be>
    7724:	fe 01       	movw	r30, r28
    7726:	e9 5a       	subi	r30, 0xA9	; 169
    7728:	ff 4f       	sbci	r31, 0xFF	; 255
    772a:	80 e9       	ldi	r24, 0x90	; 144
    772c:	91 e0       	ldi	r25, 0x01	; 1
    772e:	91 83       	std	Z+1, r25	; 0x01
    7730:	80 83       	st	Z, r24
    7732:	fe 01       	movw	r30, r28
    7734:	e9 5a       	subi	r30, 0xA9	; 169
    7736:	ff 4f       	sbci	r31, 0xFF	; 255
    7738:	80 81       	ld	r24, Z
    773a:	91 81       	ldd	r25, Z+1	; 0x01
    773c:	01 97       	sbiw	r24, 0x01	; 1
    773e:	f1 f7       	brne	.-4      	; 0x773c <Display_Time_Processing+0x298>
    7740:	fe 01       	movw	r30, r28
    7742:	e9 5a       	subi	r30, 0xA9	; 169
    7744:	ff 4f       	sbci	r31, 0xFF	; 255
    7746:	91 83       	std	Z+1, r25	; 0x01
    7748:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    774a:	de 01       	movw	r26, r28
    774c:	a7 5a       	subi	r26, 0xA7	; 167
    774e:	bf 4f       	sbci	r27, 0xFF	; 255
    7750:	fe 01       	movw	r30, r28
    7752:	e7 5a       	subi	r30, 0xA7	; 167
    7754:	ff 4f       	sbci	r31, 0xFF	; 255
    7756:	80 81       	ld	r24, Z
    7758:	91 81       	ldd	r25, Z+1	; 0x01
    775a:	01 97       	sbiw	r24, 0x01	; 1
    775c:	11 96       	adiw	r26, 0x01	; 1
    775e:	9c 93       	st	X, r25
    7760:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7762:	fe 01       	movw	r30, r28
    7764:	e7 5a       	subi	r30, 0xA7	; 167
    7766:	ff 4f       	sbci	r31, 0xFF	; 255
    7768:	80 81       	ld	r24, Z
    776a:	91 81       	ldd	r25, Z+1	; 0x01
    776c:	00 97       	sbiw	r24, 0x00	; 0
    776e:	d1 f6       	brne	.-76     	; 0x7724 <Display_Time_Processing+0x280>
    7770:	27 c0       	rjmp	.+78     	; 0x77c0 <Display_Time_Processing+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7772:	8e 01       	movw	r16, r28
    7774:	07 5a       	subi	r16, 0xA7	; 167
    7776:	1f 4f       	sbci	r17, 0xFF	; 255
    7778:	fe 01       	movw	r30, r28
    777a:	e5 5a       	subi	r30, 0xA5	; 165
    777c:	ff 4f       	sbci	r31, 0xFF	; 255
    777e:	60 81       	ld	r22, Z
    7780:	71 81       	ldd	r23, Z+1	; 0x01
    7782:	82 81       	ldd	r24, Z+2	; 0x02
    7784:	93 81       	ldd	r25, Z+3	; 0x03
    7786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    778a:	dc 01       	movw	r26, r24
    778c:	cb 01       	movw	r24, r22
    778e:	f8 01       	movw	r30, r16
    7790:	91 83       	std	Z+1, r25	; 0x01
    7792:	80 83       	st	Z, r24
    7794:	de 01       	movw	r26, r28
    7796:	ab 5a       	subi	r26, 0xAB	; 171
    7798:	bf 4f       	sbci	r27, 0xFF	; 255
    779a:	fe 01       	movw	r30, r28
    779c:	e7 5a       	subi	r30, 0xA7	; 167
    779e:	ff 4f       	sbci	r31, 0xFF	; 255
    77a0:	80 81       	ld	r24, Z
    77a2:	91 81       	ldd	r25, Z+1	; 0x01
    77a4:	8d 93       	st	X+, r24
    77a6:	9c 93       	st	X, r25
    77a8:	fe 01       	movw	r30, r28
    77aa:	eb 5a       	subi	r30, 0xAB	; 171
    77ac:	ff 4f       	sbci	r31, 0xFF	; 255
    77ae:	80 81       	ld	r24, Z
    77b0:	91 81       	ldd	r25, Z+1	; 0x01
    77b2:	01 97       	sbiw	r24, 0x01	; 1
    77b4:	f1 f7       	brne	.-4      	; 0x77b2 <Display_Time_Processing+0x30e>
    77b6:	fe 01       	movw	r30, r28
    77b8:	eb 5a       	subi	r30, 0xAB	; 171
    77ba:	ff 4f       	sbci	r31, 0xFF	; 255
    77bc:	91 83       	std	Z+1, r25	; 0x01
    77be:	80 83       	st	Z, r24
		_delay_ms(200);
		   H_EEPROM_Void_ReadByte(25,&datat);
    77c0:	9e 01       	movw	r18, r28
    77c2:	2f 58       	subi	r18, 0x8F	; 143
    77c4:	3f 4f       	sbci	r19, 0xFF	; 255
    77c6:	89 e1       	ldi	r24, 0x19	; 25
    77c8:	90 e0       	ldi	r25, 0x00	; 0
    77ca:	b9 01       	movw	r22, r18
    77cc:	0e 94 18 26 	call	0x4c30	; 0x4c30 <H_EEPROM_Void_ReadByte>
			H_LCD_void_sendIntNum((u16)datat);
    77d0:	fe 01       	movw	r30, r28
    77d2:	ef 58       	subi	r30, 0x8F	; 143
    77d4:	ff 4f       	sbci	r31, 0xFF	; 255
    77d6:	80 81       	ld	r24, Z
    77d8:	88 2f       	mov	r24, r24
    77da:	90 e0       	ldi	r25, 0x00	; 0
    77dc:	a0 e0       	ldi	r26, 0x00	; 0
    77de:	b0 e0       	ldi	r27, 0x00	; 0
    77e0:	bc 01       	movw	r22, r24
    77e2:	cd 01       	movw	r24, r26
    77e4:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>
			H_LCD_void_sendData('/');
    77e8:	8f e2       	ldi	r24, 0x2F	; 47
    77ea:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
    77ee:	fe 01       	movw	r30, r28
    77f0:	ef 5a       	subi	r30, 0xAF	; 175
    77f2:	ff 4f       	sbci	r31, 0xFF	; 255
    77f4:	80 e0       	ldi	r24, 0x00	; 0
    77f6:	90 e0       	ldi	r25, 0x00	; 0
    77f8:	a8 e4       	ldi	r26, 0x48	; 72
    77fa:	b3 e4       	ldi	r27, 0x43	; 67
    77fc:	80 83       	st	Z, r24
    77fe:	91 83       	std	Z+1, r25	; 0x01
    7800:	a2 83       	std	Z+2, r26	; 0x02
    7802:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7804:	8e 01       	movw	r16, r28
    7806:	03 5b       	subi	r16, 0xB3	; 179
    7808:	1f 4f       	sbci	r17, 0xFF	; 255
    780a:	fe 01       	movw	r30, r28
    780c:	ef 5a       	subi	r30, 0xAF	; 175
    780e:	ff 4f       	sbci	r31, 0xFF	; 255
    7810:	60 81       	ld	r22, Z
    7812:	71 81       	ldd	r23, Z+1	; 0x01
    7814:	82 81       	ldd	r24, Z+2	; 0x02
    7816:	93 81       	ldd	r25, Z+3	; 0x03
    7818:	20 e0       	ldi	r18, 0x00	; 0
    781a:	30 e0       	ldi	r19, 0x00	; 0
    781c:	4a e7       	ldi	r20, 0x7A	; 122
    781e:	55 e4       	ldi	r21, 0x45	; 69
    7820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7824:	dc 01       	movw	r26, r24
    7826:	cb 01       	movw	r24, r22
    7828:	f8 01       	movw	r30, r16
    782a:	80 83       	st	Z, r24
    782c:	91 83       	std	Z+1, r25	; 0x01
    782e:	a2 83       	std	Z+2, r26	; 0x02
    7830:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7832:	fe 01       	movw	r30, r28
    7834:	e3 5b       	subi	r30, 0xB3	; 179
    7836:	ff 4f       	sbci	r31, 0xFF	; 255
    7838:	60 81       	ld	r22, Z
    783a:	71 81       	ldd	r23, Z+1	; 0x01
    783c:	82 81       	ldd	r24, Z+2	; 0x02
    783e:	93 81       	ldd	r25, Z+3	; 0x03
    7840:	20 e0       	ldi	r18, 0x00	; 0
    7842:	30 e0       	ldi	r19, 0x00	; 0
    7844:	40 e8       	ldi	r20, 0x80	; 128
    7846:	5f e3       	ldi	r21, 0x3F	; 63
    7848:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    784c:	88 23       	and	r24, r24
    784e:	44 f4       	brge	.+16     	; 0x7860 <Display_Time_Processing+0x3bc>
		__ticks = 1;
    7850:	fe 01       	movw	r30, r28
    7852:	e5 5b       	subi	r30, 0xB5	; 181
    7854:	ff 4f       	sbci	r31, 0xFF	; 255
    7856:	81 e0       	ldi	r24, 0x01	; 1
    7858:	90 e0       	ldi	r25, 0x00	; 0
    785a:	91 83       	std	Z+1, r25	; 0x01
    785c:	80 83       	st	Z, r24
    785e:	64 c0       	rjmp	.+200    	; 0x7928 <Display_Time_Processing+0x484>
	else if (__tmp > 65535)
    7860:	fe 01       	movw	r30, r28
    7862:	e3 5b       	subi	r30, 0xB3	; 179
    7864:	ff 4f       	sbci	r31, 0xFF	; 255
    7866:	60 81       	ld	r22, Z
    7868:	71 81       	ldd	r23, Z+1	; 0x01
    786a:	82 81       	ldd	r24, Z+2	; 0x02
    786c:	93 81       	ldd	r25, Z+3	; 0x03
    786e:	20 e0       	ldi	r18, 0x00	; 0
    7870:	3f ef       	ldi	r19, 0xFF	; 255
    7872:	4f e7       	ldi	r20, 0x7F	; 127
    7874:	57 e4       	ldi	r21, 0x47	; 71
    7876:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    787a:	18 16       	cp	r1, r24
    787c:	0c f0       	brlt	.+2      	; 0x7880 <Display_Time_Processing+0x3dc>
    787e:	43 c0       	rjmp	.+134    	; 0x7906 <Display_Time_Processing+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7880:	fe 01       	movw	r30, r28
    7882:	ef 5a       	subi	r30, 0xAF	; 175
    7884:	ff 4f       	sbci	r31, 0xFF	; 255
    7886:	60 81       	ld	r22, Z
    7888:	71 81       	ldd	r23, Z+1	; 0x01
    788a:	82 81       	ldd	r24, Z+2	; 0x02
    788c:	93 81       	ldd	r25, Z+3	; 0x03
    788e:	20 e0       	ldi	r18, 0x00	; 0
    7890:	30 e0       	ldi	r19, 0x00	; 0
    7892:	40 e2       	ldi	r20, 0x20	; 32
    7894:	51 e4       	ldi	r21, 0x41	; 65
    7896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    789a:	dc 01       	movw	r26, r24
    789c:	cb 01       	movw	r24, r22
    789e:	8e 01       	movw	r16, r28
    78a0:	05 5b       	subi	r16, 0xB5	; 181
    78a2:	1f 4f       	sbci	r17, 0xFF	; 255
    78a4:	bc 01       	movw	r22, r24
    78a6:	cd 01       	movw	r24, r26
    78a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    78ac:	dc 01       	movw	r26, r24
    78ae:	cb 01       	movw	r24, r22
    78b0:	f8 01       	movw	r30, r16
    78b2:	91 83       	std	Z+1, r25	; 0x01
    78b4:	80 83       	st	Z, r24
    78b6:	1f c0       	rjmp	.+62     	; 0x78f6 <Display_Time_Processing+0x452>
    78b8:	fe 01       	movw	r30, r28
    78ba:	e7 5b       	subi	r30, 0xB7	; 183
    78bc:	ff 4f       	sbci	r31, 0xFF	; 255
    78be:	80 e9       	ldi	r24, 0x90	; 144
    78c0:	91 e0       	ldi	r25, 0x01	; 1
    78c2:	91 83       	std	Z+1, r25	; 0x01
    78c4:	80 83       	st	Z, r24
    78c6:	fe 01       	movw	r30, r28
    78c8:	e7 5b       	subi	r30, 0xB7	; 183
    78ca:	ff 4f       	sbci	r31, 0xFF	; 255
    78cc:	80 81       	ld	r24, Z
    78ce:	91 81       	ldd	r25, Z+1	; 0x01
    78d0:	01 97       	sbiw	r24, 0x01	; 1
    78d2:	f1 f7       	brne	.-4      	; 0x78d0 <Display_Time_Processing+0x42c>
    78d4:	fe 01       	movw	r30, r28
    78d6:	e7 5b       	subi	r30, 0xB7	; 183
    78d8:	ff 4f       	sbci	r31, 0xFF	; 255
    78da:	91 83       	std	Z+1, r25	; 0x01
    78dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    78de:	de 01       	movw	r26, r28
    78e0:	a5 5b       	subi	r26, 0xB5	; 181
    78e2:	bf 4f       	sbci	r27, 0xFF	; 255
    78e4:	fe 01       	movw	r30, r28
    78e6:	e5 5b       	subi	r30, 0xB5	; 181
    78e8:	ff 4f       	sbci	r31, 0xFF	; 255
    78ea:	80 81       	ld	r24, Z
    78ec:	91 81       	ldd	r25, Z+1	; 0x01
    78ee:	01 97       	sbiw	r24, 0x01	; 1
    78f0:	11 96       	adiw	r26, 0x01	; 1
    78f2:	9c 93       	st	X, r25
    78f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    78f6:	fe 01       	movw	r30, r28
    78f8:	e5 5b       	subi	r30, 0xB5	; 181
    78fa:	ff 4f       	sbci	r31, 0xFF	; 255
    78fc:	80 81       	ld	r24, Z
    78fe:	91 81       	ldd	r25, Z+1	; 0x01
    7900:	00 97       	sbiw	r24, 0x00	; 0
    7902:	d1 f6       	brne	.-76     	; 0x78b8 <Display_Time_Processing+0x414>
    7904:	27 c0       	rjmp	.+78     	; 0x7954 <Display_Time_Processing+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7906:	8e 01       	movw	r16, r28
    7908:	05 5b       	subi	r16, 0xB5	; 181
    790a:	1f 4f       	sbci	r17, 0xFF	; 255
    790c:	fe 01       	movw	r30, r28
    790e:	e3 5b       	subi	r30, 0xB3	; 179
    7910:	ff 4f       	sbci	r31, 0xFF	; 255
    7912:	60 81       	ld	r22, Z
    7914:	71 81       	ldd	r23, Z+1	; 0x01
    7916:	82 81       	ldd	r24, Z+2	; 0x02
    7918:	93 81       	ldd	r25, Z+3	; 0x03
    791a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    791e:	dc 01       	movw	r26, r24
    7920:	cb 01       	movw	r24, r22
    7922:	f8 01       	movw	r30, r16
    7924:	91 83       	std	Z+1, r25	; 0x01
    7926:	80 83       	st	Z, r24
    7928:	de 01       	movw	r26, r28
    792a:	a9 5b       	subi	r26, 0xB9	; 185
    792c:	bf 4f       	sbci	r27, 0xFF	; 255
    792e:	fe 01       	movw	r30, r28
    7930:	e5 5b       	subi	r30, 0xB5	; 181
    7932:	ff 4f       	sbci	r31, 0xFF	; 255
    7934:	80 81       	ld	r24, Z
    7936:	91 81       	ldd	r25, Z+1	; 0x01
    7938:	8d 93       	st	X+, r24
    793a:	9c 93       	st	X, r25
    793c:	fe 01       	movw	r30, r28
    793e:	e9 5b       	subi	r30, 0xB9	; 185
    7940:	ff 4f       	sbci	r31, 0xFF	; 255
    7942:	80 81       	ld	r24, Z
    7944:	91 81       	ldd	r25, Z+1	; 0x01
    7946:	01 97       	sbiw	r24, 0x01	; 1
    7948:	f1 f7       	brne	.-4      	; 0x7946 <Display_Time_Processing+0x4a2>
    794a:	fe 01       	movw	r30, r28
    794c:	e9 5b       	subi	r30, 0xB9	; 185
    794e:	ff 4f       	sbci	r31, 0xFF	; 255
    7950:	91 83       	std	Z+1, r25	; 0x01
    7952:	80 83       	st	Z, r24
		_delay_ms(200);
		   H_EEPROM_Void_ReadByte(26,&datat);
    7954:	9e 01       	movw	r18, r28
    7956:	2f 58       	subi	r18, 0x8F	; 143
    7958:	3f 4f       	sbci	r19, 0xFF	; 255
    795a:	8a e1       	ldi	r24, 0x1A	; 26
    795c:	90 e0       	ldi	r25, 0x00	; 0
    795e:	b9 01       	movw	r22, r18
    7960:	0e 94 18 26 	call	0x4c30	; 0x4c30 <H_EEPROM_Void_ReadByte>
			H_LCD_void_sendIntNum((u16)datat);
    7964:	fe 01       	movw	r30, r28
    7966:	ef 58       	subi	r30, 0x8F	; 143
    7968:	ff 4f       	sbci	r31, 0xFF	; 255
    796a:	80 81       	ld	r24, Z
    796c:	88 2f       	mov	r24, r24
    796e:	90 e0       	ldi	r25, 0x00	; 0
    7970:	a0 e0       	ldi	r26, 0x00	; 0
    7972:	b0 e0       	ldi	r27, 0x00	; 0
    7974:	bc 01       	movw	r22, r24
    7976:	cd 01       	movw	r24, r26
    7978:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>
    797c:	fe 01       	movw	r30, r28
    797e:	ed 5b       	subi	r30, 0xBD	; 189
    7980:	ff 4f       	sbci	r31, 0xFF	; 255
    7982:	80 e0       	ldi	r24, 0x00	; 0
    7984:	90 e0       	ldi	r25, 0x00	; 0
    7986:	aa ef       	ldi	r26, 0xFA	; 250
    7988:	b3 e4       	ldi	r27, 0x43	; 67
    798a:	80 83       	st	Z, r24
    798c:	91 83       	std	Z+1, r25	; 0x01
    798e:	a2 83       	std	Z+2, r26	; 0x02
    7990:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7992:	8e 01       	movw	r16, r28
    7994:	01 5c       	subi	r16, 0xC1	; 193
    7996:	1f 4f       	sbci	r17, 0xFF	; 255
    7998:	fe 01       	movw	r30, r28
    799a:	ed 5b       	subi	r30, 0xBD	; 189
    799c:	ff 4f       	sbci	r31, 0xFF	; 255
    799e:	60 81       	ld	r22, Z
    79a0:	71 81       	ldd	r23, Z+1	; 0x01
    79a2:	82 81       	ldd	r24, Z+2	; 0x02
    79a4:	93 81       	ldd	r25, Z+3	; 0x03
    79a6:	20 e0       	ldi	r18, 0x00	; 0
    79a8:	30 e0       	ldi	r19, 0x00	; 0
    79aa:	4a e7       	ldi	r20, 0x7A	; 122
    79ac:	55 e4       	ldi	r21, 0x45	; 69
    79ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    79b2:	dc 01       	movw	r26, r24
    79b4:	cb 01       	movw	r24, r22
    79b6:	f8 01       	movw	r30, r16
    79b8:	80 83       	st	Z, r24
    79ba:	91 83       	std	Z+1, r25	; 0x01
    79bc:	a2 83       	std	Z+2, r26	; 0x02
    79be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    79c0:	fe 01       	movw	r30, r28
    79c2:	ff 96       	adiw	r30, 0x3f	; 63
    79c4:	60 81       	ld	r22, Z
    79c6:	71 81       	ldd	r23, Z+1	; 0x01
    79c8:	82 81       	ldd	r24, Z+2	; 0x02
    79ca:	93 81       	ldd	r25, Z+3	; 0x03
    79cc:	20 e0       	ldi	r18, 0x00	; 0
    79ce:	30 e0       	ldi	r19, 0x00	; 0
    79d0:	40 e8       	ldi	r20, 0x80	; 128
    79d2:	5f e3       	ldi	r21, 0x3F	; 63
    79d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    79d8:	88 23       	and	r24, r24
    79da:	2c f4       	brge	.+10     	; 0x79e6 <Display_Time_Processing+0x542>
		__ticks = 1;
    79dc:	81 e0       	ldi	r24, 0x01	; 1
    79de:	90 e0       	ldi	r25, 0x00	; 0
    79e0:	9e af       	std	Y+62, r25	; 0x3e
    79e2:	8d af       	std	Y+61, r24	; 0x3d
    79e4:	46 c0       	rjmp	.+140    	; 0x7a72 <Display_Time_Processing+0x5ce>
	else if (__tmp > 65535)
    79e6:	fe 01       	movw	r30, r28
    79e8:	ff 96       	adiw	r30, 0x3f	; 63
    79ea:	60 81       	ld	r22, Z
    79ec:	71 81       	ldd	r23, Z+1	; 0x01
    79ee:	82 81       	ldd	r24, Z+2	; 0x02
    79f0:	93 81       	ldd	r25, Z+3	; 0x03
    79f2:	20 e0       	ldi	r18, 0x00	; 0
    79f4:	3f ef       	ldi	r19, 0xFF	; 255
    79f6:	4f e7       	ldi	r20, 0x7F	; 127
    79f8:	57 e4       	ldi	r21, 0x47	; 71
    79fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    79fe:	18 16       	cp	r1, r24
    7a00:	64 f5       	brge	.+88     	; 0x7a5a <Display_Time_Processing+0x5b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7a02:	fe 01       	movw	r30, r28
    7a04:	ed 5b       	subi	r30, 0xBD	; 189
    7a06:	ff 4f       	sbci	r31, 0xFF	; 255
    7a08:	60 81       	ld	r22, Z
    7a0a:	71 81       	ldd	r23, Z+1	; 0x01
    7a0c:	82 81       	ldd	r24, Z+2	; 0x02
    7a0e:	93 81       	ldd	r25, Z+3	; 0x03
    7a10:	20 e0       	ldi	r18, 0x00	; 0
    7a12:	30 e0       	ldi	r19, 0x00	; 0
    7a14:	40 e2       	ldi	r20, 0x20	; 32
    7a16:	51 e4       	ldi	r21, 0x41	; 65
    7a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7a1c:	dc 01       	movw	r26, r24
    7a1e:	cb 01       	movw	r24, r22
    7a20:	bc 01       	movw	r22, r24
    7a22:	cd 01       	movw	r24, r26
    7a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7a28:	dc 01       	movw	r26, r24
    7a2a:	cb 01       	movw	r24, r22
    7a2c:	9e af       	std	Y+62, r25	; 0x3e
    7a2e:	8d af       	std	Y+61, r24	; 0x3d
    7a30:	0f c0       	rjmp	.+30     	; 0x7a50 <Display_Time_Processing+0x5ac>
    7a32:	80 e9       	ldi	r24, 0x90	; 144
    7a34:	91 e0       	ldi	r25, 0x01	; 1
    7a36:	9c af       	std	Y+60, r25	; 0x3c
    7a38:	8b af       	std	Y+59, r24	; 0x3b
    7a3a:	8b ad       	ldd	r24, Y+59	; 0x3b
    7a3c:	9c ad       	ldd	r25, Y+60	; 0x3c
    7a3e:	01 97       	sbiw	r24, 0x01	; 1
    7a40:	f1 f7       	brne	.-4      	; 0x7a3e <Display_Time_Processing+0x59a>
    7a42:	9c af       	std	Y+60, r25	; 0x3c
    7a44:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7a46:	8d ad       	ldd	r24, Y+61	; 0x3d
    7a48:	9e ad       	ldd	r25, Y+62	; 0x3e
    7a4a:	01 97       	sbiw	r24, 0x01	; 1
    7a4c:	9e af       	std	Y+62, r25	; 0x3e
    7a4e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7a50:	8d ad       	ldd	r24, Y+61	; 0x3d
    7a52:	9e ad       	ldd	r25, Y+62	; 0x3e
    7a54:	00 97       	sbiw	r24, 0x00	; 0
    7a56:	69 f7       	brne	.-38     	; 0x7a32 <Display_Time_Processing+0x58e>
    7a58:	16 c0       	rjmp	.+44     	; 0x7a86 <Display_Time_Processing+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7a5a:	fe 01       	movw	r30, r28
    7a5c:	ff 96       	adiw	r30, 0x3f	; 63
    7a5e:	60 81       	ld	r22, Z
    7a60:	71 81       	ldd	r23, Z+1	; 0x01
    7a62:	82 81       	ldd	r24, Z+2	; 0x02
    7a64:	93 81       	ldd	r25, Z+3	; 0x03
    7a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7a6a:	dc 01       	movw	r26, r24
    7a6c:	cb 01       	movw	r24, r22
    7a6e:	9e af       	std	Y+62, r25	; 0x3e
    7a70:	8d af       	std	Y+61, r24	; 0x3d
    7a72:	8d ad       	ldd	r24, Y+61	; 0x3d
    7a74:	9e ad       	ldd	r25, Y+62	; 0x3e
    7a76:	9a af       	std	Y+58, r25	; 0x3a
    7a78:	89 af       	std	Y+57, r24	; 0x39
    7a7a:	89 ad       	ldd	r24, Y+57	; 0x39
    7a7c:	9a ad       	ldd	r25, Y+58	; 0x3a
    7a7e:	01 97       	sbiw	r24, 0x01	; 1
    7a80:	f1 f7       	brne	.-4      	; 0x7a7e <Display_Time_Processing+0x5da>
    7a82:	9a af       	std	Y+58, r25	; 0x3a
    7a84:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(500);
		H_LCD_void_gotoXY(4,0);
    7a86:	84 e0       	ldi	r24, 0x04	; 4
    7a88:	60 e0       	ldi	r22, 0x00	; 0
    7a8a:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
    7a8e:	80 e0       	ldi	r24, 0x00	; 0
    7a90:	90 e0       	ldi	r25, 0x00	; 0
    7a92:	a8 e4       	ldi	r26, 0x48	; 72
    7a94:	b3 e4       	ldi	r27, 0x43	; 67
    7a96:	8d ab       	std	Y+53, r24	; 0x35
    7a98:	9e ab       	std	Y+54, r25	; 0x36
    7a9a:	af ab       	std	Y+55, r26	; 0x37
    7a9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7a9e:	6d a9       	ldd	r22, Y+53	; 0x35
    7aa0:	7e a9       	ldd	r23, Y+54	; 0x36
    7aa2:	8f a9       	ldd	r24, Y+55	; 0x37
    7aa4:	98 ad       	ldd	r25, Y+56	; 0x38
    7aa6:	20 e0       	ldi	r18, 0x00	; 0
    7aa8:	30 e0       	ldi	r19, 0x00	; 0
    7aaa:	4a e7       	ldi	r20, 0x7A	; 122
    7aac:	55 e4       	ldi	r21, 0x45	; 69
    7aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7ab2:	dc 01       	movw	r26, r24
    7ab4:	cb 01       	movw	r24, r22
    7ab6:	89 ab       	std	Y+49, r24	; 0x31
    7ab8:	9a ab       	std	Y+50, r25	; 0x32
    7aba:	ab ab       	std	Y+51, r26	; 0x33
    7abc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    7abe:	69 a9       	ldd	r22, Y+49	; 0x31
    7ac0:	7a a9       	ldd	r23, Y+50	; 0x32
    7ac2:	8b a9       	ldd	r24, Y+51	; 0x33
    7ac4:	9c a9       	ldd	r25, Y+52	; 0x34
    7ac6:	20 e0       	ldi	r18, 0x00	; 0
    7ac8:	30 e0       	ldi	r19, 0x00	; 0
    7aca:	40 e8       	ldi	r20, 0x80	; 128
    7acc:	5f e3       	ldi	r21, 0x3F	; 63
    7ace:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7ad2:	88 23       	and	r24, r24
    7ad4:	2c f4       	brge	.+10     	; 0x7ae0 <Display_Time_Processing+0x63c>
		__ticks = 1;
    7ad6:	81 e0       	ldi	r24, 0x01	; 1
    7ad8:	90 e0       	ldi	r25, 0x00	; 0
    7ada:	98 ab       	std	Y+48, r25	; 0x30
    7adc:	8f a7       	std	Y+47, r24	; 0x2f
    7ade:	3f c0       	rjmp	.+126    	; 0x7b5e <Display_Time_Processing+0x6ba>
	else if (__tmp > 65535)
    7ae0:	69 a9       	ldd	r22, Y+49	; 0x31
    7ae2:	7a a9       	ldd	r23, Y+50	; 0x32
    7ae4:	8b a9       	ldd	r24, Y+51	; 0x33
    7ae6:	9c a9       	ldd	r25, Y+52	; 0x34
    7ae8:	20 e0       	ldi	r18, 0x00	; 0
    7aea:	3f ef       	ldi	r19, 0xFF	; 255
    7aec:	4f e7       	ldi	r20, 0x7F	; 127
    7aee:	57 e4       	ldi	r21, 0x47	; 71
    7af0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7af4:	18 16       	cp	r1, r24
    7af6:	4c f5       	brge	.+82     	; 0x7b4a <Display_Time_Processing+0x6a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7af8:	6d a9       	ldd	r22, Y+53	; 0x35
    7afa:	7e a9       	ldd	r23, Y+54	; 0x36
    7afc:	8f a9       	ldd	r24, Y+55	; 0x37
    7afe:	98 ad       	ldd	r25, Y+56	; 0x38
    7b00:	20 e0       	ldi	r18, 0x00	; 0
    7b02:	30 e0       	ldi	r19, 0x00	; 0
    7b04:	40 e2       	ldi	r20, 0x20	; 32
    7b06:	51 e4       	ldi	r21, 0x41	; 65
    7b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7b0c:	dc 01       	movw	r26, r24
    7b0e:	cb 01       	movw	r24, r22
    7b10:	bc 01       	movw	r22, r24
    7b12:	cd 01       	movw	r24, r26
    7b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7b18:	dc 01       	movw	r26, r24
    7b1a:	cb 01       	movw	r24, r22
    7b1c:	98 ab       	std	Y+48, r25	; 0x30
    7b1e:	8f a7       	std	Y+47, r24	; 0x2f
    7b20:	0f c0       	rjmp	.+30     	; 0x7b40 <Display_Time_Processing+0x69c>
    7b22:	80 e9       	ldi	r24, 0x90	; 144
    7b24:	91 e0       	ldi	r25, 0x01	; 1
    7b26:	9e a7       	std	Y+46, r25	; 0x2e
    7b28:	8d a7       	std	Y+45, r24	; 0x2d
    7b2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    7b2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    7b2e:	01 97       	sbiw	r24, 0x01	; 1
    7b30:	f1 f7       	brne	.-4      	; 0x7b2e <Display_Time_Processing+0x68a>
    7b32:	9e a7       	std	Y+46, r25	; 0x2e
    7b34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7b36:	8f a5       	ldd	r24, Y+47	; 0x2f
    7b38:	98 a9       	ldd	r25, Y+48	; 0x30
    7b3a:	01 97       	sbiw	r24, 0x01	; 1
    7b3c:	98 ab       	std	Y+48, r25	; 0x30
    7b3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7b40:	8f a5       	ldd	r24, Y+47	; 0x2f
    7b42:	98 a9       	ldd	r25, Y+48	; 0x30
    7b44:	00 97       	sbiw	r24, 0x00	; 0
    7b46:	69 f7       	brne	.-38     	; 0x7b22 <Display_Time_Processing+0x67e>
    7b48:	14 c0       	rjmp	.+40     	; 0x7b72 <Display_Time_Processing+0x6ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7b4a:	69 a9       	ldd	r22, Y+49	; 0x31
    7b4c:	7a a9       	ldd	r23, Y+50	; 0x32
    7b4e:	8b a9       	ldd	r24, Y+51	; 0x33
    7b50:	9c a9       	ldd	r25, Y+52	; 0x34
    7b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7b56:	dc 01       	movw	r26, r24
    7b58:	cb 01       	movw	r24, r22
    7b5a:	98 ab       	std	Y+48, r25	; 0x30
    7b5c:	8f a7       	std	Y+47, r24	; 0x2f
    7b5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    7b60:	98 a9       	ldd	r25, Y+48	; 0x30
    7b62:	9c a7       	std	Y+44, r25	; 0x2c
    7b64:	8b a7       	std	Y+43, r24	; 0x2b
    7b66:	8b a5       	ldd	r24, Y+43	; 0x2b
    7b68:	9c a5       	ldd	r25, Y+44	; 0x2c
    7b6a:	01 97       	sbiw	r24, 0x01	; 1
    7b6c:	f1 f7       	brne	.-4      	; 0x7b6a <Display_Time_Processing+0x6c6>
    7b6e:	9c a7       	std	Y+44, r25	; 0x2c
    7b70:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(200);
		   H_EEPROM_Void_ReadByte(20,&datat);
    7b72:	9e 01       	movw	r18, r28
    7b74:	2f 58       	subi	r18, 0x8F	; 143
    7b76:	3f 4f       	sbci	r19, 0xFF	; 255
    7b78:	84 e1       	ldi	r24, 0x14	; 20
    7b7a:	90 e0       	ldi	r25, 0x00	; 0
    7b7c:	b9 01       	movw	r22, r18
    7b7e:	0e 94 18 26 	call	0x4c30	; 0x4c30 <H_EEPROM_Void_ReadByte>
			H_LCD_void_sendIntNum((u16)datat);
    7b82:	fe 01       	movw	r30, r28
    7b84:	ef 58       	subi	r30, 0x8F	; 143
    7b86:	ff 4f       	sbci	r31, 0xFF	; 255
    7b88:	80 81       	ld	r24, Z
    7b8a:	88 2f       	mov	r24, r24
    7b8c:	90 e0       	ldi	r25, 0x00	; 0
    7b8e:	a0 e0       	ldi	r26, 0x00	; 0
    7b90:	b0 e0       	ldi	r27, 0x00	; 0
    7b92:	bc 01       	movw	r22, r24
    7b94:	cd 01       	movw	r24, r26
    7b96:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>
			H_LCD_void_sendData(':');
    7b9a:	8a e3       	ldi	r24, 0x3A	; 58
    7b9c:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
    7ba0:	80 e0       	ldi	r24, 0x00	; 0
    7ba2:	90 e0       	ldi	r25, 0x00	; 0
    7ba4:	a8 e4       	ldi	r26, 0x48	; 72
    7ba6:	b3 e4       	ldi	r27, 0x43	; 67
    7ba8:	8f a3       	std	Y+39, r24	; 0x27
    7baa:	98 a7       	std	Y+40, r25	; 0x28
    7bac:	a9 a7       	std	Y+41, r26	; 0x29
    7bae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7bb0:	6f a1       	ldd	r22, Y+39	; 0x27
    7bb2:	78 a5       	ldd	r23, Y+40	; 0x28
    7bb4:	89 a5       	ldd	r24, Y+41	; 0x29
    7bb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    7bb8:	20 e0       	ldi	r18, 0x00	; 0
    7bba:	30 e0       	ldi	r19, 0x00	; 0
    7bbc:	4a e7       	ldi	r20, 0x7A	; 122
    7bbe:	55 e4       	ldi	r21, 0x45	; 69
    7bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7bc4:	dc 01       	movw	r26, r24
    7bc6:	cb 01       	movw	r24, r22
    7bc8:	8b a3       	std	Y+35, r24	; 0x23
    7bca:	9c a3       	std	Y+36, r25	; 0x24
    7bcc:	ad a3       	std	Y+37, r26	; 0x25
    7bce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    7bd0:	6b a1       	ldd	r22, Y+35	; 0x23
    7bd2:	7c a1       	ldd	r23, Y+36	; 0x24
    7bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    7bd6:	9e a1       	ldd	r25, Y+38	; 0x26
    7bd8:	20 e0       	ldi	r18, 0x00	; 0
    7bda:	30 e0       	ldi	r19, 0x00	; 0
    7bdc:	40 e8       	ldi	r20, 0x80	; 128
    7bde:	5f e3       	ldi	r21, 0x3F	; 63
    7be0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7be4:	88 23       	and	r24, r24
    7be6:	2c f4       	brge	.+10     	; 0x7bf2 <Display_Time_Processing+0x74e>
		__ticks = 1;
    7be8:	81 e0       	ldi	r24, 0x01	; 1
    7bea:	90 e0       	ldi	r25, 0x00	; 0
    7bec:	9a a3       	std	Y+34, r25	; 0x22
    7bee:	89 a3       	std	Y+33, r24	; 0x21
    7bf0:	3f c0       	rjmp	.+126    	; 0x7c70 <Display_Time_Processing+0x7cc>
	else if (__tmp > 65535)
    7bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    7bf4:	7c a1       	ldd	r23, Y+36	; 0x24
    7bf6:	8d a1       	ldd	r24, Y+37	; 0x25
    7bf8:	9e a1       	ldd	r25, Y+38	; 0x26
    7bfa:	20 e0       	ldi	r18, 0x00	; 0
    7bfc:	3f ef       	ldi	r19, 0xFF	; 255
    7bfe:	4f e7       	ldi	r20, 0x7F	; 127
    7c00:	57 e4       	ldi	r21, 0x47	; 71
    7c02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7c06:	18 16       	cp	r1, r24
    7c08:	4c f5       	brge	.+82     	; 0x7c5c <Display_Time_Processing+0x7b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7c0a:	6f a1       	ldd	r22, Y+39	; 0x27
    7c0c:	78 a5       	ldd	r23, Y+40	; 0x28
    7c0e:	89 a5       	ldd	r24, Y+41	; 0x29
    7c10:	9a a5       	ldd	r25, Y+42	; 0x2a
    7c12:	20 e0       	ldi	r18, 0x00	; 0
    7c14:	30 e0       	ldi	r19, 0x00	; 0
    7c16:	40 e2       	ldi	r20, 0x20	; 32
    7c18:	51 e4       	ldi	r21, 0x41	; 65
    7c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7c1e:	dc 01       	movw	r26, r24
    7c20:	cb 01       	movw	r24, r22
    7c22:	bc 01       	movw	r22, r24
    7c24:	cd 01       	movw	r24, r26
    7c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7c2a:	dc 01       	movw	r26, r24
    7c2c:	cb 01       	movw	r24, r22
    7c2e:	9a a3       	std	Y+34, r25	; 0x22
    7c30:	89 a3       	std	Y+33, r24	; 0x21
    7c32:	0f c0       	rjmp	.+30     	; 0x7c52 <Display_Time_Processing+0x7ae>
    7c34:	80 e9       	ldi	r24, 0x90	; 144
    7c36:	91 e0       	ldi	r25, 0x01	; 1
    7c38:	98 a3       	std	Y+32, r25	; 0x20
    7c3a:	8f 8f       	std	Y+31, r24	; 0x1f
    7c3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7c3e:	98 a1       	ldd	r25, Y+32	; 0x20
    7c40:	01 97       	sbiw	r24, 0x01	; 1
    7c42:	f1 f7       	brne	.-4      	; 0x7c40 <Display_Time_Processing+0x79c>
    7c44:	98 a3       	std	Y+32, r25	; 0x20
    7c46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7c48:	89 a1       	ldd	r24, Y+33	; 0x21
    7c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    7c4c:	01 97       	sbiw	r24, 0x01	; 1
    7c4e:	9a a3       	std	Y+34, r25	; 0x22
    7c50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7c52:	89 a1       	ldd	r24, Y+33	; 0x21
    7c54:	9a a1       	ldd	r25, Y+34	; 0x22
    7c56:	00 97       	sbiw	r24, 0x00	; 0
    7c58:	69 f7       	brne	.-38     	; 0x7c34 <Display_Time_Processing+0x790>
    7c5a:	14 c0       	rjmp	.+40     	; 0x7c84 <Display_Time_Processing+0x7e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7c5c:	6b a1       	ldd	r22, Y+35	; 0x23
    7c5e:	7c a1       	ldd	r23, Y+36	; 0x24
    7c60:	8d a1       	ldd	r24, Y+37	; 0x25
    7c62:	9e a1       	ldd	r25, Y+38	; 0x26
    7c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7c68:	dc 01       	movw	r26, r24
    7c6a:	cb 01       	movw	r24, r22
    7c6c:	9a a3       	std	Y+34, r25	; 0x22
    7c6e:	89 a3       	std	Y+33, r24	; 0x21
    7c70:	89 a1       	ldd	r24, Y+33	; 0x21
    7c72:	9a a1       	ldd	r25, Y+34	; 0x22
    7c74:	9e 8f       	std	Y+30, r25	; 0x1e
    7c76:	8d 8f       	std	Y+29, r24	; 0x1d
    7c78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    7c7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    7c7c:	01 97       	sbiw	r24, 0x01	; 1
    7c7e:	f1 f7       	brne	.-4      	; 0x7c7c <Display_Time_Processing+0x7d8>
    7c80:	9e 8f       	std	Y+30, r25	; 0x1e
    7c82:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
		   H_EEPROM_Void_ReadByte(21,&datat);
    7c84:	9e 01       	movw	r18, r28
    7c86:	2f 58       	subi	r18, 0x8F	; 143
    7c88:	3f 4f       	sbci	r19, 0xFF	; 255
    7c8a:	85 e1       	ldi	r24, 0x15	; 21
    7c8c:	90 e0       	ldi	r25, 0x00	; 0
    7c8e:	b9 01       	movw	r22, r18
    7c90:	0e 94 18 26 	call	0x4c30	; 0x4c30 <H_EEPROM_Void_ReadByte>
			H_LCD_void_sendIntNum((u16)datat);
    7c94:	fe 01       	movw	r30, r28
    7c96:	ef 58       	subi	r30, 0x8F	; 143
    7c98:	ff 4f       	sbci	r31, 0xFF	; 255
    7c9a:	80 81       	ld	r24, Z
    7c9c:	88 2f       	mov	r24, r24
    7c9e:	90 e0       	ldi	r25, 0x00	; 0
    7ca0:	a0 e0       	ldi	r26, 0x00	; 0
    7ca2:	b0 e0       	ldi	r27, 0x00	; 0
    7ca4:	bc 01       	movw	r22, r24
    7ca6:	cd 01       	movw	r24, r26
    7ca8:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>
			H_LCD_void_sendData(':');
    7cac:	8a e3       	ldi	r24, 0x3A	; 58
    7cae:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
    7cb2:	80 e0       	ldi	r24, 0x00	; 0
    7cb4:	90 e0       	ldi	r25, 0x00	; 0
    7cb6:	a8 e4       	ldi	r26, 0x48	; 72
    7cb8:	b3 e4       	ldi	r27, 0x43	; 67
    7cba:	89 8f       	std	Y+25, r24	; 0x19
    7cbc:	9a 8f       	std	Y+26, r25	; 0x1a
    7cbe:	ab 8f       	std	Y+27, r26	; 0x1b
    7cc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7cc2:	69 8d       	ldd	r22, Y+25	; 0x19
    7cc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7cc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7cc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7cca:	20 e0       	ldi	r18, 0x00	; 0
    7ccc:	30 e0       	ldi	r19, 0x00	; 0
    7cce:	4a e7       	ldi	r20, 0x7A	; 122
    7cd0:	55 e4       	ldi	r21, 0x45	; 69
    7cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7cd6:	dc 01       	movw	r26, r24
    7cd8:	cb 01       	movw	r24, r22
    7cda:	8d 8b       	std	Y+21, r24	; 0x15
    7cdc:	9e 8b       	std	Y+22, r25	; 0x16
    7cde:	af 8b       	std	Y+23, r26	; 0x17
    7ce0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    7ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    7ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    7ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    7cea:	20 e0       	ldi	r18, 0x00	; 0
    7cec:	30 e0       	ldi	r19, 0x00	; 0
    7cee:	40 e8       	ldi	r20, 0x80	; 128
    7cf0:	5f e3       	ldi	r21, 0x3F	; 63
    7cf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7cf6:	88 23       	and	r24, r24
    7cf8:	2c f4       	brge	.+10     	; 0x7d04 <Display_Time_Processing+0x860>
		__ticks = 1;
    7cfa:	81 e0       	ldi	r24, 0x01	; 1
    7cfc:	90 e0       	ldi	r25, 0x00	; 0
    7cfe:	9c 8b       	std	Y+20, r25	; 0x14
    7d00:	8b 8b       	std	Y+19, r24	; 0x13
    7d02:	3f c0       	rjmp	.+126    	; 0x7d82 <Display_Time_Processing+0x8de>
	else if (__tmp > 65535)
    7d04:	6d 89       	ldd	r22, Y+21	; 0x15
    7d06:	7e 89       	ldd	r23, Y+22	; 0x16
    7d08:	8f 89       	ldd	r24, Y+23	; 0x17
    7d0a:	98 8d       	ldd	r25, Y+24	; 0x18
    7d0c:	20 e0       	ldi	r18, 0x00	; 0
    7d0e:	3f ef       	ldi	r19, 0xFF	; 255
    7d10:	4f e7       	ldi	r20, 0x7F	; 127
    7d12:	57 e4       	ldi	r21, 0x47	; 71
    7d14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7d18:	18 16       	cp	r1, r24
    7d1a:	4c f5       	brge	.+82     	; 0x7d6e <Display_Time_Processing+0x8ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7d1c:	69 8d       	ldd	r22, Y+25	; 0x19
    7d1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7d20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7d22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7d24:	20 e0       	ldi	r18, 0x00	; 0
    7d26:	30 e0       	ldi	r19, 0x00	; 0
    7d28:	40 e2       	ldi	r20, 0x20	; 32
    7d2a:	51 e4       	ldi	r21, 0x41	; 65
    7d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7d30:	dc 01       	movw	r26, r24
    7d32:	cb 01       	movw	r24, r22
    7d34:	bc 01       	movw	r22, r24
    7d36:	cd 01       	movw	r24, r26
    7d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7d3c:	dc 01       	movw	r26, r24
    7d3e:	cb 01       	movw	r24, r22
    7d40:	9c 8b       	std	Y+20, r25	; 0x14
    7d42:	8b 8b       	std	Y+19, r24	; 0x13
    7d44:	0f c0       	rjmp	.+30     	; 0x7d64 <Display_Time_Processing+0x8c0>
    7d46:	80 e9       	ldi	r24, 0x90	; 144
    7d48:	91 e0       	ldi	r25, 0x01	; 1
    7d4a:	9a 8b       	std	Y+18, r25	; 0x12
    7d4c:	89 8b       	std	Y+17, r24	; 0x11
    7d4e:	89 89       	ldd	r24, Y+17	; 0x11
    7d50:	9a 89       	ldd	r25, Y+18	; 0x12
    7d52:	01 97       	sbiw	r24, 0x01	; 1
    7d54:	f1 f7       	brne	.-4      	; 0x7d52 <Display_Time_Processing+0x8ae>
    7d56:	9a 8b       	std	Y+18, r25	; 0x12
    7d58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    7d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    7d5e:	01 97       	sbiw	r24, 0x01	; 1
    7d60:	9c 8b       	std	Y+20, r25	; 0x14
    7d62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7d64:	8b 89       	ldd	r24, Y+19	; 0x13
    7d66:	9c 89       	ldd	r25, Y+20	; 0x14
    7d68:	00 97       	sbiw	r24, 0x00	; 0
    7d6a:	69 f7       	brne	.-38     	; 0x7d46 <Display_Time_Processing+0x8a2>
    7d6c:	14 c0       	rjmp	.+40     	; 0x7d96 <Display_Time_Processing+0x8f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7d6e:	6d 89       	ldd	r22, Y+21	; 0x15
    7d70:	7e 89       	ldd	r23, Y+22	; 0x16
    7d72:	8f 89       	ldd	r24, Y+23	; 0x17
    7d74:	98 8d       	ldd	r25, Y+24	; 0x18
    7d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7d7a:	dc 01       	movw	r26, r24
    7d7c:	cb 01       	movw	r24, r22
    7d7e:	9c 8b       	std	Y+20, r25	; 0x14
    7d80:	8b 8b       	std	Y+19, r24	; 0x13
    7d82:	8b 89       	ldd	r24, Y+19	; 0x13
    7d84:	9c 89       	ldd	r25, Y+20	; 0x14
    7d86:	98 8b       	std	Y+16, r25	; 0x10
    7d88:	8f 87       	std	Y+15, r24	; 0x0f
    7d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    7d8c:	98 89       	ldd	r25, Y+16	; 0x10
    7d8e:	01 97       	sbiw	r24, 0x01	; 1
    7d90:	f1 f7       	brne	.-4      	; 0x7d8e <Display_Time_Processing+0x8ea>
    7d92:	98 8b       	std	Y+16, r25	; 0x10
    7d94:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		   H_EEPROM_Void_ReadByte(22,&datat);
    7d96:	9e 01       	movw	r18, r28
    7d98:	2f 58       	subi	r18, 0x8F	; 143
    7d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    7d9c:	86 e1       	ldi	r24, 0x16	; 22
    7d9e:	90 e0       	ldi	r25, 0x00	; 0
    7da0:	b9 01       	movw	r22, r18
    7da2:	0e 94 18 26 	call	0x4c30	; 0x4c30 <H_EEPROM_Void_ReadByte>
			H_LCD_void_sendIntNum((u16)datat);
    7da6:	fe 01       	movw	r30, r28
    7da8:	ef 58       	subi	r30, 0x8F	; 143
    7daa:	ff 4f       	sbci	r31, 0xFF	; 255
    7dac:	80 81       	ld	r24, Z
    7dae:	88 2f       	mov	r24, r24
    7db0:	90 e0       	ldi	r25, 0x00	; 0
    7db2:	a0 e0       	ldi	r26, 0x00	; 0
    7db4:	b0 e0       	ldi	r27, 0x00	; 0
    7db6:	bc 01       	movw	r22, r24
    7db8:	cd 01       	movw	r24, r26
    7dba:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <H_LCD_void_sendIntNum>
    7dbe:	80 e0       	ldi	r24, 0x00	; 0
    7dc0:	90 e0       	ldi	r25, 0x00	; 0
    7dc2:	aa ef       	ldi	r26, 0xFA	; 250
    7dc4:	b3 e4       	ldi	r27, 0x43	; 67
    7dc6:	8b 87       	std	Y+11, r24	; 0x0b
    7dc8:	9c 87       	std	Y+12, r25	; 0x0c
    7dca:	ad 87       	std	Y+13, r26	; 0x0d
    7dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    7dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    7dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    7dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    7dd6:	20 e0       	ldi	r18, 0x00	; 0
    7dd8:	30 e0       	ldi	r19, 0x00	; 0
    7dda:	4a e7       	ldi	r20, 0x7A	; 122
    7ddc:	55 e4       	ldi	r21, 0x45	; 69
    7dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7de2:	dc 01       	movw	r26, r24
    7de4:	cb 01       	movw	r24, r22
    7de6:	8f 83       	std	Y+7, r24	; 0x07
    7de8:	98 87       	std	Y+8, r25	; 0x08
    7dea:	a9 87       	std	Y+9, r26	; 0x09
    7dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7dee:	6f 81       	ldd	r22, Y+7	; 0x07
    7df0:	78 85       	ldd	r23, Y+8	; 0x08
    7df2:	89 85       	ldd	r24, Y+9	; 0x09
    7df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    7df6:	20 e0       	ldi	r18, 0x00	; 0
    7df8:	30 e0       	ldi	r19, 0x00	; 0
    7dfa:	40 e8       	ldi	r20, 0x80	; 128
    7dfc:	5f e3       	ldi	r21, 0x3F	; 63
    7dfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7e02:	88 23       	and	r24, r24
    7e04:	2c f4       	brge	.+10     	; 0x7e10 <Display_Time_Processing+0x96c>
		__ticks = 1;
    7e06:	81 e0       	ldi	r24, 0x01	; 1
    7e08:	90 e0       	ldi	r25, 0x00	; 0
    7e0a:	9e 83       	std	Y+6, r25	; 0x06
    7e0c:	8d 83       	std	Y+5, r24	; 0x05
    7e0e:	3f c0       	rjmp	.+126    	; 0x7e8e <Display_Time_Processing+0x9ea>
	else if (__tmp > 65535)
    7e10:	6f 81       	ldd	r22, Y+7	; 0x07
    7e12:	78 85       	ldd	r23, Y+8	; 0x08
    7e14:	89 85       	ldd	r24, Y+9	; 0x09
    7e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e18:	20 e0       	ldi	r18, 0x00	; 0
    7e1a:	3f ef       	ldi	r19, 0xFF	; 255
    7e1c:	4f e7       	ldi	r20, 0x7F	; 127
    7e1e:	57 e4       	ldi	r21, 0x47	; 71
    7e20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7e24:	18 16       	cp	r1, r24
    7e26:	4c f5       	brge	.+82     	; 0x7e7a <Display_Time_Processing+0x9d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    7e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    7e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    7e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    7e30:	20 e0       	ldi	r18, 0x00	; 0
    7e32:	30 e0       	ldi	r19, 0x00	; 0
    7e34:	40 e2       	ldi	r20, 0x20	; 32
    7e36:	51 e4       	ldi	r21, 0x41	; 65
    7e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7e3c:	dc 01       	movw	r26, r24
    7e3e:	cb 01       	movw	r24, r22
    7e40:	bc 01       	movw	r22, r24
    7e42:	cd 01       	movw	r24, r26
    7e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7e48:	dc 01       	movw	r26, r24
    7e4a:	cb 01       	movw	r24, r22
    7e4c:	9e 83       	std	Y+6, r25	; 0x06
    7e4e:	8d 83       	std	Y+5, r24	; 0x05
    7e50:	0f c0       	rjmp	.+30     	; 0x7e70 <Display_Time_Processing+0x9cc>
    7e52:	80 e9       	ldi	r24, 0x90	; 144
    7e54:	91 e0       	ldi	r25, 0x01	; 1
    7e56:	9c 83       	std	Y+4, r25	; 0x04
    7e58:	8b 83       	std	Y+3, r24	; 0x03
    7e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    7e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    7e5e:	01 97       	sbiw	r24, 0x01	; 1
    7e60:	f1 f7       	brne	.-4      	; 0x7e5e <Display_Time_Processing+0x9ba>
    7e62:	9c 83       	std	Y+4, r25	; 0x04
    7e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7e66:	8d 81       	ldd	r24, Y+5	; 0x05
    7e68:	9e 81       	ldd	r25, Y+6	; 0x06
    7e6a:	01 97       	sbiw	r24, 0x01	; 1
    7e6c:	9e 83       	std	Y+6, r25	; 0x06
    7e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7e70:	8d 81       	ldd	r24, Y+5	; 0x05
    7e72:	9e 81       	ldd	r25, Y+6	; 0x06
    7e74:	00 97       	sbiw	r24, 0x00	; 0
    7e76:	69 f7       	brne	.-38     	; 0x7e52 <Display_Time_Processing+0x9ae>
    7e78:	14 c0       	rjmp	.+40     	; 0x7ea2 <Display_Time_Processing+0x9fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    7e7c:	78 85       	ldd	r23, Y+8	; 0x08
    7e7e:	89 85       	ldd	r24, Y+9	; 0x09
    7e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    7e82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7e86:	dc 01       	movw	r26, r24
    7e88:	cb 01       	movw	r24, r22
    7e8a:	9e 83       	std	Y+6, r25	; 0x06
    7e8c:	8d 83       	std	Y+5, r24	; 0x05
    7e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    7e90:	9e 81       	ldd	r25, Y+6	; 0x06
    7e92:	9a 83       	std	Y+2, r25	; 0x02
    7e94:	89 83       	std	Y+1, r24	; 0x01
    7e96:	89 81       	ldd	r24, Y+1	; 0x01
    7e98:	9a 81       	ldd	r25, Y+2	; 0x02
    7e9a:	01 97       	sbiw	r24, 0x01	; 1
    7e9c:	f1 f7       	brne	.-4      	; 0x7e9a <Display_Time_Processing+0x9f6>
    7e9e:	9a 83       	std	Y+2, r25	; 0x02
    7ea0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
}
    7ea2:	cf 58       	subi	r28, 0x8F	; 143
    7ea4:	df 4f       	sbci	r29, 0xFF	; 255
    7ea6:	0f b6       	in	r0, 0x3f	; 63
    7ea8:	f8 94       	cli
    7eaa:	de bf       	out	0x3e, r29	; 62
    7eac:	0f be       	out	0x3f, r0	; 63
    7eae:	cd bf       	out	0x3d, r28	; 61
    7eb0:	cf 91       	pop	r28
    7eb2:	df 91       	pop	r29
    7eb4:	1f 91       	pop	r17
    7eb6:	0f 91       	pop	r16
    7eb8:	08 95       	ret

00007eba <SYSTEM_OFF>:

void SYSTEM_OFF(void)
{
    7eba:	df 93       	push	r29
    7ebc:	cf 93       	push	r28
    7ebe:	cd b7       	in	r28, 0x3d	; 61
    7ec0:	de b7       	in	r29, 0x3e	; 62
    7ec2:	2e 97       	sbiw	r28, 0x0e	; 14
    7ec4:	0f b6       	in	r0, 0x3f	; 63
    7ec6:	f8 94       	cli
    7ec8:	de bf       	out	0x3e, r29	; 62
    7eca:	0f be       	out	0x3f, r0	; 63
    7ecc:	cd bf       	out	0x3d, r28	; 61
	H_BUZZER_Void_TurnOn();
    7ece:	0e 94 12 2c 	call	0x5824	; 0x5824 <H_BUZZER_Void_TurnOn>
	H_LCD_void_sendString("SYSTEM Closed");
    7ed2:	8e e7       	ldi	r24, 0x7E	; 126
    7ed4:	92 e0       	ldi	r25, 0x02	; 2
    7ed6:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    7eda:	80 e0       	ldi	r24, 0x00	; 0
    7edc:	90 e0       	ldi	r25, 0x00	; 0
    7ede:	aa e7       	ldi	r26, 0x7A	; 122
    7ee0:	b4 e4       	ldi	r27, 0x44	; 68
    7ee2:	8b 87       	std	Y+11, r24	; 0x0b
    7ee4:	9c 87       	std	Y+12, r25	; 0x0c
    7ee6:	ad 87       	std	Y+13, r26	; 0x0d
    7ee8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7eea:	6b 85       	ldd	r22, Y+11	; 0x0b
    7eec:	7c 85       	ldd	r23, Y+12	; 0x0c
    7eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    7ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    7ef2:	20 e0       	ldi	r18, 0x00	; 0
    7ef4:	30 e0       	ldi	r19, 0x00	; 0
    7ef6:	4a e7       	ldi	r20, 0x7A	; 122
    7ef8:	55 e4       	ldi	r21, 0x45	; 69
    7efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7efe:	dc 01       	movw	r26, r24
    7f00:	cb 01       	movw	r24, r22
    7f02:	8f 83       	std	Y+7, r24	; 0x07
    7f04:	98 87       	std	Y+8, r25	; 0x08
    7f06:	a9 87       	std	Y+9, r26	; 0x09
    7f08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7f0a:	6f 81       	ldd	r22, Y+7	; 0x07
    7f0c:	78 85       	ldd	r23, Y+8	; 0x08
    7f0e:	89 85       	ldd	r24, Y+9	; 0x09
    7f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f12:	20 e0       	ldi	r18, 0x00	; 0
    7f14:	30 e0       	ldi	r19, 0x00	; 0
    7f16:	40 e8       	ldi	r20, 0x80	; 128
    7f18:	5f e3       	ldi	r21, 0x3F	; 63
    7f1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7f1e:	88 23       	and	r24, r24
    7f20:	2c f4       	brge	.+10     	; 0x7f2c <SYSTEM_OFF+0x72>
		__ticks = 1;
    7f22:	81 e0       	ldi	r24, 0x01	; 1
    7f24:	90 e0       	ldi	r25, 0x00	; 0
    7f26:	9e 83       	std	Y+6, r25	; 0x06
    7f28:	8d 83       	std	Y+5, r24	; 0x05
    7f2a:	3f c0       	rjmp	.+126    	; 0x7faa <SYSTEM_OFF+0xf0>
	else if (__tmp > 65535)
    7f2c:	6f 81       	ldd	r22, Y+7	; 0x07
    7f2e:	78 85       	ldd	r23, Y+8	; 0x08
    7f30:	89 85       	ldd	r24, Y+9	; 0x09
    7f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f34:	20 e0       	ldi	r18, 0x00	; 0
    7f36:	3f ef       	ldi	r19, 0xFF	; 255
    7f38:	4f e7       	ldi	r20, 0x7F	; 127
    7f3a:	57 e4       	ldi	r21, 0x47	; 71
    7f3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7f40:	18 16       	cp	r1, r24
    7f42:	4c f5       	brge	.+82     	; 0x7f96 <SYSTEM_OFF+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7f44:	6b 85       	ldd	r22, Y+11	; 0x0b
    7f46:	7c 85       	ldd	r23, Y+12	; 0x0c
    7f48:	8d 85       	ldd	r24, Y+13	; 0x0d
    7f4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    7f4c:	20 e0       	ldi	r18, 0x00	; 0
    7f4e:	30 e0       	ldi	r19, 0x00	; 0
    7f50:	40 e2       	ldi	r20, 0x20	; 32
    7f52:	51 e4       	ldi	r21, 0x41	; 65
    7f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7f58:	dc 01       	movw	r26, r24
    7f5a:	cb 01       	movw	r24, r22
    7f5c:	bc 01       	movw	r22, r24
    7f5e:	cd 01       	movw	r24, r26
    7f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7f64:	dc 01       	movw	r26, r24
    7f66:	cb 01       	movw	r24, r22
    7f68:	9e 83       	std	Y+6, r25	; 0x06
    7f6a:	8d 83       	std	Y+5, r24	; 0x05
    7f6c:	0f c0       	rjmp	.+30     	; 0x7f8c <SYSTEM_OFF+0xd2>
    7f6e:	80 e9       	ldi	r24, 0x90	; 144
    7f70:	91 e0       	ldi	r25, 0x01	; 1
    7f72:	9c 83       	std	Y+4, r25	; 0x04
    7f74:	8b 83       	std	Y+3, r24	; 0x03
    7f76:	8b 81       	ldd	r24, Y+3	; 0x03
    7f78:	9c 81       	ldd	r25, Y+4	; 0x04
    7f7a:	01 97       	sbiw	r24, 0x01	; 1
    7f7c:	f1 f7       	brne	.-4      	; 0x7f7a <SYSTEM_OFF+0xc0>
    7f7e:	9c 83       	std	Y+4, r25	; 0x04
    7f80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7f82:	8d 81       	ldd	r24, Y+5	; 0x05
    7f84:	9e 81       	ldd	r25, Y+6	; 0x06
    7f86:	01 97       	sbiw	r24, 0x01	; 1
    7f88:	9e 83       	std	Y+6, r25	; 0x06
    7f8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    7f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    7f90:	00 97       	sbiw	r24, 0x00	; 0
    7f92:	69 f7       	brne	.-38     	; 0x7f6e <SYSTEM_OFF+0xb4>
    7f94:	14 c0       	rjmp	.+40     	; 0x7fbe <SYSTEM_OFF+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7f96:	6f 81       	ldd	r22, Y+7	; 0x07
    7f98:	78 85       	ldd	r23, Y+8	; 0x08
    7f9a:	89 85       	ldd	r24, Y+9	; 0x09
    7f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7fa2:	dc 01       	movw	r26, r24
    7fa4:	cb 01       	movw	r24, r22
    7fa6:	9e 83       	std	Y+6, r25	; 0x06
    7fa8:	8d 83       	std	Y+5, r24	; 0x05
    7faa:	8d 81       	ldd	r24, Y+5	; 0x05
    7fac:	9e 81       	ldd	r25, Y+6	; 0x06
    7fae:	9a 83       	std	Y+2, r25	; 0x02
    7fb0:	89 83       	std	Y+1, r24	; 0x01
    7fb2:	89 81       	ldd	r24, Y+1	; 0x01
    7fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    7fb6:	01 97       	sbiw	r24, 0x01	; 1
    7fb8:	f1 f7       	brne	.-4      	; 0x7fb6 <SYSTEM_OFF+0xfc>
    7fba:	9a 83       	std	Y+2, r25	; 0x02
    7fbc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	H_BUZZER_Void_TurnOff();
    7fbe:	0e 94 1d 2c 	call	0x583a	; 0x583a <H_BUZZER_Void_TurnOff>
	H_LCD_void_ClearDisplay();
    7fc2:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>

}
    7fc6:	2e 96       	adiw	r28, 0x0e	; 14
    7fc8:	0f b6       	in	r0, 0x3f	; 63
    7fca:	f8 94       	cli
    7fcc:	de bf       	out	0x3e, r29	; 62
    7fce:	0f be       	out	0x3f, r0	; 63
    7fd0:	cd bf       	out	0x3d, r28	; 61
    7fd2:	cf 91       	pop	r28
    7fd4:	df 91       	pop	r29
    7fd6:	08 95       	ret

00007fd8 <Wrong_Authentication>:

Pass_State Wrong_Authentication(void)
{
    7fd8:	df 93       	push	r29
    7fda:	cf 93       	push	r28
    7fdc:	cd b7       	in	r28, 0x3d	; 61
    7fde:	de b7       	in	r29, 0x3e	; 62
    7fe0:	60 97       	sbiw	r28, 0x10	; 16
    7fe2:	0f b6       	in	r0, 0x3f	; 63
    7fe4:	f8 94       	cli
    7fe6:	de bf       	out	0x3e, r29	; 62
    7fe8:	0f be       	out	0x3f, r0	; 63
    7fea:	cd bf       	out	0x3d, r28	; 61
	Login_State Pass = Pass_Ok;
    7fec:	81 e0       	ldi	r24, 0x01	; 1
    7fee:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_Holder=0;
    7ff0:	1f 86       	std	Y+15, r1	; 0x0f

	/*Increment global counter */
	Global_PasswordCounter ++ ;
    7ff2:	80 91 04 06 	lds	r24, 0x0604
    7ff6:	8f 5f       	subi	r24, 0xFF	; 255
    7ff8:	80 93 04 06 	sts	0x0604, r24
	H_LCD_void_gotoXY(2,0);
    7ffc:	82 e0       	ldi	r24, 0x02	; 2
    7ffe:	60 e0       	ldi	r22, 0x00	; 0
    8000:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
    H_LCD_void_sendString("Wrong Password");
    8004:	8c e8       	ldi	r24, 0x8C	; 140
    8006:	92 e0       	ldi	r25, 0x02	; 2
    8008:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    800c:	80 e0       	ldi	r24, 0x00	; 0
    800e:	90 e0       	ldi	r25, 0x00	; 0
    8010:	aa e7       	ldi	r26, 0x7A	; 122
    8012:	b4 e4       	ldi	r27, 0x44	; 68
    8014:	8b 87       	std	Y+11, r24	; 0x0b
    8016:	9c 87       	std	Y+12, r25	; 0x0c
    8018:	ad 87       	std	Y+13, r26	; 0x0d
    801a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    801c:	6b 85       	ldd	r22, Y+11	; 0x0b
    801e:	7c 85       	ldd	r23, Y+12	; 0x0c
    8020:	8d 85       	ldd	r24, Y+13	; 0x0d
    8022:	9e 85       	ldd	r25, Y+14	; 0x0e
    8024:	20 e0       	ldi	r18, 0x00	; 0
    8026:	30 e0       	ldi	r19, 0x00	; 0
    8028:	4a e7       	ldi	r20, 0x7A	; 122
    802a:	55 e4       	ldi	r21, 0x45	; 69
    802c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8030:	dc 01       	movw	r26, r24
    8032:	cb 01       	movw	r24, r22
    8034:	8f 83       	std	Y+7, r24	; 0x07
    8036:	98 87       	std	Y+8, r25	; 0x08
    8038:	a9 87       	std	Y+9, r26	; 0x09
    803a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    803c:	6f 81       	ldd	r22, Y+7	; 0x07
    803e:	78 85       	ldd	r23, Y+8	; 0x08
    8040:	89 85       	ldd	r24, Y+9	; 0x09
    8042:	9a 85       	ldd	r25, Y+10	; 0x0a
    8044:	20 e0       	ldi	r18, 0x00	; 0
    8046:	30 e0       	ldi	r19, 0x00	; 0
    8048:	40 e8       	ldi	r20, 0x80	; 128
    804a:	5f e3       	ldi	r21, 0x3F	; 63
    804c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8050:	88 23       	and	r24, r24
    8052:	2c f4       	brge	.+10     	; 0x805e <Wrong_Authentication+0x86>
		__ticks = 1;
    8054:	81 e0       	ldi	r24, 0x01	; 1
    8056:	90 e0       	ldi	r25, 0x00	; 0
    8058:	9e 83       	std	Y+6, r25	; 0x06
    805a:	8d 83       	std	Y+5, r24	; 0x05
    805c:	3f c0       	rjmp	.+126    	; 0x80dc <Wrong_Authentication+0x104>
	else if (__tmp > 65535)
    805e:	6f 81       	ldd	r22, Y+7	; 0x07
    8060:	78 85       	ldd	r23, Y+8	; 0x08
    8062:	89 85       	ldd	r24, Y+9	; 0x09
    8064:	9a 85       	ldd	r25, Y+10	; 0x0a
    8066:	20 e0       	ldi	r18, 0x00	; 0
    8068:	3f ef       	ldi	r19, 0xFF	; 255
    806a:	4f e7       	ldi	r20, 0x7F	; 127
    806c:	57 e4       	ldi	r21, 0x47	; 71
    806e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8072:	18 16       	cp	r1, r24
    8074:	4c f5       	brge	.+82     	; 0x80c8 <Wrong_Authentication+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8076:	6b 85       	ldd	r22, Y+11	; 0x0b
    8078:	7c 85       	ldd	r23, Y+12	; 0x0c
    807a:	8d 85       	ldd	r24, Y+13	; 0x0d
    807c:	9e 85       	ldd	r25, Y+14	; 0x0e
    807e:	20 e0       	ldi	r18, 0x00	; 0
    8080:	30 e0       	ldi	r19, 0x00	; 0
    8082:	40 e2       	ldi	r20, 0x20	; 32
    8084:	51 e4       	ldi	r21, 0x41	; 65
    8086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    808a:	dc 01       	movw	r26, r24
    808c:	cb 01       	movw	r24, r22
    808e:	bc 01       	movw	r22, r24
    8090:	cd 01       	movw	r24, r26
    8092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8096:	dc 01       	movw	r26, r24
    8098:	cb 01       	movw	r24, r22
    809a:	9e 83       	std	Y+6, r25	; 0x06
    809c:	8d 83       	std	Y+5, r24	; 0x05
    809e:	0f c0       	rjmp	.+30     	; 0x80be <Wrong_Authentication+0xe6>
    80a0:	80 e9       	ldi	r24, 0x90	; 144
    80a2:	91 e0       	ldi	r25, 0x01	; 1
    80a4:	9c 83       	std	Y+4, r25	; 0x04
    80a6:	8b 83       	std	Y+3, r24	; 0x03
    80a8:	8b 81       	ldd	r24, Y+3	; 0x03
    80aa:	9c 81       	ldd	r25, Y+4	; 0x04
    80ac:	01 97       	sbiw	r24, 0x01	; 1
    80ae:	f1 f7       	brne	.-4      	; 0x80ac <Wrong_Authentication+0xd4>
    80b0:	9c 83       	std	Y+4, r25	; 0x04
    80b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    80b4:	8d 81       	ldd	r24, Y+5	; 0x05
    80b6:	9e 81       	ldd	r25, Y+6	; 0x06
    80b8:	01 97       	sbiw	r24, 0x01	; 1
    80ba:	9e 83       	std	Y+6, r25	; 0x06
    80bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    80be:	8d 81       	ldd	r24, Y+5	; 0x05
    80c0:	9e 81       	ldd	r25, Y+6	; 0x06
    80c2:	00 97       	sbiw	r24, 0x00	; 0
    80c4:	69 f7       	brne	.-38     	; 0x80a0 <Wrong_Authentication+0xc8>
    80c6:	14 c0       	rjmp	.+40     	; 0x80f0 <Wrong_Authentication+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    80c8:	6f 81       	ldd	r22, Y+7	; 0x07
    80ca:	78 85       	ldd	r23, Y+8	; 0x08
    80cc:	89 85       	ldd	r24, Y+9	; 0x09
    80ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    80d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    80d4:	dc 01       	movw	r26, r24
    80d6:	cb 01       	movw	r24, r22
    80d8:	9e 83       	std	Y+6, r25	; 0x06
    80da:	8d 83       	std	Y+5, r24	; 0x05
    80dc:	8d 81       	ldd	r24, Y+5	; 0x05
    80de:	9e 81       	ldd	r25, Y+6	; 0x06
    80e0:	9a 83       	std	Y+2, r25	; 0x02
    80e2:	89 83       	std	Y+1, r24	; 0x01
    80e4:	89 81       	ldd	r24, Y+1	; 0x01
    80e6:	9a 81       	ldd	r25, Y+2	; 0x02
    80e8:	01 97       	sbiw	r24, 0x01	; 1
    80ea:	f1 f7       	brne	.-4      	; 0x80e8 <Wrong_Authentication+0x110>
    80ec:	9a 83       	std	Y+2, r25	; 0x02
    80ee:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
    Local_Holder = User_Authentication_SignIn();
    80f0:	0e 94 9f 40 	call	0x813e	; 0x813e <User_Authentication_SignIn>
    80f4:	8f 87       	std	Y+15, r24	; 0x0f

    H_LCD_void_ClearDisplay();
    80f6:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
	if(Local_Holder== Login_Ok)
    80fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    80fc:	81 30       	cpi	r24, 0x01	; 1
    80fe:	11 f4       	brne	.+4      	; 0x8104 <Wrong_Authentication+0x12c>
	{
	    Pass = Login_Ok;
    8100:	81 e0       	ldi	r24, 0x01	; 1
    8102:	88 8b       	std	Y+16, r24	; 0x10
	}
	if(Local_Holder== Login_Nok)
    8104:	8f 85       	ldd	r24, Y+15	; 0x0f
    8106:	88 23       	and	r24, r24
    8108:	09 f4       	brne	.+2      	; 0x810c <Wrong_Authentication+0x134>
	{
		 Pass = Login_Nok;
    810a:	18 8a       	std	Y+16, r1	; 0x10
	}
	return Pass;
    810c:	88 89       	ldd	r24, Y+16	; 0x10
}
    810e:	60 96       	adiw	r28, 0x10	; 16
    8110:	0f b6       	in	r0, 0x3f	; 63
    8112:	f8 94       	cli
    8114:	de bf       	out	0x3e, r29	; 62
    8116:	0f be       	out	0x3f, r0	; 63
    8118:	cd bf       	out	0x3d, r28	; 61
    811a:	cf 91       	pop	r28
    811c:	df 91       	pop	r29
    811e:	08 95       	ret

00008120 <APP_WelcomeDisplay>:

void APP_WelcomeDisplay()
{
    8120:	df 93       	push	r29
    8122:	cf 93       	push	r28
    8124:	cd b7       	in	r28, 0x3d	; 61
    8126:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_gotoXY(1, 0);
    8128:	81 e0       	ldi	r24, 0x01	; 1
    812a:	60 e0       	ldi	r22, 0x00	; 0
    812c:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("#Smart Home System#");
    8130:	8b e9       	ldi	r24, 0x9B	; 155
    8132:	92 e0       	ldi	r25, 0x02	; 2
    8134:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
}
    8138:	cf 91       	pop	r28
    813a:	df 91       	pop	r29
    813c:	08 95       	ret

0000813e <User_Authentication_SignIn>:

LOGIN_STATE User_Authentication_SignIn()
{
    813e:	df 93       	push	r29
    8140:	cf 93       	push	r28
    8142:	cd b7       	in	r28, 0x3d	; 61
    8144:	de b7       	in	r29, 0x3e	; 62
    8146:	28 97       	sbiw	r28, 0x08	; 8
    8148:	0f b6       	in	r0, 0x3f	; 63
    814a:	f8 94       	cli
    814c:	de bf       	out	0x3e, r29	; 62
    814e:	0f be       	out	0x3f, r0	; 63
    8150:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Local Variables
	 */
	u8 Finger_Print_check=0;
    8152:	1b 82       	std	Y+3, r1	; 0x03
	u8 checkTemp = 0 ;
    8154:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_PassWordArr[4] = {0};
    8156:	1c 82       	std	Y+4, r1	; 0x04
    8158:	1d 82       	std	Y+5, r1	; 0x05
    815a:	1e 82       	std	Y+6, r1	; 0x06
    815c:	1f 82       	std	Y+7, r1	; 0x07
	u8 Local_ID = 0 ;
    815e:	19 82       	std	Y+1, r1	; 0x01
	 * Scan the finger print
	 * each finger print will have ID
	 */
	do
	{
		Local_ID=Finger_Print_Match();
    8160:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <Finger_Print_Match>
    8164:	89 83       	std	Y+1, r24	; 0x01
	}while(Local_ID==0);
    8166:	89 81       	ldd	r24, Y+1	; 0x01
    8168:	88 23       	and	r24, r24
    816a:	d1 f3       	breq	.-12     	; 0x8160 <User_Authentication_SignIn+0x22>
	if(Local_ID==1)
    816c:	89 81       	ldd	r24, Y+1	; 0x01
    816e:	81 30       	cpi	r24, 0x01	; 1
    8170:	39 f4       	brne	.+14     	; 0x8180 <User_Authentication_SignIn+0x42>
	{
		H_LCD_void_ClearDisplay();
    8172:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("Welcome Nour");
    8176:	8f ea       	ldi	r24, 0xAF	; 175
    8178:	92 e0       	ldi	r25, 0x02	; 2
    817a:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    817e:	15 c0       	rjmp	.+42     	; 0x81aa <User_Authentication_SignIn+0x6c>
	}
	else if(Local_ID==2)
    8180:	89 81       	ldd	r24, Y+1	; 0x01
    8182:	82 30       	cpi	r24, 0x02	; 2
    8184:	39 f4       	brne	.+14     	; 0x8194 <User_Authentication_SignIn+0x56>
	{
		H_LCD_void_ClearDisplay();
    8186:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("Welcome Zedan");
    818a:	8c eb       	ldi	r24, 0xBC	; 188
    818c:	92 e0       	ldi	r25, 0x02	; 2
    818e:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    8192:	0b c0       	rjmp	.+22     	; 0x81aa <User_Authentication_SignIn+0x6c>
	}
	else if(Local_ID==100)
    8194:	89 81       	ldd	r24, Y+1	; 0x01
    8196:	84 36       	cpi	r24, 0x64	; 100
    8198:	41 f4       	brne	.+16     	; 0x81aa <User_Authentication_SignIn+0x6c>
	{
		H_LCD_void_ClearDisplay();
    819a:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
		H_LCD_void_sendString("No matching Found");
    819e:	8a ec       	ldi	r24, 0xCA	; 202
    81a0:	92 e0       	ldi	r25, 0x02	; 2
    81a2:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
		return INVALID_LOGIN;
    81a6:	18 86       	std	Y+8, r1	; 0x08
    81a8:	1d c0       	rjmp	.+58     	; 0x81e4 <User_Authentication_SignIn+0xa6>
		Local_ID = H_KEYPAD_u8_getPressedKey();
	  }while(Local_ID == NO_PRESSED_KEY);
*/

	/* Enter Password */
	H_LCD_void_ClearDisplay();
    81aa:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
	H_LCD_void_sendString("Enter Password:");
    81ae:	8c ed       	ldi	r24, 0xDC	; 220
    81b0:	92 e0       	ldi	r25, 0x02	; 2
    81b2:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
	H_LCD_void_gotoXY(2, 0);
    81b6:	82 e0       	ldi	r24, 0x02	; 2
    81b8:	60 e0       	ldi	r22, 0x00	; 0
    81ba:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
	KeyPad_EnterPassWord(Local_PassWordArr);
    81be:	ce 01       	movw	r24, r28
    81c0:	04 96       	adiw	r24, 0x04	; 4
    81c2:	0e 94 78 43 	call	0x86f0	; 0x86f0 <KeyPad_EnterPassWord>

	/*Call check password */
	H_LCD_void_ClearDisplay();
    81c6:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
	checkTemp = Check_Password(Local_PassWordArr,Local_ID);
    81ca:	ce 01       	movw	r24, r28
    81cc:	04 96       	adiw	r24, 0x04	; 4
    81ce:	69 81       	ldd	r22, Y+1	; 0x01
    81d0:	0e 94 fc 40 	call	0x81f8	; 0x81f8 <Check_Password>
    81d4:	8a 83       	std	Y+2, r24	; 0x02

	/*if return call check password is correct then return valid else return IN VALID */
	if(checkTemp == CORRECT_PASS)
    81d6:	8a 81       	ldd	r24, Y+2	; 0x02
    81d8:	81 30       	cpi	r24, 0x01	; 1
    81da:	19 f4       	brne	.+6      	; 0x81e2 <User_Authentication_SignIn+0xa4>
	{
		return VALID_LOGIN;
    81dc:	81 e0       	ldi	r24, 0x01	; 1
    81de:	88 87       	std	Y+8, r24	; 0x08
    81e0:	01 c0       	rjmp	.+2      	; 0x81e4 <User_Authentication_SignIn+0xa6>
	}
	else
	{
		return INVALID_LOGIN;
    81e2:	18 86       	std	Y+8, r1	; 0x08
    81e4:	88 85       	ldd	r24, Y+8	; 0x08
	}
}
    81e6:	28 96       	adiw	r28, 0x08	; 8
    81e8:	0f b6       	in	r0, 0x3f	; 63
    81ea:	f8 94       	cli
    81ec:	de bf       	out	0x3e, r29	; 62
    81ee:	0f be       	out	0x3f, r0	; 63
    81f0:	cd bf       	out	0x3d, r28	; 61
    81f2:	cf 91       	pop	r28
    81f4:	df 91       	pop	r29
    81f6:	08 95       	ret

000081f8 <Check_Password>:

PASS_STATE Check_Password(u8 *Copy_Password, u8 Copy_ID)
{
    81f8:	df 93       	push	r29
    81fa:	cf 93       	push	r28
    81fc:	cd b7       	in	r28, 0x3d	; 61
    81fe:	de b7       	in	r29, 0x3e	; 62
    8200:	67 97       	sbiw	r28, 0x17	; 23
    8202:	0f b6       	in	r0, 0x3f	; 63
    8204:	f8 94       	cli
    8206:	de bf       	out	0x3e, r29	; 62
    8208:	0f be       	out	0x3f, r0	; 63
    820a:	cd bf       	out	0x3d, r28	; 61
    820c:	9b 8b       	std	Y+19, r25	; 0x13
    820e:	8a 8b       	std	Y+18, r24	; 0x12
    8210:	6c 8b       	std	Y+20, r22	; 0x14
	u8 Local_Counter = 0;
    8212:	18 8a       	std	Y+16, r1	; 0x10
	u8 AddressCounter = 0 ;
    8214:	1f 86       	std	Y+15, r1	; 0x0f
	u8 Temp_Holder = 0;
    8216:	19 8a       	std	Y+17, r1	; 0x11

	switch(Copy_ID)
    8218:	8c 89       	ldd	r24, Y+20	; 0x14
    821a:	28 2f       	mov	r18, r24
    821c:	30 e0       	ldi	r19, 0x00	; 0
    821e:	3f 8b       	std	Y+23, r19	; 0x17
    8220:	2e 8b       	std	Y+22, r18	; 0x16
    8222:	8e 89       	ldd	r24, Y+22	; 0x16
    8224:	9f 89       	ldd	r25, Y+23	; 0x17
    8226:	81 33       	cpi	r24, 0x31	; 49
    8228:	91 05       	cpc	r25, r1
    822a:	31 f0       	breq	.+12     	; 0x8238 <Check_Password+0x40>
    822c:	2e 89       	ldd	r18, Y+22	; 0x16
    822e:	3f 89       	ldd	r19, Y+23	; 0x17
    8230:	22 33       	cpi	r18, 0x32	; 50
    8232:	31 05       	cpc	r19, r1
    8234:	39 f0       	breq	.+14     	; 0x8244 <Check_Password+0x4c>
    8236:	0c c0       	rjmp	.+24     	; 0x8250 <Check_Password+0x58>
	{
	case '1':
		AddressCounter = 0 ;
    8238:	1f 86       	std	Y+15, r1	; 0x0f
		H_LCD_void_sendString("ID_1");
    823a:	8c ee       	ldi	r24, 0xEC	; 236
    823c:	92 e0       	ldi	r25, 0x02	; 2
    823e:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    8242:	06 c0       	rjmp	.+12     	; 0x8250 <Check_Password+0x58>
		break;
	case '2':
		AddressCounter = 4 ;
    8244:	84 e0       	ldi	r24, 0x04	; 4
    8246:	8f 87       	std	Y+15, r24	; 0x0f
		H_LCD_void_sendString("ID_2");
    8248:	81 ef       	ldi	r24, 0xF1	; 241
    824a:	92 e0       	ldi	r25, 0x02	; 2
    824c:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
		break;
	}

	for(Local_Counter = 0; Local_Counter < 4; Local_Counter++)
    8250:	18 8a       	std	Y+16, r1	; 0x10
    8252:	8f c0       	rjmp	.+286    	; 0x8372 <Check_Password+0x17a>
    8254:	80 e0       	ldi	r24, 0x00	; 0
    8256:	90 e0       	ldi	r25, 0x00	; 0
    8258:	a8 e4       	ldi	r26, 0x48	; 72
    825a:	b3 e4       	ldi	r27, 0x43	; 67
    825c:	8b 87       	std	Y+11, r24	; 0x0b
    825e:	9c 87       	std	Y+12, r25	; 0x0c
    8260:	ad 87       	std	Y+13, r26	; 0x0d
    8262:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    8264:	6b 85       	ldd	r22, Y+11	; 0x0b
    8266:	7c 85       	ldd	r23, Y+12	; 0x0c
    8268:	8d 85       	ldd	r24, Y+13	; 0x0d
    826a:	9e 85       	ldd	r25, Y+14	; 0x0e
    826c:	20 e0       	ldi	r18, 0x00	; 0
    826e:	30 e0       	ldi	r19, 0x00	; 0
    8270:	4a e7       	ldi	r20, 0x7A	; 122
    8272:	55 e4       	ldi	r21, 0x45	; 69
    8274:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8278:	dc 01       	movw	r26, r24
    827a:	cb 01       	movw	r24, r22
    827c:	8f 83       	std	Y+7, r24	; 0x07
    827e:	98 87       	std	Y+8, r25	; 0x08
    8280:	a9 87       	std	Y+9, r26	; 0x09
    8282:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    8284:	6f 81       	ldd	r22, Y+7	; 0x07
    8286:	78 85       	ldd	r23, Y+8	; 0x08
    8288:	89 85       	ldd	r24, Y+9	; 0x09
    828a:	9a 85       	ldd	r25, Y+10	; 0x0a
    828c:	20 e0       	ldi	r18, 0x00	; 0
    828e:	30 e0       	ldi	r19, 0x00	; 0
    8290:	40 e8       	ldi	r20, 0x80	; 128
    8292:	5f e3       	ldi	r21, 0x3F	; 63
    8294:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8298:	88 23       	and	r24, r24
    829a:	2c f4       	brge	.+10     	; 0x82a6 <Check_Password+0xae>
		__ticks = 1;
    829c:	81 e0       	ldi	r24, 0x01	; 1
    829e:	90 e0       	ldi	r25, 0x00	; 0
    82a0:	9e 83       	std	Y+6, r25	; 0x06
    82a2:	8d 83       	std	Y+5, r24	; 0x05
    82a4:	3f c0       	rjmp	.+126    	; 0x8324 <Check_Password+0x12c>
	else if (__tmp > 65535)
    82a6:	6f 81       	ldd	r22, Y+7	; 0x07
    82a8:	78 85       	ldd	r23, Y+8	; 0x08
    82aa:	89 85       	ldd	r24, Y+9	; 0x09
    82ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    82ae:	20 e0       	ldi	r18, 0x00	; 0
    82b0:	3f ef       	ldi	r19, 0xFF	; 255
    82b2:	4f e7       	ldi	r20, 0x7F	; 127
    82b4:	57 e4       	ldi	r21, 0x47	; 71
    82b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    82ba:	18 16       	cp	r1, r24
    82bc:	4c f5       	brge	.+82     	; 0x8310 <Check_Password+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    82be:	6b 85       	ldd	r22, Y+11	; 0x0b
    82c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    82c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    82c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    82c6:	20 e0       	ldi	r18, 0x00	; 0
    82c8:	30 e0       	ldi	r19, 0x00	; 0
    82ca:	40 e2       	ldi	r20, 0x20	; 32
    82cc:	51 e4       	ldi	r21, 0x41	; 65
    82ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    82d2:	dc 01       	movw	r26, r24
    82d4:	cb 01       	movw	r24, r22
    82d6:	bc 01       	movw	r22, r24
    82d8:	cd 01       	movw	r24, r26
    82da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    82de:	dc 01       	movw	r26, r24
    82e0:	cb 01       	movw	r24, r22
    82e2:	9e 83       	std	Y+6, r25	; 0x06
    82e4:	8d 83       	std	Y+5, r24	; 0x05
    82e6:	0f c0       	rjmp	.+30     	; 0x8306 <Check_Password+0x10e>
    82e8:	80 e9       	ldi	r24, 0x90	; 144
    82ea:	91 e0       	ldi	r25, 0x01	; 1
    82ec:	9c 83       	std	Y+4, r25	; 0x04
    82ee:	8b 83       	std	Y+3, r24	; 0x03
    82f0:	8b 81       	ldd	r24, Y+3	; 0x03
    82f2:	9c 81       	ldd	r25, Y+4	; 0x04
    82f4:	01 97       	sbiw	r24, 0x01	; 1
    82f6:	f1 f7       	brne	.-4      	; 0x82f4 <Check_Password+0xfc>
    82f8:	9c 83       	std	Y+4, r25	; 0x04
    82fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    82fc:	8d 81       	ldd	r24, Y+5	; 0x05
    82fe:	9e 81       	ldd	r25, Y+6	; 0x06
    8300:	01 97       	sbiw	r24, 0x01	; 1
    8302:	9e 83       	std	Y+6, r25	; 0x06
    8304:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8306:	8d 81       	ldd	r24, Y+5	; 0x05
    8308:	9e 81       	ldd	r25, Y+6	; 0x06
    830a:	00 97       	sbiw	r24, 0x00	; 0
    830c:	69 f7       	brne	.-38     	; 0x82e8 <Check_Password+0xf0>
    830e:	14 c0       	rjmp	.+40     	; 0x8338 <Check_Password+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8310:	6f 81       	ldd	r22, Y+7	; 0x07
    8312:	78 85       	ldd	r23, Y+8	; 0x08
    8314:	89 85       	ldd	r24, Y+9	; 0x09
    8316:	9a 85       	ldd	r25, Y+10	; 0x0a
    8318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    831c:	dc 01       	movw	r26, r24
    831e:	cb 01       	movw	r24, r22
    8320:	9e 83       	std	Y+6, r25	; 0x06
    8322:	8d 83       	std	Y+5, r24	; 0x05
    8324:	8d 81       	ldd	r24, Y+5	; 0x05
    8326:	9e 81       	ldd	r25, Y+6	; 0x06
    8328:	9a 83       	std	Y+2, r25	; 0x02
    832a:	89 83       	std	Y+1, r24	; 0x01
    832c:	89 81       	ldd	r24, Y+1	; 0x01
    832e:	9a 81       	ldd	r25, Y+2	; 0x02
    8330:	01 97       	sbiw	r24, 0x01	; 1
    8332:	f1 f7       	brne	.-4      	; 0x8330 <Check_Password+0x138>
    8334:	9a 83       	std	Y+2, r25	; 0x02
    8336:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(200);
		H_EEPROM_Void_ReadByte(AddressCounter, &Temp_Holder);
    8338:	8f 85       	ldd	r24, Y+15	; 0x0f
    833a:	88 2f       	mov	r24, r24
    833c:	90 e0       	ldi	r25, 0x00	; 0
    833e:	9e 01       	movw	r18, r28
    8340:	2f 5e       	subi	r18, 0xEF	; 239
    8342:	3f 4f       	sbci	r19, 0xFF	; 255
    8344:	b9 01       	movw	r22, r18
    8346:	0e 94 18 26 	call	0x4c30	; 0x4c30 <H_EEPROM_Void_ReadByte>

		/*If there is incorrect number  */
		if(Temp_Holder != Copy_Password[Local_Counter])
    834a:	88 89       	ldd	r24, Y+16	; 0x10
    834c:	28 2f       	mov	r18, r24
    834e:	30 e0       	ldi	r19, 0x00	; 0
    8350:	8a 89       	ldd	r24, Y+18	; 0x12
    8352:	9b 89       	ldd	r25, Y+19	; 0x13
    8354:	fc 01       	movw	r30, r24
    8356:	e2 0f       	add	r30, r18
    8358:	f3 1f       	adc	r31, r19
    835a:	90 81       	ld	r25, Z
    835c:	89 89       	ldd	r24, Y+17	; 0x11
    835e:	98 17       	cp	r25, r24
    8360:	11 f0       	breq	.+4      	; 0x8366 <Check_Password+0x16e>
		{
			return INCORRECT_PASS ;
    8362:	1d 8a       	std	Y+21, r1	; 0x15
    8364:	0d c0       	rjmp	.+26     	; 0x8380 <Check_Password+0x188>
		}
		AddressCounter ++ ;
    8366:	8f 85       	ldd	r24, Y+15	; 0x0f
    8368:	8f 5f       	subi	r24, 0xFF	; 255
    836a:	8f 87       	std	Y+15, r24	; 0x0f
		AddressCounter = 4 ;
		H_LCD_void_sendString("ID_2");
		break;
	}

	for(Local_Counter = 0; Local_Counter < 4; Local_Counter++)
    836c:	88 89       	ldd	r24, Y+16	; 0x10
    836e:	8f 5f       	subi	r24, 0xFF	; 255
    8370:	88 8b       	std	Y+16, r24	; 0x10
    8372:	88 89       	ldd	r24, Y+16	; 0x10
    8374:	84 30       	cpi	r24, 0x04	; 4
    8376:	08 f4       	brcc	.+2      	; 0x837a <Check_Password+0x182>
    8378:	6d cf       	rjmp	.-294    	; 0x8254 <Check_Password+0x5c>
		{
			return INCORRECT_PASS ;
		}
		AddressCounter ++ ;
	}
	AddressCounter = 0 ;
    837a:	1f 86       	std	Y+15, r1	; 0x0f
	return CORRECT_PASS ;
    837c:	31 e0       	ldi	r19, 0x01	; 1
    837e:	3d 8b       	std	Y+21, r19	; 0x15
    8380:	8d 89       	ldd	r24, Y+21	; 0x15
}
    8382:	67 96       	adiw	r28, 0x17	; 23
    8384:	0f b6       	in	r0, 0x3f	; 63
    8386:	f8 94       	cli
    8388:	de bf       	out	0x3e, r29	; 62
    838a:	0f be       	out	0x3f, r0	; 63
    838c:	cd bf       	out	0x3d, r28	; 61
    838e:	cf 91       	pop	r28
    8390:	df 91       	pop	r29
    8392:	08 95       	ret

00008394 <User_Authentication_SignUp>:

void User_Authentication_SignUp()
{
    8394:	df 93       	push	r29
    8396:	cf 93       	push	r28
    8398:	cd b7       	in	r28, 0x3d	; 61
    839a:	de b7       	in	r29, 0x3e	; 62
    839c:	e0 97       	sbiw	r28, 0x30	; 48
    839e:	0f b6       	in	r0, 0x3f	; 63
    83a0:	f8 94       	cli
    83a2:	de bf       	out	0x3e, r29	; 62
    83a4:	0f be       	out	0x3f, r0	; 63
    83a6:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Local Variables
	 */
	u8 Local_PassWordArr[4] = {0};
    83a8:	1c a6       	std	Y+44, r1	; 0x2c
    83aa:	1d a6       	std	Y+45, r1	; 0x2d
    83ac:	1e a6       	std	Y+46, r1	; 0x2e
    83ae:	1f a6       	std	Y+47, r1	; 0x2f
	u8 User_ID = 0;
    83b0:	18 aa       	std	Y+48, r1	; 0x30
	u8 Local_Counter =0;
    83b2:	1b a6       	std	Y+43, r1	; 0x2b
	H_LCD_void_ClearDisplay();
    83b4:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
	H_LCD_void_gotoXY(1, 0);
    83b8:	81 e0       	ldi	r24, 0x01	; 1
    83ba:	60 e0       	ldi	r22, 0x00	; 0
    83bc:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
	H_LCD_void_sendString("Adding New User: ");
    83c0:	86 ef       	ldi	r24, 0xF6	; 246
    83c2:	92 e0       	ldi	r25, 0x02	; 2
    83c4:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    83c8:	80 e0       	ldi	r24, 0x00	; 0
    83ca:	90 e0       	ldi	r25, 0x00	; 0
    83cc:	aa e7       	ldi	r26, 0x7A	; 122
    83ce:	b4 e4       	ldi	r27, 0x44	; 68
    83d0:	8f a3       	std	Y+39, r24	; 0x27
    83d2:	98 a7       	std	Y+40, r25	; 0x28
    83d4:	a9 a7       	std	Y+41, r26	; 0x29
    83d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    83d8:	6f a1       	ldd	r22, Y+39	; 0x27
    83da:	78 a5       	ldd	r23, Y+40	; 0x28
    83dc:	89 a5       	ldd	r24, Y+41	; 0x29
    83de:	9a a5       	ldd	r25, Y+42	; 0x2a
    83e0:	20 e0       	ldi	r18, 0x00	; 0
    83e2:	30 e0       	ldi	r19, 0x00	; 0
    83e4:	4a e7       	ldi	r20, 0x7A	; 122
    83e6:	55 e4       	ldi	r21, 0x45	; 69
    83e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    83ec:	dc 01       	movw	r26, r24
    83ee:	cb 01       	movw	r24, r22
    83f0:	8b a3       	std	Y+35, r24	; 0x23
    83f2:	9c a3       	std	Y+36, r25	; 0x24
    83f4:	ad a3       	std	Y+37, r26	; 0x25
    83f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    83f8:	6b a1       	ldd	r22, Y+35	; 0x23
    83fa:	7c a1       	ldd	r23, Y+36	; 0x24
    83fc:	8d a1       	ldd	r24, Y+37	; 0x25
    83fe:	9e a1       	ldd	r25, Y+38	; 0x26
    8400:	20 e0       	ldi	r18, 0x00	; 0
    8402:	30 e0       	ldi	r19, 0x00	; 0
    8404:	40 e8       	ldi	r20, 0x80	; 128
    8406:	5f e3       	ldi	r21, 0x3F	; 63
    8408:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    840c:	88 23       	and	r24, r24
    840e:	2c f4       	brge	.+10     	; 0x841a <User_Authentication_SignUp+0x86>
		__ticks = 1;
    8410:	81 e0       	ldi	r24, 0x01	; 1
    8412:	90 e0       	ldi	r25, 0x00	; 0
    8414:	9a a3       	std	Y+34, r25	; 0x22
    8416:	89 a3       	std	Y+33, r24	; 0x21
    8418:	3f c0       	rjmp	.+126    	; 0x8498 <User_Authentication_SignUp+0x104>
	else if (__tmp > 65535)
    841a:	6b a1       	ldd	r22, Y+35	; 0x23
    841c:	7c a1       	ldd	r23, Y+36	; 0x24
    841e:	8d a1       	ldd	r24, Y+37	; 0x25
    8420:	9e a1       	ldd	r25, Y+38	; 0x26
    8422:	20 e0       	ldi	r18, 0x00	; 0
    8424:	3f ef       	ldi	r19, 0xFF	; 255
    8426:	4f e7       	ldi	r20, 0x7F	; 127
    8428:	57 e4       	ldi	r21, 0x47	; 71
    842a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    842e:	18 16       	cp	r1, r24
    8430:	4c f5       	brge	.+82     	; 0x8484 <User_Authentication_SignUp+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8432:	6f a1       	ldd	r22, Y+39	; 0x27
    8434:	78 a5       	ldd	r23, Y+40	; 0x28
    8436:	89 a5       	ldd	r24, Y+41	; 0x29
    8438:	9a a5       	ldd	r25, Y+42	; 0x2a
    843a:	20 e0       	ldi	r18, 0x00	; 0
    843c:	30 e0       	ldi	r19, 0x00	; 0
    843e:	40 e2       	ldi	r20, 0x20	; 32
    8440:	51 e4       	ldi	r21, 0x41	; 65
    8442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8446:	dc 01       	movw	r26, r24
    8448:	cb 01       	movw	r24, r22
    844a:	bc 01       	movw	r22, r24
    844c:	cd 01       	movw	r24, r26
    844e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8452:	dc 01       	movw	r26, r24
    8454:	cb 01       	movw	r24, r22
    8456:	9a a3       	std	Y+34, r25	; 0x22
    8458:	89 a3       	std	Y+33, r24	; 0x21
    845a:	0f c0       	rjmp	.+30     	; 0x847a <User_Authentication_SignUp+0xe6>
    845c:	80 e9       	ldi	r24, 0x90	; 144
    845e:	91 e0       	ldi	r25, 0x01	; 1
    8460:	98 a3       	std	Y+32, r25	; 0x20
    8462:	8f 8f       	std	Y+31, r24	; 0x1f
    8464:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8466:	98 a1       	ldd	r25, Y+32	; 0x20
    8468:	01 97       	sbiw	r24, 0x01	; 1
    846a:	f1 f7       	brne	.-4      	; 0x8468 <User_Authentication_SignUp+0xd4>
    846c:	98 a3       	std	Y+32, r25	; 0x20
    846e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8470:	89 a1       	ldd	r24, Y+33	; 0x21
    8472:	9a a1       	ldd	r25, Y+34	; 0x22
    8474:	01 97       	sbiw	r24, 0x01	; 1
    8476:	9a a3       	std	Y+34, r25	; 0x22
    8478:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    847a:	89 a1       	ldd	r24, Y+33	; 0x21
    847c:	9a a1       	ldd	r25, Y+34	; 0x22
    847e:	00 97       	sbiw	r24, 0x00	; 0
    8480:	69 f7       	brne	.-38     	; 0x845c <User_Authentication_SignUp+0xc8>
    8482:	14 c0       	rjmp	.+40     	; 0x84ac <User_Authentication_SignUp+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8484:	6b a1       	ldd	r22, Y+35	; 0x23
    8486:	7c a1       	ldd	r23, Y+36	; 0x24
    8488:	8d a1       	ldd	r24, Y+37	; 0x25
    848a:	9e a1       	ldd	r25, Y+38	; 0x26
    848c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8490:	dc 01       	movw	r26, r24
    8492:	cb 01       	movw	r24, r22
    8494:	9a a3       	std	Y+34, r25	; 0x22
    8496:	89 a3       	std	Y+33, r24	; 0x21
    8498:	89 a1       	ldd	r24, Y+33	; 0x21
    849a:	9a a1       	ldd	r25, Y+34	; 0x22
    849c:	9e 8f       	std	Y+30, r25	; 0x1e
    849e:	8d 8f       	std	Y+29, r24	; 0x1d
    84a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    84a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    84a4:	01 97       	sbiw	r24, 0x01	; 1
    84a6:	f1 f7       	brne	.-4      	; 0x84a4 <User_Authentication_SignUp+0x110>
    84a8:	9e 8f       	std	Y+30, r25	; 0x1e
    84aa:	8d 8f       	std	Y+29, r24	; 0x1d

	/* Take the next ID*/
	_delay_ms(1000);
	H_EEPROM_Void_ReadByte(EEPROM_USER_ID, &User_ID);
    84ac:	9e 01       	movw	r18, r28
    84ae:	20 5d       	subi	r18, 0xD0	; 208
    84b0:	3f 4f       	sbci	r19, 0xFF	; 255
    84b2:	8f ef       	ldi	r24, 0xFF	; 255
    84b4:	90 e0       	ldi	r25, 0x00	; 0
    84b6:	b9 01       	movw	r22, r18
    84b8:	0e 94 18 26 	call	0x4c30	; 0x4c30 <H_EEPROM_Void_ReadByte>
    84bc:	80 e0       	ldi	r24, 0x00	; 0
    84be:	90 e0       	ldi	r25, 0x00	; 0
    84c0:	a8 e4       	ldi	r26, 0x48	; 72
    84c2:	b3 e4       	ldi	r27, 0x43	; 67
    84c4:	89 8f       	std	Y+25, r24	; 0x19
    84c6:	9a 8f       	std	Y+26, r25	; 0x1a
    84c8:	ab 8f       	std	Y+27, r26	; 0x1b
    84ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    84cc:	69 8d       	ldd	r22, Y+25	; 0x19
    84ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    84d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    84d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    84d4:	20 e0       	ldi	r18, 0x00	; 0
    84d6:	30 e0       	ldi	r19, 0x00	; 0
    84d8:	4a e7       	ldi	r20, 0x7A	; 122
    84da:	55 e4       	ldi	r21, 0x45	; 69
    84dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    84e0:	dc 01       	movw	r26, r24
    84e2:	cb 01       	movw	r24, r22
    84e4:	8d 8b       	std	Y+21, r24	; 0x15
    84e6:	9e 8b       	std	Y+22, r25	; 0x16
    84e8:	af 8b       	std	Y+23, r26	; 0x17
    84ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    84ec:	6d 89       	ldd	r22, Y+21	; 0x15
    84ee:	7e 89       	ldd	r23, Y+22	; 0x16
    84f0:	8f 89       	ldd	r24, Y+23	; 0x17
    84f2:	98 8d       	ldd	r25, Y+24	; 0x18
    84f4:	20 e0       	ldi	r18, 0x00	; 0
    84f6:	30 e0       	ldi	r19, 0x00	; 0
    84f8:	40 e8       	ldi	r20, 0x80	; 128
    84fa:	5f e3       	ldi	r21, 0x3F	; 63
    84fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8500:	88 23       	and	r24, r24
    8502:	2c f4       	brge	.+10     	; 0x850e <User_Authentication_SignUp+0x17a>
		__ticks = 1;
    8504:	81 e0       	ldi	r24, 0x01	; 1
    8506:	90 e0       	ldi	r25, 0x00	; 0
    8508:	9c 8b       	std	Y+20, r25	; 0x14
    850a:	8b 8b       	std	Y+19, r24	; 0x13
    850c:	3f c0       	rjmp	.+126    	; 0x858c <User_Authentication_SignUp+0x1f8>
	else if (__tmp > 65535)
    850e:	6d 89       	ldd	r22, Y+21	; 0x15
    8510:	7e 89       	ldd	r23, Y+22	; 0x16
    8512:	8f 89       	ldd	r24, Y+23	; 0x17
    8514:	98 8d       	ldd	r25, Y+24	; 0x18
    8516:	20 e0       	ldi	r18, 0x00	; 0
    8518:	3f ef       	ldi	r19, 0xFF	; 255
    851a:	4f e7       	ldi	r20, 0x7F	; 127
    851c:	57 e4       	ldi	r21, 0x47	; 71
    851e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8522:	18 16       	cp	r1, r24
    8524:	4c f5       	brge	.+82     	; 0x8578 <User_Authentication_SignUp+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8526:	69 8d       	ldd	r22, Y+25	; 0x19
    8528:	7a 8d       	ldd	r23, Y+26	; 0x1a
    852a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    852c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    852e:	20 e0       	ldi	r18, 0x00	; 0
    8530:	30 e0       	ldi	r19, 0x00	; 0
    8532:	40 e2       	ldi	r20, 0x20	; 32
    8534:	51 e4       	ldi	r21, 0x41	; 65
    8536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    853a:	dc 01       	movw	r26, r24
    853c:	cb 01       	movw	r24, r22
    853e:	bc 01       	movw	r22, r24
    8540:	cd 01       	movw	r24, r26
    8542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8546:	dc 01       	movw	r26, r24
    8548:	cb 01       	movw	r24, r22
    854a:	9c 8b       	std	Y+20, r25	; 0x14
    854c:	8b 8b       	std	Y+19, r24	; 0x13
    854e:	0f c0       	rjmp	.+30     	; 0x856e <User_Authentication_SignUp+0x1da>
    8550:	80 e9       	ldi	r24, 0x90	; 144
    8552:	91 e0       	ldi	r25, 0x01	; 1
    8554:	9a 8b       	std	Y+18, r25	; 0x12
    8556:	89 8b       	std	Y+17, r24	; 0x11
    8558:	89 89       	ldd	r24, Y+17	; 0x11
    855a:	9a 89       	ldd	r25, Y+18	; 0x12
    855c:	01 97       	sbiw	r24, 0x01	; 1
    855e:	f1 f7       	brne	.-4      	; 0x855c <User_Authentication_SignUp+0x1c8>
    8560:	9a 8b       	std	Y+18, r25	; 0x12
    8562:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8564:	8b 89       	ldd	r24, Y+19	; 0x13
    8566:	9c 89       	ldd	r25, Y+20	; 0x14
    8568:	01 97       	sbiw	r24, 0x01	; 1
    856a:	9c 8b       	std	Y+20, r25	; 0x14
    856c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    856e:	8b 89       	ldd	r24, Y+19	; 0x13
    8570:	9c 89       	ldd	r25, Y+20	; 0x14
    8572:	00 97       	sbiw	r24, 0x00	; 0
    8574:	69 f7       	brne	.-38     	; 0x8550 <User_Authentication_SignUp+0x1bc>
    8576:	14 c0       	rjmp	.+40     	; 0x85a0 <User_Authentication_SignUp+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8578:	6d 89       	ldd	r22, Y+21	; 0x15
    857a:	7e 89       	ldd	r23, Y+22	; 0x16
    857c:	8f 89       	ldd	r24, Y+23	; 0x17
    857e:	98 8d       	ldd	r25, Y+24	; 0x18
    8580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8584:	dc 01       	movw	r26, r24
    8586:	cb 01       	movw	r24, r22
    8588:	9c 8b       	std	Y+20, r25	; 0x14
    858a:	8b 8b       	std	Y+19, r24	; 0x13
    858c:	8b 89       	ldd	r24, Y+19	; 0x13
    858e:	9c 89       	ldd	r25, Y+20	; 0x14
    8590:	98 8b       	std	Y+16, r25	; 0x10
    8592:	8f 87       	std	Y+15, r24	; 0x0f
    8594:	8f 85       	ldd	r24, Y+15	; 0x0f
    8596:	98 89       	ldd	r25, Y+16	; 0x10
    8598:	01 97       	sbiw	r24, 0x01	; 1
    859a:	f1 f7       	brne	.-4      	; 0x8598 <User_Authentication_SignUp+0x204>
    859c:	98 8b       	std	Y+16, r25	; 0x10
    859e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);

	/*Scan finger print  */
	Finger_Print_Enroll(User_ID);
    85a0:	88 a9       	ldd	r24, Y+48	; 0x30
    85a2:	88 2f       	mov	r24, r24
    85a4:	90 e0       	ldi	r25, 0x00	; 0
    85a6:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <Finger_Print_Enroll>

	H_LCD_void_ClearDisplay();
    85aa:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
	H_LCD_void_sendString("Enter Personal Pass: ");
    85ae:	88 e0       	ldi	r24, 0x08	; 8
    85b0:	93 e0       	ldi	r25, 0x03	; 3
    85b2:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>

	/*Enter Password */
	H_LCD_void_gotoXY(2, 0);
    85b6:	82 e0       	ldi	r24, 0x02	; 2
    85b8:	60 e0       	ldi	r22, 0x00	; 0
    85ba:	0e 94 93 2b 	call	0x5726	; 0x5726 <H_LCD_void_gotoXY>
	KeyPad_EnterPassWord(Local_PassWordArr);
    85be:	ce 01       	movw	r24, r28
    85c0:	8c 96       	adiw	r24, 0x2c	; 44
    85c2:	0e 94 78 43 	call	0x86f0	; 0x86f0 <KeyPad_EnterPassWord>
	H_LCD_void_ClearDisplay();
    85c6:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>

	/*Save to EEPROM*/
	Save_NewPassword(Local_PassWordArr,User_ID);
    85ca:	28 a9       	ldd	r18, Y+48	; 0x30
    85cc:	ce 01       	movw	r24, r28
    85ce:	8c 96       	adiw	r24, 0x2c	; 44
    85d0:	62 2f       	mov	r22, r18
    85d2:	0e 94 aa 43 	call	0x8754	; 0x8754 <Save_NewPassword>

	/*Saving data animation*/
	H_LCD_void_sendString("Saving data");
    85d6:	8e e1       	ldi	r24, 0x1E	; 30
    85d8:	93 e0       	ldi	r25, 0x03	; 3
    85da:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    85de:	79 c0       	rjmp	.+242    	; 0x86d2 <User_Authentication_SignUp+0x33e>
	while(Local_Counter != 4)
	{
		H_LCD_void_sendString(".");
    85e0:	8a e2       	ldi	r24, 0x2A	; 42
    85e2:	93 e0       	ldi	r25, 0x03	; 3
    85e4:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    85e8:	80 e0       	ldi	r24, 0x00	; 0
    85ea:	90 e0       	ldi	r25, 0x00	; 0
    85ec:	aa ef       	ldi	r26, 0xFA	; 250
    85ee:	b3 e4       	ldi	r27, 0x43	; 67
    85f0:	8b 87       	std	Y+11, r24	; 0x0b
    85f2:	9c 87       	std	Y+12, r25	; 0x0c
    85f4:	ad 87       	std	Y+13, r26	; 0x0d
    85f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    85f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    85fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    85fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    85fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    8600:	20 e0       	ldi	r18, 0x00	; 0
    8602:	30 e0       	ldi	r19, 0x00	; 0
    8604:	4a e7       	ldi	r20, 0x7A	; 122
    8606:	55 e4       	ldi	r21, 0x45	; 69
    8608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    860c:	dc 01       	movw	r26, r24
    860e:	cb 01       	movw	r24, r22
    8610:	8f 83       	std	Y+7, r24	; 0x07
    8612:	98 87       	std	Y+8, r25	; 0x08
    8614:	a9 87       	std	Y+9, r26	; 0x09
    8616:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    8618:	6f 81       	ldd	r22, Y+7	; 0x07
    861a:	78 85       	ldd	r23, Y+8	; 0x08
    861c:	89 85       	ldd	r24, Y+9	; 0x09
    861e:	9a 85       	ldd	r25, Y+10	; 0x0a
    8620:	20 e0       	ldi	r18, 0x00	; 0
    8622:	30 e0       	ldi	r19, 0x00	; 0
    8624:	40 e8       	ldi	r20, 0x80	; 128
    8626:	5f e3       	ldi	r21, 0x3F	; 63
    8628:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    862c:	88 23       	and	r24, r24
    862e:	2c f4       	brge	.+10     	; 0x863a <User_Authentication_SignUp+0x2a6>
		__ticks = 1;
    8630:	81 e0       	ldi	r24, 0x01	; 1
    8632:	90 e0       	ldi	r25, 0x00	; 0
    8634:	9e 83       	std	Y+6, r25	; 0x06
    8636:	8d 83       	std	Y+5, r24	; 0x05
    8638:	3f c0       	rjmp	.+126    	; 0x86b8 <User_Authentication_SignUp+0x324>
	else if (__tmp > 65535)
    863a:	6f 81       	ldd	r22, Y+7	; 0x07
    863c:	78 85       	ldd	r23, Y+8	; 0x08
    863e:	89 85       	ldd	r24, Y+9	; 0x09
    8640:	9a 85       	ldd	r25, Y+10	; 0x0a
    8642:	20 e0       	ldi	r18, 0x00	; 0
    8644:	3f ef       	ldi	r19, 0xFF	; 255
    8646:	4f e7       	ldi	r20, 0x7F	; 127
    8648:	57 e4       	ldi	r21, 0x47	; 71
    864a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    864e:	18 16       	cp	r1, r24
    8650:	4c f5       	brge	.+82     	; 0x86a4 <User_Authentication_SignUp+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8652:	6b 85       	ldd	r22, Y+11	; 0x0b
    8654:	7c 85       	ldd	r23, Y+12	; 0x0c
    8656:	8d 85       	ldd	r24, Y+13	; 0x0d
    8658:	9e 85       	ldd	r25, Y+14	; 0x0e
    865a:	20 e0       	ldi	r18, 0x00	; 0
    865c:	30 e0       	ldi	r19, 0x00	; 0
    865e:	40 e2       	ldi	r20, 0x20	; 32
    8660:	51 e4       	ldi	r21, 0x41	; 65
    8662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8666:	dc 01       	movw	r26, r24
    8668:	cb 01       	movw	r24, r22
    866a:	bc 01       	movw	r22, r24
    866c:	cd 01       	movw	r24, r26
    866e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8672:	dc 01       	movw	r26, r24
    8674:	cb 01       	movw	r24, r22
    8676:	9e 83       	std	Y+6, r25	; 0x06
    8678:	8d 83       	std	Y+5, r24	; 0x05
    867a:	0f c0       	rjmp	.+30     	; 0x869a <User_Authentication_SignUp+0x306>
    867c:	80 e9       	ldi	r24, 0x90	; 144
    867e:	91 e0       	ldi	r25, 0x01	; 1
    8680:	9c 83       	std	Y+4, r25	; 0x04
    8682:	8b 83       	std	Y+3, r24	; 0x03
    8684:	8b 81       	ldd	r24, Y+3	; 0x03
    8686:	9c 81       	ldd	r25, Y+4	; 0x04
    8688:	01 97       	sbiw	r24, 0x01	; 1
    868a:	f1 f7       	brne	.-4      	; 0x8688 <User_Authentication_SignUp+0x2f4>
    868c:	9c 83       	std	Y+4, r25	; 0x04
    868e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8690:	8d 81       	ldd	r24, Y+5	; 0x05
    8692:	9e 81       	ldd	r25, Y+6	; 0x06
    8694:	01 97       	sbiw	r24, 0x01	; 1
    8696:	9e 83       	std	Y+6, r25	; 0x06
    8698:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    869a:	8d 81       	ldd	r24, Y+5	; 0x05
    869c:	9e 81       	ldd	r25, Y+6	; 0x06
    869e:	00 97       	sbiw	r24, 0x00	; 0
    86a0:	69 f7       	brne	.-38     	; 0x867c <User_Authentication_SignUp+0x2e8>
    86a2:	14 c0       	rjmp	.+40     	; 0x86cc <User_Authentication_SignUp+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    86a4:	6f 81       	ldd	r22, Y+7	; 0x07
    86a6:	78 85       	ldd	r23, Y+8	; 0x08
    86a8:	89 85       	ldd	r24, Y+9	; 0x09
    86aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    86ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    86b0:	dc 01       	movw	r26, r24
    86b2:	cb 01       	movw	r24, r22
    86b4:	9e 83       	std	Y+6, r25	; 0x06
    86b6:	8d 83       	std	Y+5, r24	; 0x05
    86b8:	8d 81       	ldd	r24, Y+5	; 0x05
    86ba:	9e 81       	ldd	r25, Y+6	; 0x06
    86bc:	9a 83       	std	Y+2, r25	; 0x02
    86be:	89 83       	std	Y+1, r24	; 0x01
    86c0:	89 81       	ldd	r24, Y+1	; 0x01
    86c2:	9a 81       	ldd	r25, Y+2	; 0x02
    86c4:	01 97       	sbiw	r24, 0x01	; 1
    86c6:	f1 f7       	brne	.-4      	; 0x86c4 <User_Authentication_SignUp+0x330>
    86c8:	9a 83       	std	Y+2, r25	; 0x02
    86ca:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		Local_Counter ++ ;
    86cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    86ce:	8f 5f       	subi	r24, 0xFF	; 255
    86d0:	8b a7       	std	Y+43, r24	; 0x2b
	/*Save to EEPROM*/
	Save_NewPassword(Local_PassWordArr,User_ID);

	/*Saving data animation*/
	H_LCD_void_sendString("Saving data");
	while(Local_Counter != 4)
    86d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    86d4:	84 30       	cpi	r24, 0x04	; 4
    86d6:	09 f0       	breq	.+2      	; 0x86da <User_Authentication_SignUp+0x346>
    86d8:	83 cf       	rjmp	.-250    	; 0x85e0 <User_Authentication_SignUp+0x24c>
	{
		H_LCD_void_sendString(".");
		_delay_ms(500);
		Local_Counter ++ ;
	}
	H_LCD_void_ClearDisplay();
    86da:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
}
    86de:	e0 96       	adiw	r28, 0x30	; 48
    86e0:	0f b6       	in	r0, 0x3f	; 63
    86e2:	f8 94       	cli
    86e4:	de bf       	out	0x3e, r29	; 62
    86e6:	0f be       	out	0x3f, r0	; 63
    86e8:	cd bf       	out	0x3d, r28	; 61
    86ea:	cf 91       	pop	r28
    86ec:	df 91       	pop	r29
    86ee:	08 95       	ret

000086f0 <KeyPad_EnterPassWord>:

void KeyPad_EnterPassWord(u8 *Copy_PasswordArr)
{
    86f0:	df 93       	push	r29
    86f2:	cf 93       	push	r28
    86f4:	00 d0       	rcall	.+0      	; 0x86f6 <KeyPad_EnterPassWord+0x6>
    86f6:	00 d0       	rcall	.+0      	; 0x86f8 <KeyPad_EnterPassWord+0x8>
    86f8:	cd b7       	in	r28, 0x3d	; 61
    86fa:	de b7       	in	r29, 0x3e	; 62
    86fc:	9c 83       	std	Y+4, r25	; 0x04
    86fe:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_Counter = 0 ;
    8700:	1a 82       	std	Y+2, r1	; 0x02
	u8 KPD_Value = 0;
    8702:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Enter Password
	 */
	do{
		KPD_Value = H_KEYPAD_u8_getPressedKey() ;
    8704:	0e 94 9d 13 	call	0x273a	; 0x273a <H_KEYPAD_u8_getPressedKey>
    8708:	89 83       	std	Y+1, r24	; 0x01
		if( KPD_Value != '\0')
    870a:	89 81       	ldd	r24, Y+1	; 0x01
    870c:	88 23       	and	r24, r24
    870e:	c1 f0       	breq	.+48     	; 0x8740 <KeyPad_EnterPassWord+0x50>
		{
			Copy_PasswordArr[Local_Counter] = KPD_Value;
    8710:	8a 81       	ldd	r24, Y+2	; 0x02
    8712:	28 2f       	mov	r18, r24
    8714:	30 e0       	ldi	r19, 0x00	; 0
    8716:	8b 81       	ldd	r24, Y+3	; 0x03
    8718:	9c 81       	ldd	r25, Y+4	; 0x04
    871a:	fc 01       	movw	r30, r24
    871c:	e2 0f       	add	r30, r18
    871e:	f3 1f       	adc	r31, r19
    8720:	89 81       	ldd	r24, Y+1	; 0x01
    8722:	80 83       	st	Z, r24
			H_LCD_void_sendData(Copy_PasswordArr[Local_Counter]);
    8724:	8a 81       	ldd	r24, Y+2	; 0x02
    8726:	28 2f       	mov	r18, r24
    8728:	30 e0       	ldi	r19, 0x00	; 0
    872a:	8b 81       	ldd	r24, Y+3	; 0x03
    872c:	9c 81       	ldd	r25, Y+4	; 0x04
    872e:	fc 01       	movw	r30, r24
    8730:	e2 0f       	add	r30, r18
    8732:	f3 1f       	adc	r31, r19
    8734:	80 81       	ld	r24, Z
    8736:	0e 94 ac 2a 	call	0x5558	; 0x5558 <H_LCD_void_sendData>
			Local_Counter ++ ;
    873a:	8a 81       	ldd	r24, Y+2	; 0x02
    873c:	8f 5f       	subi	r24, 0xFF	; 255
    873e:	8a 83       	std	Y+2, r24	; 0x02
		}

	}while(Local_Counter != 4);
    8740:	8a 81       	ldd	r24, Y+2	; 0x02
    8742:	84 30       	cpi	r24, 0x04	; 4
    8744:	f9 f6       	brne	.-66     	; 0x8704 <KeyPad_EnterPassWord+0x14>
}
    8746:	0f 90       	pop	r0
    8748:	0f 90       	pop	r0
    874a:	0f 90       	pop	r0
    874c:	0f 90       	pop	r0
    874e:	cf 91       	pop	r28
    8750:	df 91       	pop	r29
    8752:	08 95       	ret

00008754 <Save_NewPassword>:

void Save_NewPassword(u8 *Copy_NewPassword, u8 Copy_ID)
{
    8754:	df 93       	push	r29
    8756:	cf 93       	push	r28
    8758:	cd b7       	in	r28, 0x3d	; 61
    875a:	de b7       	in	r29, 0x3e	; 62
    875c:	e1 97       	sbiw	r28, 0x31	; 49
    875e:	0f b6       	in	r0, 0x3f	; 63
    8760:	f8 94       	cli
    8762:	de bf       	out	0x3e, r29	; 62
    8764:	0f be       	out	0x3f, r0	; 63
    8766:	cd bf       	out	0x3d, r28	; 61
    8768:	9e a7       	std	Y+46, r25	; 0x2e
    876a:	8d a7       	std	Y+45, r24	; 0x2d
    876c:	6f a7       	std	Y+47, r22	; 0x2f
	u8 AddressCounter = 0 ;
    876e:	1c a6       	std	Y+44, r1	; 0x2c
	u8 LocalCounter = 0;
    8770:	1b a6       	std	Y+43, r1	; 0x2b

		/*Check ID number */
	switch(Copy_ID)
    8772:	8f a5       	ldd	r24, Y+47	; 0x2f
    8774:	28 2f       	mov	r18, r24
    8776:	30 e0       	ldi	r19, 0x00	; 0
    8778:	39 ab       	std	Y+49, r19	; 0x31
    877a:	28 ab       	std	Y+48, r18	; 0x30
    877c:	88 a9       	ldd	r24, Y+48	; 0x30
    877e:	99 a9       	ldd	r25, Y+49	; 0x31
    8780:	81 30       	cpi	r24, 0x01	; 1
    8782:	91 05       	cpc	r25, r1
    8784:	31 f0       	breq	.+12     	; 0x8792 <Save_NewPassword+0x3e>
    8786:	28 a9       	ldd	r18, Y+48	; 0x30
    8788:	39 a9       	ldd	r19, Y+49	; 0x31
    878a:	22 30       	cpi	r18, 0x02	; 2
    878c:	31 05       	cpc	r19, r1
    878e:	39 f0       	breq	.+14     	; 0x879e <Save_NewPassword+0x4a>
    8790:	0c c0       	rjmp	.+24     	; 0x87aa <Save_NewPassword+0x56>
	{
		case 1:
			AddressCounter = 0 ;
    8792:	1c a6       	std	Y+44, r1	; 0x2c
			H_LCD_void_sendString("ID_1");
    8794:	8c ee       	ldi	r24, 0xEC	; 236
    8796:	92 e0       	ldi	r25, 0x02	; 2
    8798:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    879c:	06 c0       	rjmp	.+12     	; 0x87aa <Save_NewPassword+0x56>
			break ;
		case 2:
			AddressCounter = 4 ;
    879e:	84 e0       	ldi	r24, 0x04	; 4
    87a0:	8c a7       	std	Y+44, r24	; 0x2c
			H_LCD_void_sendString("ID_2");
    87a2:	81 ef       	ldi	r24, 0xF1	; 241
    87a4:	92 e0       	ldi	r25, 0x02	; 2
    87a6:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
		break ;
	}

	if(Copy_ID <= 2)
    87aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    87ac:	83 30       	cpi	r24, 0x03	; 3
    87ae:	08 f0       	brcs	.+2      	; 0x87b2 <Save_NewPassword+0x5e>
    87b0:	09 c1       	rjmp	.+530    	; 0x89c4 <Save_NewPassword+0x270>
		{
		/*Enter the array to the eeprom */
		for(LocalCounter = 0 ; LocalCounter < 4 ; LocalCounter ++)
    87b2:	1b a6       	std	Y+43, r1	; 0x2b
    87b4:	88 c0       	rjmp	.+272    	; 0x88c6 <Save_NewPassword+0x172>
    87b6:	80 e0       	ldi	r24, 0x00	; 0
    87b8:	90 e0       	ldi	r25, 0x00	; 0
    87ba:	a8 ec       	ldi	r26, 0xC8	; 200
    87bc:	b2 e4       	ldi	r27, 0x42	; 66
    87be:	8f a3       	std	Y+39, r24	; 0x27
    87c0:	98 a7       	std	Y+40, r25	; 0x28
    87c2:	a9 a7       	std	Y+41, r26	; 0x29
    87c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    87c6:	6f a1       	ldd	r22, Y+39	; 0x27
    87c8:	78 a5       	ldd	r23, Y+40	; 0x28
    87ca:	89 a5       	ldd	r24, Y+41	; 0x29
    87cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    87ce:	20 e0       	ldi	r18, 0x00	; 0
    87d0:	30 e0       	ldi	r19, 0x00	; 0
    87d2:	4a e7       	ldi	r20, 0x7A	; 122
    87d4:	55 e4       	ldi	r21, 0x45	; 69
    87d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    87da:	dc 01       	movw	r26, r24
    87dc:	cb 01       	movw	r24, r22
    87de:	8b a3       	std	Y+35, r24	; 0x23
    87e0:	9c a3       	std	Y+36, r25	; 0x24
    87e2:	ad a3       	std	Y+37, r26	; 0x25
    87e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    87e6:	6b a1       	ldd	r22, Y+35	; 0x23
    87e8:	7c a1       	ldd	r23, Y+36	; 0x24
    87ea:	8d a1       	ldd	r24, Y+37	; 0x25
    87ec:	9e a1       	ldd	r25, Y+38	; 0x26
    87ee:	20 e0       	ldi	r18, 0x00	; 0
    87f0:	30 e0       	ldi	r19, 0x00	; 0
    87f2:	40 e8       	ldi	r20, 0x80	; 128
    87f4:	5f e3       	ldi	r21, 0x3F	; 63
    87f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    87fa:	88 23       	and	r24, r24
    87fc:	2c f4       	brge	.+10     	; 0x8808 <Save_NewPassword+0xb4>
		__ticks = 1;
    87fe:	81 e0       	ldi	r24, 0x01	; 1
    8800:	90 e0       	ldi	r25, 0x00	; 0
    8802:	9a a3       	std	Y+34, r25	; 0x22
    8804:	89 a3       	std	Y+33, r24	; 0x21
    8806:	3f c0       	rjmp	.+126    	; 0x8886 <Save_NewPassword+0x132>
	else if (__tmp > 65535)
    8808:	6b a1       	ldd	r22, Y+35	; 0x23
    880a:	7c a1       	ldd	r23, Y+36	; 0x24
    880c:	8d a1       	ldd	r24, Y+37	; 0x25
    880e:	9e a1       	ldd	r25, Y+38	; 0x26
    8810:	20 e0       	ldi	r18, 0x00	; 0
    8812:	3f ef       	ldi	r19, 0xFF	; 255
    8814:	4f e7       	ldi	r20, 0x7F	; 127
    8816:	57 e4       	ldi	r21, 0x47	; 71
    8818:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    881c:	18 16       	cp	r1, r24
    881e:	4c f5       	brge	.+82     	; 0x8872 <Save_NewPassword+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8820:	6f a1       	ldd	r22, Y+39	; 0x27
    8822:	78 a5       	ldd	r23, Y+40	; 0x28
    8824:	89 a5       	ldd	r24, Y+41	; 0x29
    8826:	9a a5       	ldd	r25, Y+42	; 0x2a
    8828:	20 e0       	ldi	r18, 0x00	; 0
    882a:	30 e0       	ldi	r19, 0x00	; 0
    882c:	40 e2       	ldi	r20, 0x20	; 32
    882e:	51 e4       	ldi	r21, 0x41	; 65
    8830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8834:	dc 01       	movw	r26, r24
    8836:	cb 01       	movw	r24, r22
    8838:	bc 01       	movw	r22, r24
    883a:	cd 01       	movw	r24, r26
    883c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8840:	dc 01       	movw	r26, r24
    8842:	cb 01       	movw	r24, r22
    8844:	9a a3       	std	Y+34, r25	; 0x22
    8846:	89 a3       	std	Y+33, r24	; 0x21
    8848:	0f c0       	rjmp	.+30     	; 0x8868 <Save_NewPassword+0x114>
    884a:	80 e9       	ldi	r24, 0x90	; 144
    884c:	91 e0       	ldi	r25, 0x01	; 1
    884e:	98 a3       	std	Y+32, r25	; 0x20
    8850:	8f 8f       	std	Y+31, r24	; 0x1f
    8852:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8854:	98 a1       	ldd	r25, Y+32	; 0x20
    8856:	01 97       	sbiw	r24, 0x01	; 1
    8858:	f1 f7       	brne	.-4      	; 0x8856 <Save_NewPassword+0x102>
    885a:	98 a3       	std	Y+32, r25	; 0x20
    885c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    885e:	89 a1       	ldd	r24, Y+33	; 0x21
    8860:	9a a1       	ldd	r25, Y+34	; 0x22
    8862:	01 97       	sbiw	r24, 0x01	; 1
    8864:	9a a3       	std	Y+34, r25	; 0x22
    8866:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8868:	89 a1       	ldd	r24, Y+33	; 0x21
    886a:	9a a1       	ldd	r25, Y+34	; 0x22
    886c:	00 97       	sbiw	r24, 0x00	; 0
    886e:	69 f7       	brne	.-38     	; 0x884a <Save_NewPassword+0xf6>
    8870:	14 c0       	rjmp	.+40     	; 0x889a <Save_NewPassword+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8872:	6b a1       	ldd	r22, Y+35	; 0x23
    8874:	7c a1       	ldd	r23, Y+36	; 0x24
    8876:	8d a1       	ldd	r24, Y+37	; 0x25
    8878:	9e a1       	ldd	r25, Y+38	; 0x26
    887a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    887e:	dc 01       	movw	r26, r24
    8880:	cb 01       	movw	r24, r22
    8882:	9a a3       	std	Y+34, r25	; 0x22
    8884:	89 a3       	std	Y+33, r24	; 0x21
    8886:	89 a1       	ldd	r24, Y+33	; 0x21
    8888:	9a a1       	ldd	r25, Y+34	; 0x22
    888a:	9e 8f       	std	Y+30, r25	; 0x1e
    888c:	8d 8f       	std	Y+29, r24	; 0x1d
    888e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8890:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8892:	01 97       	sbiw	r24, 0x01	; 1
    8894:	f1 f7       	brne	.-4      	; 0x8892 <Save_NewPassword+0x13e>
    8896:	9e 8f       	std	Y+30, r25	; 0x1e
    8898:	8d 8f       	std	Y+29, r24	; 0x1d
		{
		_delay_ms(100);
		H_EEPROM_Void_WriteByte(AddressCounter, Copy_NewPassword[LocalCounter]);
    889a:	8c a5       	ldd	r24, Y+44	; 0x2c
    889c:	48 2f       	mov	r20, r24
    889e:	50 e0       	ldi	r21, 0x00	; 0
    88a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    88a2:	28 2f       	mov	r18, r24
    88a4:	30 e0       	ldi	r19, 0x00	; 0
    88a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    88a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    88aa:	fc 01       	movw	r30, r24
    88ac:	e2 0f       	add	r30, r18
    88ae:	f3 1f       	adc	r31, r19
    88b0:	20 81       	ld	r18, Z
    88b2:	ca 01       	movw	r24, r20
    88b4:	62 2f       	mov	r22, r18
    88b6:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <H_EEPROM_Void_WriteByte>
		AddressCounter ++ ;
    88ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    88bc:	8f 5f       	subi	r24, 0xFF	; 255
    88be:	8c a7       	std	Y+44, r24	; 0x2c
	}

	if(Copy_ID <= 2)
		{
		/*Enter the array to the eeprom */
		for(LocalCounter = 0 ; LocalCounter < 4 ; LocalCounter ++)
    88c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    88c2:	8f 5f       	subi	r24, 0xFF	; 255
    88c4:	8b a7       	std	Y+43, r24	; 0x2b
    88c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    88c8:	84 30       	cpi	r24, 0x04	; 4
    88ca:	08 f4       	brcc	.+2      	; 0x88ce <Save_NewPassword+0x17a>
    88cc:	74 cf       	rjmp	.-280    	; 0x87b6 <Save_NewPassword+0x62>
		H_EEPROM_Void_WriteByte(AddressCounter, Copy_NewPassword[LocalCounter]);
		AddressCounter ++ ;
		}

		/*Increment the User ID */
		Copy_ID += 1 ;
    88ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    88d0:	8f 5f       	subi	r24, 0xFF	; 255
    88d2:	8f a7       	std	Y+47, r24	; 0x2f
    88d4:	80 e0       	ldi	r24, 0x00	; 0
    88d6:	90 e0       	ldi	r25, 0x00	; 0
    88d8:	a8 e4       	ldi	r26, 0x48	; 72
    88da:	b3 e4       	ldi	r27, 0x43	; 67
    88dc:	89 8f       	std	Y+25, r24	; 0x19
    88de:	9a 8f       	std	Y+26, r25	; 0x1a
    88e0:	ab 8f       	std	Y+27, r26	; 0x1b
    88e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    88e4:	69 8d       	ldd	r22, Y+25	; 0x19
    88e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    88e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    88ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    88ec:	20 e0       	ldi	r18, 0x00	; 0
    88ee:	30 e0       	ldi	r19, 0x00	; 0
    88f0:	4a e7       	ldi	r20, 0x7A	; 122
    88f2:	55 e4       	ldi	r21, 0x45	; 69
    88f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    88f8:	dc 01       	movw	r26, r24
    88fa:	cb 01       	movw	r24, r22
    88fc:	8d 8b       	std	Y+21, r24	; 0x15
    88fe:	9e 8b       	std	Y+22, r25	; 0x16
    8900:	af 8b       	std	Y+23, r26	; 0x17
    8902:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    8904:	6d 89       	ldd	r22, Y+21	; 0x15
    8906:	7e 89       	ldd	r23, Y+22	; 0x16
    8908:	8f 89       	ldd	r24, Y+23	; 0x17
    890a:	98 8d       	ldd	r25, Y+24	; 0x18
    890c:	20 e0       	ldi	r18, 0x00	; 0
    890e:	30 e0       	ldi	r19, 0x00	; 0
    8910:	40 e8       	ldi	r20, 0x80	; 128
    8912:	5f e3       	ldi	r21, 0x3F	; 63
    8914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8918:	88 23       	and	r24, r24
    891a:	2c f4       	brge	.+10     	; 0x8926 <Save_NewPassword+0x1d2>
		__ticks = 1;
    891c:	81 e0       	ldi	r24, 0x01	; 1
    891e:	90 e0       	ldi	r25, 0x00	; 0
    8920:	9c 8b       	std	Y+20, r25	; 0x14
    8922:	8b 8b       	std	Y+19, r24	; 0x13
    8924:	3f c0       	rjmp	.+126    	; 0x89a4 <Save_NewPassword+0x250>
	else if (__tmp > 65535)
    8926:	6d 89       	ldd	r22, Y+21	; 0x15
    8928:	7e 89       	ldd	r23, Y+22	; 0x16
    892a:	8f 89       	ldd	r24, Y+23	; 0x17
    892c:	98 8d       	ldd	r25, Y+24	; 0x18
    892e:	20 e0       	ldi	r18, 0x00	; 0
    8930:	3f ef       	ldi	r19, 0xFF	; 255
    8932:	4f e7       	ldi	r20, 0x7F	; 127
    8934:	57 e4       	ldi	r21, 0x47	; 71
    8936:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    893a:	18 16       	cp	r1, r24
    893c:	4c f5       	brge	.+82     	; 0x8990 <Save_NewPassword+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    893e:	69 8d       	ldd	r22, Y+25	; 0x19
    8940:	7a 8d       	ldd	r23, Y+26	; 0x1a
    8942:	8b 8d       	ldd	r24, Y+27	; 0x1b
    8944:	9c 8d       	ldd	r25, Y+28	; 0x1c
    8946:	20 e0       	ldi	r18, 0x00	; 0
    8948:	30 e0       	ldi	r19, 0x00	; 0
    894a:	40 e2       	ldi	r20, 0x20	; 32
    894c:	51 e4       	ldi	r21, 0x41	; 65
    894e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8952:	dc 01       	movw	r26, r24
    8954:	cb 01       	movw	r24, r22
    8956:	bc 01       	movw	r22, r24
    8958:	cd 01       	movw	r24, r26
    895a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    895e:	dc 01       	movw	r26, r24
    8960:	cb 01       	movw	r24, r22
    8962:	9c 8b       	std	Y+20, r25	; 0x14
    8964:	8b 8b       	std	Y+19, r24	; 0x13
    8966:	0f c0       	rjmp	.+30     	; 0x8986 <Save_NewPassword+0x232>
    8968:	80 e9       	ldi	r24, 0x90	; 144
    896a:	91 e0       	ldi	r25, 0x01	; 1
    896c:	9a 8b       	std	Y+18, r25	; 0x12
    896e:	89 8b       	std	Y+17, r24	; 0x11
    8970:	89 89       	ldd	r24, Y+17	; 0x11
    8972:	9a 89       	ldd	r25, Y+18	; 0x12
    8974:	01 97       	sbiw	r24, 0x01	; 1
    8976:	f1 f7       	brne	.-4      	; 0x8974 <Save_NewPassword+0x220>
    8978:	9a 8b       	std	Y+18, r25	; 0x12
    897a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    897c:	8b 89       	ldd	r24, Y+19	; 0x13
    897e:	9c 89       	ldd	r25, Y+20	; 0x14
    8980:	01 97       	sbiw	r24, 0x01	; 1
    8982:	9c 8b       	std	Y+20, r25	; 0x14
    8984:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8986:	8b 89       	ldd	r24, Y+19	; 0x13
    8988:	9c 89       	ldd	r25, Y+20	; 0x14
    898a:	00 97       	sbiw	r24, 0x00	; 0
    898c:	69 f7       	brne	.-38     	; 0x8968 <Save_NewPassword+0x214>
    898e:	14 c0       	rjmp	.+40     	; 0x89b8 <Save_NewPassword+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8990:	6d 89       	ldd	r22, Y+21	; 0x15
    8992:	7e 89       	ldd	r23, Y+22	; 0x16
    8994:	8f 89       	ldd	r24, Y+23	; 0x17
    8996:	98 8d       	ldd	r25, Y+24	; 0x18
    8998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    899c:	dc 01       	movw	r26, r24
    899e:	cb 01       	movw	r24, r22
    89a0:	9c 8b       	std	Y+20, r25	; 0x14
    89a2:	8b 8b       	std	Y+19, r24	; 0x13
    89a4:	8b 89       	ldd	r24, Y+19	; 0x13
    89a6:	9c 89       	ldd	r25, Y+20	; 0x14
    89a8:	98 8b       	std	Y+16, r25	; 0x10
    89aa:	8f 87       	std	Y+15, r24	; 0x0f
    89ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    89ae:	98 89       	ldd	r25, Y+16	; 0x10
    89b0:	01 97       	sbiw	r24, 0x01	; 1
    89b2:	f1 f7       	brne	.-4      	; 0x89b0 <Save_NewPassword+0x25c>
    89b4:	98 8b       	std	Y+16, r25	; 0x10
    89b6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		H_EEPROM_Void_WriteByte(EEPROM_USER_ID,Copy_ID );
    89b8:	8f ef       	ldi	r24, 0xFF	; 255
    89ba:	90 e0       	ldi	r25, 0x00	; 0
    89bc:	6f a5       	ldd	r22, Y+47	; 0x2f
    89be:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <H_EEPROM_Void_WriteByte>
    89c2:	78 c0       	rjmp	.+240    	; 0x8ab4 <Save_NewPassword+0x360>
		}
	else
		{
		H_LCD_void_sendString("Exceeded Max Number");
    89c4:	8c e2       	ldi	r24, 0x2C	; 44
    89c6:	93 e0       	ldi	r25, 0x03	; 3
    89c8:	0e 94 ce 2a 	call	0x559c	; 0x559c <H_LCD_void_sendString>
    89cc:	80 e0       	ldi	r24, 0x00	; 0
    89ce:	90 e0       	ldi	r25, 0x00	; 0
    89d0:	aa ef       	ldi	r26, 0xFA	; 250
    89d2:	b4 e4       	ldi	r27, 0x44	; 68
    89d4:	8b 87       	std	Y+11, r24	; 0x0b
    89d6:	9c 87       	std	Y+12, r25	; 0x0c
    89d8:	ad 87       	std	Y+13, r26	; 0x0d
    89da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    89dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    89de:	7c 85       	ldd	r23, Y+12	; 0x0c
    89e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    89e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    89e4:	20 e0       	ldi	r18, 0x00	; 0
    89e6:	30 e0       	ldi	r19, 0x00	; 0
    89e8:	4a e7       	ldi	r20, 0x7A	; 122
    89ea:	55 e4       	ldi	r21, 0x45	; 69
    89ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    89f0:	dc 01       	movw	r26, r24
    89f2:	cb 01       	movw	r24, r22
    89f4:	8f 83       	std	Y+7, r24	; 0x07
    89f6:	98 87       	std	Y+8, r25	; 0x08
    89f8:	a9 87       	std	Y+9, r26	; 0x09
    89fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    89fc:	6f 81       	ldd	r22, Y+7	; 0x07
    89fe:	78 85       	ldd	r23, Y+8	; 0x08
    8a00:	89 85       	ldd	r24, Y+9	; 0x09
    8a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    8a04:	20 e0       	ldi	r18, 0x00	; 0
    8a06:	30 e0       	ldi	r19, 0x00	; 0
    8a08:	40 e8       	ldi	r20, 0x80	; 128
    8a0a:	5f e3       	ldi	r21, 0x3F	; 63
    8a0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    8a10:	88 23       	and	r24, r24
    8a12:	2c f4       	brge	.+10     	; 0x8a1e <Save_NewPassword+0x2ca>
		__ticks = 1;
    8a14:	81 e0       	ldi	r24, 0x01	; 1
    8a16:	90 e0       	ldi	r25, 0x00	; 0
    8a18:	9e 83       	std	Y+6, r25	; 0x06
    8a1a:	8d 83       	std	Y+5, r24	; 0x05
    8a1c:	3f c0       	rjmp	.+126    	; 0x8a9c <Save_NewPassword+0x348>
	else if (__tmp > 65535)
    8a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    8a20:	78 85       	ldd	r23, Y+8	; 0x08
    8a22:	89 85       	ldd	r24, Y+9	; 0x09
    8a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    8a26:	20 e0       	ldi	r18, 0x00	; 0
    8a28:	3f ef       	ldi	r19, 0xFF	; 255
    8a2a:	4f e7       	ldi	r20, 0x7F	; 127
    8a2c:	57 e4       	ldi	r21, 0x47	; 71
    8a2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    8a32:	18 16       	cp	r1, r24
    8a34:	4c f5       	brge	.+82     	; 0x8a88 <Save_NewPassword+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    8a36:	6b 85       	ldd	r22, Y+11	; 0x0b
    8a38:	7c 85       	ldd	r23, Y+12	; 0x0c
    8a3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    8a3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    8a3e:	20 e0       	ldi	r18, 0x00	; 0
    8a40:	30 e0       	ldi	r19, 0x00	; 0
    8a42:	40 e2       	ldi	r20, 0x20	; 32
    8a44:	51 e4       	ldi	r21, 0x41	; 65
    8a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    8a4a:	dc 01       	movw	r26, r24
    8a4c:	cb 01       	movw	r24, r22
    8a4e:	bc 01       	movw	r22, r24
    8a50:	cd 01       	movw	r24, r26
    8a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8a56:	dc 01       	movw	r26, r24
    8a58:	cb 01       	movw	r24, r22
    8a5a:	9e 83       	std	Y+6, r25	; 0x06
    8a5c:	8d 83       	std	Y+5, r24	; 0x05
    8a5e:	0f c0       	rjmp	.+30     	; 0x8a7e <Save_NewPassword+0x32a>
    8a60:	80 e9       	ldi	r24, 0x90	; 144
    8a62:	91 e0       	ldi	r25, 0x01	; 1
    8a64:	9c 83       	std	Y+4, r25	; 0x04
    8a66:	8b 83       	std	Y+3, r24	; 0x03
    8a68:	8b 81       	ldd	r24, Y+3	; 0x03
    8a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    8a6c:	01 97       	sbiw	r24, 0x01	; 1
    8a6e:	f1 f7       	brne	.-4      	; 0x8a6c <Save_NewPassword+0x318>
    8a70:	9c 83       	std	Y+4, r25	; 0x04
    8a72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    8a74:	8d 81       	ldd	r24, Y+5	; 0x05
    8a76:	9e 81       	ldd	r25, Y+6	; 0x06
    8a78:	01 97       	sbiw	r24, 0x01	; 1
    8a7a:	9e 83       	std	Y+6, r25	; 0x06
    8a7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    8a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    8a80:	9e 81       	ldd	r25, Y+6	; 0x06
    8a82:	00 97       	sbiw	r24, 0x00	; 0
    8a84:	69 f7       	brne	.-38     	; 0x8a60 <Save_NewPassword+0x30c>
    8a86:	14 c0       	rjmp	.+40     	; 0x8ab0 <Save_NewPassword+0x35c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    8a88:	6f 81       	ldd	r22, Y+7	; 0x07
    8a8a:	78 85       	ldd	r23, Y+8	; 0x08
    8a8c:	89 85       	ldd	r24, Y+9	; 0x09
    8a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    8a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    8a94:	dc 01       	movw	r26, r24
    8a96:	cb 01       	movw	r24, r22
    8a98:	9e 83       	std	Y+6, r25	; 0x06
    8a9a:	8d 83       	std	Y+5, r24	; 0x05
    8a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    8a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    8aa0:	9a 83       	std	Y+2, r25	; 0x02
    8aa2:	89 83       	std	Y+1, r24	; 0x01
    8aa4:	89 81       	ldd	r24, Y+1	; 0x01
    8aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    8aa8:	01 97       	sbiw	r24, 0x01	; 1
    8aaa:	f1 f7       	brne	.-4      	; 0x8aa8 <Save_NewPassword+0x354>
    8aac:	9a 83       	std	Y+2, r25	; 0x02
    8aae:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		H_LCD_void_ClearDisplay();
    8ab0:	0e 94 08 2c 	call	0x5810	; 0x5810 <H_LCD_void_ClearDisplay>
		}

}
    8ab4:	e1 96       	adiw	r28, 0x31	; 49
    8ab6:	0f b6       	in	r0, 0x3f	; 63
    8ab8:	f8 94       	cli
    8aba:	de bf       	out	0x3e, r29	; 62
    8abc:	0f be       	out	0x3f, r0	; 63
    8abe:	cd bf       	out	0x3d, r28	; 61
    8ac0:	cf 91       	pop	r28
    8ac2:	df 91       	pop	r29
    8ac4:	08 95       	ret

00008ac6 <main>:
//#include "RTC_cfg.h"
#include "APP_init.h"
//#include "EEPROM_init.h"

void main()
{
    8ac6:	df 93       	push	r29
    8ac8:	cf 93       	push	r28
    8aca:	cd b7       	in	r28, 0x3d	; 61
    8acc:	de b7       	in	r29, 0x3e	; 62
	APP_INIT();
    8ace:	0e 94 28 2c 	call	0x5850	; 0x5850 <APP_INIT>



	while(1)
	{
		APP_Start();
    8ad2:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <APP_Start>
    8ad6:	fd cf       	rjmp	.-6      	; 0x8ad2 <main+0xc>

00008ad8 <__mulsi3>:
    8ad8:	62 9f       	mul	r22, r18
    8ada:	d0 01       	movw	r26, r0
    8adc:	73 9f       	mul	r23, r19
    8ade:	f0 01       	movw	r30, r0
    8ae0:	82 9f       	mul	r24, r18
    8ae2:	e0 0d       	add	r30, r0
    8ae4:	f1 1d       	adc	r31, r1
    8ae6:	64 9f       	mul	r22, r20
    8ae8:	e0 0d       	add	r30, r0
    8aea:	f1 1d       	adc	r31, r1
    8aec:	92 9f       	mul	r25, r18
    8aee:	f0 0d       	add	r31, r0
    8af0:	83 9f       	mul	r24, r19
    8af2:	f0 0d       	add	r31, r0
    8af4:	74 9f       	mul	r23, r20
    8af6:	f0 0d       	add	r31, r0
    8af8:	65 9f       	mul	r22, r21
    8afa:	f0 0d       	add	r31, r0
    8afc:	99 27       	eor	r25, r25
    8afe:	72 9f       	mul	r23, r18
    8b00:	b0 0d       	add	r27, r0
    8b02:	e1 1d       	adc	r30, r1
    8b04:	f9 1f       	adc	r31, r25
    8b06:	63 9f       	mul	r22, r19
    8b08:	b0 0d       	add	r27, r0
    8b0a:	e1 1d       	adc	r30, r1
    8b0c:	f9 1f       	adc	r31, r25
    8b0e:	bd 01       	movw	r22, r26
    8b10:	cf 01       	movw	r24, r30
    8b12:	11 24       	eor	r1, r1
    8b14:	08 95       	ret

00008b16 <__udivmodqi4>:
    8b16:	99 1b       	sub	r25, r25
    8b18:	79 e0       	ldi	r23, 0x09	; 9
    8b1a:	04 c0       	rjmp	.+8      	; 0x8b24 <__udivmodqi4_ep>

00008b1c <__udivmodqi4_loop>:
    8b1c:	99 1f       	adc	r25, r25
    8b1e:	96 17       	cp	r25, r22
    8b20:	08 f0       	brcs	.+2      	; 0x8b24 <__udivmodqi4_ep>
    8b22:	96 1b       	sub	r25, r22

00008b24 <__udivmodqi4_ep>:
    8b24:	88 1f       	adc	r24, r24
    8b26:	7a 95       	dec	r23
    8b28:	c9 f7       	brne	.-14     	; 0x8b1c <__udivmodqi4_loop>
    8b2a:	80 95       	com	r24
    8b2c:	08 95       	ret

00008b2e <__udivmodsi4>:
    8b2e:	a1 e2       	ldi	r26, 0x21	; 33
    8b30:	1a 2e       	mov	r1, r26
    8b32:	aa 1b       	sub	r26, r26
    8b34:	bb 1b       	sub	r27, r27
    8b36:	fd 01       	movw	r30, r26
    8b38:	0d c0       	rjmp	.+26     	; 0x8b54 <__udivmodsi4_ep>

00008b3a <__udivmodsi4_loop>:
    8b3a:	aa 1f       	adc	r26, r26
    8b3c:	bb 1f       	adc	r27, r27
    8b3e:	ee 1f       	adc	r30, r30
    8b40:	ff 1f       	adc	r31, r31
    8b42:	a2 17       	cp	r26, r18
    8b44:	b3 07       	cpc	r27, r19
    8b46:	e4 07       	cpc	r30, r20
    8b48:	f5 07       	cpc	r31, r21
    8b4a:	20 f0       	brcs	.+8      	; 0x8b54 <__udivmodsi4_ep>
    8b4c:	a2 1b       	sub	r26, r18
    8b4e:	b3 0b       	sbc	r27, r19
    8b50:	e4 0b       	sbc	r30, r20
    8b52:	f5 0b       	sbc	r31, r21

00008b54 <__udivmodsi4_ep>:
    8b54:	66 1f       	adc	r22, r22
    8b56:	77 1f       	adc	r23, r23
    8b58:	88 1f       	adc	r24, r24
    8b5a:	99 1f       	adc	r25, r25
    8b5c:	1a 94       	dec	r1
    8b5e:	69 f7       	brne	.-38     	; 0x8b3a <__udivmodsi4_loop>
    8b60:	60 95       	com	r22
    8b62:	70 95       	com	r23
    8b64:	80 95       	com	r24
    8b66:	90 95       	com	r25
    8b68:	9b 01       	movw	r18, r22
    8b6a:	ac 01       	movw	r20, r24
    8b6c:	bd 01       	movw	r22, r26
    8b6e:	cf 01       	movw	r24, r30
    8b70:	08 95       	ret

00008b72 <__divmodsi4>:
    8b72:	97 fb       	bst	r25, 7
    8b74:	09 2e       	mov	r0, r25
    8b76:	05 26       	eor	r0, r21
    8b78:	0e d0       	rcall	.+28     	; 0x8b96 <__divmodsi4_neg1>
    8b7a:	57 fd       	sbrc	r21, 7
    8b7c:	04 d0       	rcall	.+8      	; 0x8b86 <__divmodsi4_neg2>
    8b7e:	d7 df       	rcall	.-82     	; 0x8b2e <__udivmodsi4>
    8b80:	0a d0       	rcall	.+20     	; 0x8b96 <__divmodsi4_neg1>
    8b82:	00 1c       	adc	r0, r0
    8b84:	38 f4       	brcc	.+14     	; 0x8b94 <__divmodsi4_exit>

00008b86 <__divmodsi4_neg2>:
    8b86:	50 95       	com	r21
    8b88:	40 95       	com	r20
    8b8a:	30 95       	com	r19
    8b8c:	21 95       	neg	r18
    8b8e:	3f 4f       	sbci	r19, 0xFF	; 255
    8b90:	4f 4f       	sbci	r20, 0xFF	; 255
    8b92:	5f 4f       	sbci	r21, 0xFF	; 255

00008b94 <__divmodsi4_exit>:
    8b94:	08 95       	ret

00008b96 <__divmodsi4_neg1>:
    8b96:	f6 f7       	brtc	.-4      	; 0x8b94 <__divmodsi4_exit>
    8b98:	90 95       	com	r25
    8b9a:	80 95       	com	r24
    8b9c:	70 95       	com	r23
    8b9e:	61 95       	neg	r22
    8ba0:	7f 4f       	sbci	r23, 0xFF	; 255
    8ba2:	8f 4f       	sbci	r24, 0xFF	; 255
    8ba4:	9f 4f       	sbci	r25, 0xFF	; 255
    8ba6:	08 95       	ret

00008ba8 <__prologue_saves__>:
    8ba8:	2f 92       	push	r2
    8baa:	3f 92       	push	r3
    8bac:	4f 92       	push	r4
    8bae:	5f 92       	push	r5
    8bb0:	6f 92       	push	r6
    8bb2:	7f 92       	push	r7
    8bb4:	8f 92       	push	r8
    8bb6:	9f 92       	push	r9
    8bb8:	af 92       	push	r10
    8bba:	bf 92       	push	r11
    8bbc:	cf 92       	push	r12
    8bbe:	df 92       	push	r13
    8bc0:	ef 92       	push	r14
    8bc2:	ff 92       	push	r15
    8bc4:	0f 93       	push	r16
    8bc6:	1f 93       	push	r17
    8bc8:	cf 93       	push	r28
    8bca:	df 93       	push	r29
    8bcc:	cd b7       	in	r28, 0x3d	; 61
    8bce:	de b7       	in	r29, 0x3e	; 62
    8bd0:	ca 1b       	sub	r28, r26
    8bd2:	db 0b       	sbc	r29, r27
    8bd4:	0f b6       	in	r0, 0x3f	; 63
    8bd6:	f8 94       	cli
    8bd8:	de bf       	out	0x3e, r29	; 62
    8bda:	0f be       	out	0x3f, r0	; 63
    8bdc:	cd bf       	out	0x3d, r28	; 61
    8bde:	09 94       	ijmp

00008be0 <__epilogue_restores__>:
    8be0:	2a 88       	ldd	r2, Y+18	; 0x12
    8be2:	39 88       	ldd	r3, Y+17	; 0x11
    8be4:	48 88       	ldd	r4, Y+16	; 0x10
    8be6:	5f 84       	ldd	r5, Y+15	; 0x0f
    8be8:	6e 84       	ldd	r6, Y+14	; 0x0e
    8bea:	7d 84       	ldd	r7, Y+13	; 0x0d
    8bec:	8c 84       	ldd	r8, Y+12	; 0x0c
    8bee:	9b 84       	ldd	r9, Y+11	; 0x0b
    8bf0:	aa 84       	ldd	r10, Y+10	; 0x0a
    8bf2:	b9 84       	ldd	r11, Y+9	; 0x09
    8bf4:	c8 84       	ldd	r12, Y+8	; 0x08
    8bf6:	df 80       	ldd	r13, Y+7	; 0x07
    8bf8:	ee 80       	ldd	r14, Y+6	; 0x06
    8bfa:	fd 80       	ldd	r15, Y+5	; 0x05
    8bfc:	0c 81       	ldd	r16, Y+4	; 0x04
    8bfe:	1b 81       	ldd	r17, Y+3	; 0x03
    8c00:	aa 81       	ldd	r26, Y+2	; 0x02
    8c02:	b9 81       	ldd	r27, Y+1	; 0x01
    8c04:	ce 0f       	add	r28, r30
    8c06:	d1 1d       	adc	r29, r1
    8c08:	0f b6       	in	r0, 0x3f	; 63
    8c0a:	f8 94       	cli
    8c0c:	de bf       	out	0x3e, r29	; 62
    8c0e:	0f be       	out	0x3f, r0	; 63
    8c10:	cd bf       	out	0x3d, r28	; 61
    8c12:	ed 01       	movw	r28, r26
    8c14:	08 95       	ret

00008c16 <_exit>:
    8c16:	f8 94       	cli

00008c18 <__stop_program>:
    8c18:	ff cf       	rjmp	.-2      	; 0x8c18 <__stop_program>
